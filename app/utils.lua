-- Autogenerated with DRAKON Editor 1.32
local table = table
local string = string
local pairs = pairs
local ipairs = ipairs
local type = type

local tostring = tostring
local tonumber = tonumber
local error = error
local print = print

-- configuration
local global_cfg = global_cfg
local price_cfg = price_cfg



local math = require("math")
local clock = require("clock")
local log = require("log")

local digest = require("digest")
local fiber = require("fiber")
local io = require("io")
local os = require("os")
local utf8 = require("lua-utf8")
local json=require('json')
local msgpack = require("msgpack")
local pickle = require("pickle")
local fun = require('fun')
local socket = require("socket")
local lxp = require("lxp")
local box = box



local a_code = string.byte("a")
local z_code = string.byte("z")
local d0 = string.byte("0")
local d9 = string.byte("9")
local under = string.byte("_")
local at = string.byte("@")
local dot = string.byte(".")
local dash = string.byte("-")


setfenv(1, {}) 

local content_types = {}
local g_separators = {}

local gspace = {}
local g_chars = {}

gspace[10] = true
gspace[13] = true
gspace[32] = true
gspace[9] = true

gspace[string.byte("{")] = true
gspace[string.byte("}")] = true
gspace[string.byte("-")] = true
gspace[string.byte("_")] = true
gspace[string.byte("/")] = true
gspace[string.byte("+")] = true
gspace[string.byte("*")] = true
gspace[string.byte("\\")] = true
gspace[string.byte("%")] = true
gspace[string.byte("&")] = true
gspace[string.byte("^")] = true
gspace[string.byte("=")] = true
gspace[string.byte("?")] = true
gspace[string.byte("!")] = true
gspace[string.byte("\"")] = true
gspace[string.byte("\'")] = true
gspace[string.byte(".")] = true
gspace[string.byte(",")] = true
gspace[string.byte(";")] = true
gspace[string.byte(":")] = true
gspace[string.byte("(")] = true
gspace[string.byte(")")] = true
gspace[string.byte("[")] = true
gspace[string.byte("]")] = true
gspace[string.byte("<")] = true
gspace[string.byte(">")] = true
gspace[string.byte("|")] = true

local g_days_in_month = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 } 

function add_char_range(first, last, result)
    -- item 1049
    local i
    local f = string.byte(first, 1)
    local l = string.byte(last, 1)
    -- item 10500001
    i = f
    while true do
        -- item 10500002
        if i <= l then
            
        else
            break
        end
        -- item 1052
        table.insert(result, i)
        -- item 10500003
        i = i + 1
    end
end

function add_list_to_set(set, list)
    -- item 432
    if list then
        for _, value in ipairs(list) do
            -- item 437
            set[value] = true
        end
    end
end

function add_months(now, months)
    -- item 814
    local datetime = os.date("*t", now)
    -- item 857
    local add_months = months % 12
    -- item 853
    local next_month = datetime.month + add_months
    local year2 = datetime.year + math.floor(months / 12)
    -- item 854
    if next_month > 12 then
        -- item 858
        year2 = year2 + 1
        next_month = next_month - 12
    end
    -- item 815
    local days_next_month = get_days_in_month(
    	year2,
    	next_month
    )
    -- item 850
    local day2 = math.min(
    	datetime.day,
    	days_next_month
    )
    -- item 851
    datetime.day = day2
    datetime.month = next_month
    datetime.year = year2
    -- item 852
    return os.time(datetime)
end

function add_range(dst, src)
    -- item 353
    local count = #src
    local insert = table.insert
    -- item 3540001
    i = 1
    while true do
        -- item 3540002
        if i <= count then
            
        else
            break
        end
        -- item 356
        insert(
        	dst,
        	src[i]
        )
        -- item 3540003
        i = i + 1
    end
end

function add_separator(text)
    -- item 770
    g_separators[utf8.byte(text)] = true
end

function add_set(src, dst)
    -- item 1260
    if src then
        for key, value in pairs(src) do
            -- item 1267
            dst[key] = value
        end
    end
end

function append_char(text, code)
    -- item 886
    return utf8.insert(
    	text,
    	utf8.char(code)
    )
end

function bash_escape(text)
    -- item 1183
    local quote = utf8.codepoint("'")
    -- item 1165
    local result = ""
    for i, code in utf8.next, text do
        -- item 1192
        if code == quote then
            -- item 1188
            result = utf8.insert(
            	result,
            	"'\\''"
            )
        else
            -- item 1184
            result = utf8.insert(
            	result,
            	utf8.char(code)
            )
        end
    end
    -- item 1166
    return result
end

function build_index_parts(table_ref, part_names)
    -- item 1582
    local parts = {}
    for _, field_name in ipairs(part_names) do
        -- item 1586
        local ordinal = find_by_prop(
        	table_ref.fields,
        	"name",
        	field_name
        )
        -- item 1587
        local field = table_ref.fields[ordinal]
        -- item 1588
        table.insert(parts, ordinal)
        table.insert(parts, field.type)
    end
    -- item 1583
    return parts
end

function build_random_chars()
    -- item 1040
    local result = {}
    -- item 1053
    add_char_range("a", "z", result)
    add_char_range("A", "Z", result)
    add_char_range("0", "9", result)
    -- item 1041
    return result
end

function bulk_action(table, field_index, action)
    -- item 1155
    local counter = 0
    -- item 1139
    if table then
        for it, row in table:pairs() do
            -- item 1145
            local old_value = row[field_index]
            -- item 1146
            local new_value = action(old_value)
            -- item 1147
            if new_value then
                -- item 1150
                local row2 = row:update(
                	{{"=", field_index, new_value}}
                )
                -- item 1151
                table:replace(row2)
                -- item 1156
                counter = counter + 1
            end
        end
        -- item 1157
        return counter
    else
        -- item 1142
        error("table not found: " .. table_name)
    end
end

function contains(list, element)
    -- item 66
    if list then
        for _, item in ipairs(list) do
            -- item 61
            if item == element then
                -- item 64
                return true
            end
        end
        -- item 65
        return false
    else
        -- item 69
        return false
    end
end

function copy(obj)
    -- item 494
    local result = {}
    -- item 1268
    add_set(obj, result)
    -- item 495
    return result
end

function copy_props(src, dst)
    for key, value in pairs(src) do
        -- item 1386
        dst[key] = value
    end
end

function create_primary_key(table_ref, btable)
    -- item 1556
    local parts = {}
    local ordinal = 1
    local index_type
    for _, field in ipairs(table_ref.fields) do
        -- item 1557
        if field.pk then
            -- item 1553
            table.insert(parts, ordinal)
            table.insert(parts, field.type)
        end
        -- item 1560
        ordinal = ordinal + 1
    end
    -- item 1561
    if #parts == 2 then
        -- item 1564
        index_type = "hash"
    else
        -- item 1565
        index_type = "tree"
    end
    -- item 1566
    btable:create_index(
    	"primary",
    	{
    		type = index_type,
    		unique = true,
    		parts = parts
    	}
    )
end

function create_table(table_ref)
    -- item 1544
    local btable = box.space[table_ref.name]
    -- item 1541
    if btable == nil then
        -- item 1546
        btable = box.schema.create_space(
        	table_ref.name
        )
        -- item 1547
        create_primary_key(table_ref, btable)
    end
    -- item 1545
    table_ref.data = btable
    -- item 1573
    if table_ref.indexes then
        for _, index in ipairs(table_ref.indexes) do
            -- item 1569
            if btable.index[index.name] then
                
            else
                -- item 1576
                local parts = build_index_parts(
                	table_ref,
                	index.parts
                )
                -- item 1572
                btable:create_index(
                	index.name,
                	{
                		type = index.type,
                		unique = index.unique,
                		parts = parts
                	}
                )
            end
        end
    end
end

function date(yyyy, mm, dd)
    -- item 423
    local tt = {
    	year = yyyy,
    	month = mm,
    	day = dd
    }
    -- item 424
    return os.time(tt)
end

function date8_to_expiry(date8)
    -- item 802
    local time = parse_date8(date8)
    -- item 803
    if time then
        -- item 806
        local minute = 60
        -- item 807
        return time - minute
    else
        -- item 808
        return nil
    end
end

function days_to_secs(days)
    -- item 444
    return days * 24 * 3600
end

function delete_by(table_ref, index_name, value)
    -- item 1616
    local pk_length = 0
    for i, field in ipairs(table_ref.fields) do
        -- item 1620
        if field.pk then
            
        else
            -- item 1639
            pk_length = i - 1
            break
        end
    end
    -- item 1624
    local rows = table_ref.data
    	.index[index_name]
    	:select(value)
    for _, row in ipairs(rows) do
        -- item 1637
        local key = take_first(row, pk_length)
        -- item 1638
        table_ref.data:delete(key)
    end
end

function delete_row(table_ref, key)
    -- item 1323
    return table_ref.data:delete(key)
end

function delete_row2(table_ref, key1, key2)
    -- item 1324
    return table_ref.data:delete({key1, key2})
end

function filter(list, criterion)
    -- item 1238
    local result = {}
    -- item 1235
    if list then
        for _, item in ipairs(list) do
            -- item 1242
            if criterion(item) then
                -- item 1241
                table.insert(
                	result,
                	item
                )
            end
        end
    end
    -- item 1239
    return result
end

function find(list, item)
    -- item 88
    if list then
        for i, v in ipairs(list) do
            -- item 94
            if v == item then
                -- item 96
                return i
            end
        end
        -- item 97
        return -1
    else
        -- item 91
        return -1
    end
end

function find_by_prop(array, prop, value)
    for i, item in ipairs(array) do
        -- item 1598
        if item[prop] == value then
            -- item 1601
            return i
        end
    end
    -- item 1602
    return -1
end

function find_many_in_line(line_no, line, needle, result, original)
    -- item 978
    local first, last
    local current = line
    local start = 0
    while true do
        -- item 977
        first, last = utf8.find(
        	current,
        	needle
        )
        -- item 979
        if first then
            
        else
            break
        end
        -- item 982
        local item = {
        	line = original,
        	first = first + start,
        	last = last + start,
        	line_no = line_no
        }
        -- item 983
        table.insert(result, item)
        -- item 984
        current = utf8.sub(
        	current, 
        	last + 1
        )
        -- item 991
        start = start + last
    end
end

function find_many_substrings(haystack, needle, ignore_case)
    -- item 985
    local original
    -- item 962
    local result = {}
    -- item 964
    if (is_empty(haystack)) or (is_empty(needle)) then
        
    else
        -- item 968
        local lines = split(haystack, "\n")
        for i, line in ipairs(lines) do
            -- item 990
            original = line
            -- item 986
            if ignore_case then
                -- item 989
                line = utf8.lower(line)
            end
            -- item 971
            find_many_in_line(
            	i,
            	line,
            	needle,
            	result,
            	original
            )
        end
    end
    -- item 963
    return result
end

function get_days_in_month(year, month)
    -- item 826
    local days = g_days_in_month[month]
    -- item 823
    if (month == 2) and (is_leap_year(year)) then
        -- item 848
        return 29
    else
        -- item 827
        return days
    end
end

function get_extension(filename)
    -- item 370
    local dotstr = "."
    local dot = dotstr:byte(1)
    -- item 362
    local i = #filename
    while true do
        -- item 363
        if i > 0 then
            
        else
            -- item 366
            return ""
        end
        -- item 368
        if filename:byte(i) == dot then
            -- item 372
            return string.sub(filename, i + 1)
        end
        -- item 371
        i = i - 1
    end
end

function get_filename(path)
    -- item 390
    local parts = split(path, "/")
    -- item 391
    return parts[#parts]
end

function get_host_name(url)
    -- item 662
    if (url) and (not (url == "")) then
        -- item 667
        local first, last = url:find("://")
        -- item 673
        if last then
            -- item 668
            local no_prot = url:sub(last + 1)
            local slash = no_prot:find("/")
            local colon = no_prot:find(":")
            -- item 674
            local host_port
            -- item 669
            if slash then
                -- item 672
                host_port = no_prot:sub(1, slash - 1)
            else
                -- item 671
                host_port = no_prot
            end
            -- item 676
            if colon then
                -- item 679
                return host_port:sub(1, colon - 1)
            else
                -- item 678
                return host_port
            end
        else
            -- item 665
            return ""
        end
    else
        -- item 665
        return ""
    end
end

function get_mime(filename, default)
    -- item 378
    local extension = get_extension(filename)
    -- item 379
    local type = content_types[extension]
    -- item 380
    if type then
        
    else
        -- item 383
        type = default
    end
    -- item 384
    return type
end

function get_product(product_id)
    -- item 480
    local product = price_cfg.products[product_id]
    -- item 481
    if product then
        -- item 484
        return product
    else
        -- item 485
        error("product '"
         .. tostring(product_id)
         .. "' not found")
    end
end

function get_row(table_ref, key)
    -- item 1495
    local row = table_ref.data:get(key)
    -- item 1496
    if row then
        -- item 1481
        return get_row_core(table_ref, row)
    else
        -- item 1499
        return nil
    end
end

function get_row2(table_ref, key1, key2)
    -- item 1515
    local row = table_ref.data:get({key1, key2})
    -- item 1516
    if row then
        -- item 1514
        return get_row_core(table_ref, row)
    else
        -- item 1519
        return nil
    end
end

function get_row_core(table_ref, row)
    -- item 1505
    local fields = row[#row]
    -- item 1510
    local tfields = table_ref.fields
    local count = #tfields
    -- item 15060001
    local i = 1
    while true do
        -- item 15060002
        if i < count then
            
        else
            break
        end
        -- item 1509
        local field = tfields[i]
        -- item 1511
        local part = row[i]
        -- item 1508
        fields[field.name] = part
        -- item 15060003
        i = i + 1
    end
    -- item 1513
    return fields
end

function get_rows(table_ref, key1)
    -- item 1665
    local rows = table_ref.data.index.primary
    	:select(key1)
    -- item 1666
    local output = {}
    for _, row in ipairs(rows) do
        -- item 1669
        local out_row = get_row_core(table_ref, row)
        -- item 1670
        table.insert(output, out_row)
    end
    -- item 1671
    return output
end

function good_id_symbols(id)
    -- item 259
    local chars = string_to_chars(id)
    for _, code in ipairs(chars) do
        -- item 248
        if ((((is_alpha(code)) or (is_digit(code))) or (code == under)) or (code == dot)) or (code == dash) then
            
        else
            -- item 245
            return false
        end
    end
    -- item 249
    return true
end

function group_by(list, property)
    -- item 1218
    local result = {}
    for _, item in ipairs(list) do
        -- item 1222
        local key = item[property]
        local group = result[key]
        -- item 1223
        if group then
            
        else
            -- item 1226
            group = {}
            result[key] = group
        end
        -- item 1227
        table.insert(
        	group,
        	item
        )
    end
    -- item 1219
    return result
end

function http_post(url, data, mime, headers, user)
    -- item 570
    local tmp = os.tmpname()
    local header_str = ""
    local user_str = ""
    -- item 584
    if headers then
        for _, header in ipairs(headers) do
            -- item 583
            header_str = header_str .. " -H \""
              .. header .. "\""
        end
    end
    -- item 652
    if user then
        -- item 655
        user_str = "-u '" .. user .. "'"
    end
    -- item 569
    local command = string.format(
    	'curl -X POST --data \'%s\' -H "Content-type: %s" %s %s %s > %s',
    	data,
    	mime,
    	header_str,
    	user_str,
    	url,
    	tmp
    )
    -- item 656
    log.info(command)
    -- item 578
    os.execute(command)
    -- item 571
    local response = read_all_bytes(tmp)
    -- item 861
    log.info(tostring(response))
    -- item 579
    os.remove(tmp)
    -- item 645
    return response
end

function http_post_json(url, obj, headers, user)
    -- item 615
    local mime = "application/json; charset=utf-8"
    -- item 610
    local data = json.encode(obj)
    -- item 607
    local response = http_post(url, data, mime, headers, user)
    -- item 606
    if response then
        -- item 609
        if response == "" then
            -- item 641
            return {}
        else
            -- item 608
            local result = json.decode(response)
            -- item 613
            return result
        end
    else
        -- item 614
        return nil
    end
end

function init()
    -- item 402
    content_types["html"] = "text/html; charset=utf-8"
    content_types["htm"] = "text/html; charset=utf-8"
    content_types["css"] = "text/css; charset=utf-8"
    content_types["js"] = "application/javascript; charset=utf-8"
    content_types["png"] = "image/png"
    content_types["jpg"] = "image/jpeg"
    content_types["svg"] = "image/svg+xml"
    content_types["json"] = "application/json; charset=utf-8"
    content_types["txt"] = "text/plain; charset=utf-8"
    content_types["ttf"] = "application/x-font-ttf"
    content_types["eot"] = "application/vnd.ms-fontobject"
    content_types["woff"] = "application/x-font-woff"
    content_types["ico"] = "image/x-icon"
    content_types["pdf"] = "application/pdf"
    -- item 776
    init_separators()
    -- item 1054
    g_chars = build_random_chars()
end

function init_separators()
    -- item 775
    add_separator(" ")
    add_separator("\t")
    add_separator("\r")
    add_separator("\n")
    add_separator(".")
    add_separator(",")
    add_separator(":")
    add_separator(";")
    add_separator("-")
    add_separator("=")
    add_separator("\"")
    add_separator("'")
    add_separator("/")
    add_separator("\\")
    add_separator("(")
    add_separator(")")
    add_separator("[")
    add_separator("]")
    add_separator("{")
    add_separator("}")
    add_separator("~")
    add_separator("`")
    add_separator("#")
    add_separator("@")
    add_separator("%")
    add_separator("$")
    add_separator("&")
    add_separator("?")
    add_separator("!")
    add_separator("^")
    add_separator("|")
    add_separator("<")
    add_separator(">")
end

function insert1(table_ref, fields)
    -- item 1645
    local id
    while true do
        -- item 1646
        id = random_password(6)
        -- item 1648
        local row = table_ref.data:get(id)
        -- item 1649
        if row then
            
        else
            break
        end
    end
    -- item 1653
    local id_field = table_ref.fields[1].name
    -- item 1647
    fields[id_field] = id
    -- item 1651
    insert_row(table_ref, fields)
    -- item 1652
    return id
end

function insert_row(table_ref, fields)
    -- item 1397
    local row = {}
    -- item 1415
    local tfields = table_ref.fields
    local count = #tfields
    -- item 13980001
    local i = 1
    while true do
        -- item 13980002
        if i < count then
            
        else
            -- item 1418
            table.insert(row, fields)
            -- item 1419
            table_ref.data:replace(row)
            break
        end
        -- item 1414
        local field = tfields[i]
        local field_name = field.name
        -- item 1416
        local part = fields[field_name]
        -- item 1420
        if part == nil then
            -- item 1423
            error("insert_row: " ..
              table_ref.name ..
              ": field is nil: " ..
              field_name)
            break
        end
        -- item 1408
        fields[field_name] = nil
        -- item 1417
        table.insert(row, part)
        -- item 13980003
        i = i + 1
    end
end

function is_alpha(code)
    -- item 265
    if (code >= a_code) and (code <= z_code) then
        -- item 268
        return true
    else
        -- item 269
        return false
    end
end

function is_digit(code)
    -- item 276
    if (code >= d0) and (code <= d9) then
        -- item 279
        return true
    else
        -- item 280
        return false
    end
end

function is_empty(value)
    -- item 317
    if (value) and (not (#value == 0)) then
        -- item 321
        return false
    else
        -- item 320
        return true
    end
end

function is_leap_year(year)
    -- item 836
    if year % 4 == 0 then
        -- item 840
        if year % 100 == 0 then
            -- item 844
            if year % 400 == 0 then
                -- item 847
                return true
            else
                -- item 846
                return false
            end
        else
            -- item 843
            return true
        end
    else
        -- item 839
        return false
    end
end

function is_space(code)
    -- item 236
    return not not gspace[code]
end

function join(list, separator)
    -- item 328
    local result = ""
    for _, item in ipairs(list) do
        -- item 1209
        if result == "" then
            -- item 1212
            result = item
        else
            -- item 332
            result = result .. separator .. item
        end
    end
    -- item 329
    return result
end

function list_to_set(list)
    -- item 196
    local result = {}
    -- item 438
    add_list_to_set(result, list)
    -- item 197
    return result
end

function load_as_base64(filename)
    -- item 403
    local bytes = read_all_bytes(filename)
    -- item 404
    if bytes then
        -- item 408
        local b64 = digest.base64_encode(bytes)
        -- item 410
        return b64
    else
        -- item 407
        return nil
    end
end

function make_comparer(prop)
    -- item 1713
    return function(left, right)
    	return left[prop] < right[prop]
    end
end

function make_comparer_desc(prop)
    -- item 1719
    return function(left, right)
    	return left[prop] > right[prop]
    end
end

function make_language_path(language)
    -- item 453
    if (language) and (not (language == "")) then
        -- item 4550001
        if language == "en-us" then
            -- item 461
            return "en"
        else
            -- item 460
            return language
        end
    else
        -- item 452
        return "en"
    end
end

function map(list, mapper)
    -- item 1205
    local result = {}
    -- item 1202
    if list then
        for _, item in ipairs(list) do
            -- item 1207
            local copy = mapper(item)
            -- item 1208
            table.insert(
            	result,
            	copy
            )
        end
    end
    -- item 1206
    return result
end

function months_to_secs(months)
    -- item 467
    local secs_in_month = 3600 * 24 * 365.25 / 12
    -- item 468
    return round(months * secs_in_month)
end

function msgpack_call(host, port, request)
    -- item 621
    local sock = socket.tcp_connect(host, port)
    -- item 622
    if sock then
        -- item 634
        local response
        -- item 629
        if send_msgpack(sock, request) then
            -- item 627
            response = receive_msgpack(sock)
        else
            -- item 631
            response = nil
        end
        -- item 633
        sock:close()
        -- item 639
        return response
    else
        -- item 625
        log.error("could not open socket: "
          .. tostring(host) .. ":" .. tostring(port))
        -- item 626
        return nil
    end
end

function normalize_string(text)
    -- item 877
    local low = utf8.lower(text)
    -- item 930
    local machine = string_normalizer()
    machine.result = ""
    for i, code in utf8.next, low do
        -- item 931
        if is_space(code) then
            -- item 935
            machine:space(code)
        else
            -- item 934
            machine:char(code)
        end
    end
    -- item 876
    return machine.result
end

function parse_compound_name(text)
    -- item 777
    if text then
        -- item 743
        local state = "idle"
        local low = utf8.lower(text)
        local result = ""
        local start = true
        for i, code in utf8.next, low do
            -- item 750
            local is_separ = g_separators[code]
            -- item 747
            if state == "idle" then
                -- item 753
                if is_separ then
                    
                else
                    -- item 757
                    if start then
                        
                    else
                        -- item 760
                        result = utf8.insert(
                        	result,
                        	" "
                        )
                    end
                    -- item 761
                    result = utf8.insert(
                    	result,
                    	utf8.char(code)
                    )
                    -- item 763
                    state = "token"
                end
            else
                -- item 751
                if is_separ then
                    -- item 762
                    state = "idle"
                else
                    -- item 756
                    start = false
                    -- item 755
                    result = utf8.insert(
                    	result,
                    	utf8.char(code)
                    )
                end
            end
        end
        -- item 764
        return result
    else
        -- item 780
        return ""
    end
end

function parse_date8(date8)
    -- item 786
    if date8 then
        -- item 791
        local text = tostring(date8)
        -- item 790
        local ys = text:sub(1, 4)
        local ms = text:sub(5, 6)
        local ds = text:sub(7, 8)
        -- item 792
        local year = tonumber(ys)
        local month = tonumber(ms)
        local day = tonumber(ds)
        -- item 793
        if ((year) and (month)) and (day) then
            -- item 859
            local tt = {
            	year = year,
            	month = month,
            	day = day,
            	hour = 0,
            	min = 0,
            	sec = 0
            }
            -- item 860
            return os.time(tt)
        else
            -- item 789
            return nil
        end
    else
        -- item 789
        return nil
    end
end

function parse_query(text)
    -- item 727
    local parts = split(text, "&")
    -- item 728
    local result = {}
    for _, part in ipairs(parts) do
        -- item 732
        local chunks = split(part, "=")
        -- item 733
        if #chunks == 2 then
            -- item 736
            local key = chunks[1]
            local value = chunks[2]
            -- item 737
            result[key] = value
        end
    end
    -- item 729
    return result
end

function parse_xml(names, xml)
    -- item 707
    local self = {
    	result = {},
    	names = {}
    }
    for _, name in ipairs(names) do
        -- item 708
        local tag = "<" .. name .. ">"
        -- item 709
        self.names[tag] = name
    end
    -- item 710
    local callbacks = {
    	Default = function(parser, str)
    		simple_xml_default(self, str)
    	end
    }
    -- item 711
    local parser = lxp.new(callbacks)
    -- item 714
    local ok, msg, line = parser:parse(xml)
    -- item 721
    parser:stop()
    -- item 717
    if ok then
        -- item 716
        return true, self.result
    else
        -- item 720
        return false, msg
    end
end

function print_amount(amount)
    -- item 685
    return string.format("%.2f", amount)
end

function print_table(obj)
    for i, row in pairs(obj) do
        -- item 999
        print(i, row)
    end
end

function random_password(length)
    -- item 1030
    local result = ""
    -- item 1028
    local bytes = digest.urandom(length)
    -- item 10310001
    local i = 1
    while true do
        -- item 10310002
        if i <= #bytes then
            
        else
            break
        end
        -- item 1033
        local code = string.byte(bytes, i)
        -- item 1055
        local index = (code % #g_chars) + 1
        local char = g_chars[index]
        -- item 1034
        result = result .. string.char(char)
        -- item 10310003
        i = i + 1
    end
    -- item 1029
    return result
end

function random_string()
    -- item 300
    local result = ""
    -- item 298
    local bytes = digest.urandom(20)
    -- item 3010001
    local i = 1
    while true do
        -- item 3010002
        if i <= #bytes then
            
        else
            break
        end
        -- item 303
        local code = string.byte(bytes, i)
        -- item 304
        result = result .. string.format("%x", code)
        -- item 3010003
        i = i + 1
    end
    -- item 299
    return result
end

function read_all_bytes(filename)
    -- item 141
    local file, msg = io.open(filename, "rb")
    -- item 142
    if file then
        -- item 147
        local content = file:read("*all")
        -- item 148
        file:close()
        -- item 145
        return content
    else
        -- item 146
        return nil
    end
end

function read_json(filename)
    -- item 868
    local data = read_all_bytes(filename)
    -- item 867
    local obj = json.decode(data)
    -- item 869
    return obj
end

function receive_length(sock)
    -- item 532
    local bytes = sock:read(4)
    -- item 533
    if bytes then
        -- item 537
        if #bytes == 0 then
            -- item 536
            return 0
        else
            -- item 531
            local length = pickle.unpack("i", bytes)
            -- item 538
            return length
        end
    else
        -- item 539
        log.error("error reading length")
        -- item 536
        return 0
    end
end

function receive_msgpack(sock)
    -- item 540
    local length = receive_length(sock)
    -- item 541
    if length then
        -- item 545
        local bytes = sock:read(length)
        -- item 546
        if length then
            -- item 550
            return msgpack.decode(bytes)
        else
            -- item 549
            log.error("error reading payload from socket")
            -- item 544
            return nil
        end
    else
        -- item 544
        return nil
    end
end

function remove(list, item)
    -- item 106
    local index = find(list, item)
    -- item 103
    if index == -1 then
        
    else
        -- item 107
        table.remove(list, index)
    end
end

function repeat_value(what, count)
    -- item 1252
    qs = {}
    -- item 12500001
    i = 1
    while true do
        -- item 12500002
        if i <= count then
            
        else
            break
        end
        -- item 1253
        table.insert(qs, what)
        -- item 12500003
        i = i + 1
    end
    -- item 1254
    return qs
end

function replace(str, from_s, to_s)
    -- item 338
    local i
    local c
    local result = ""
    local from = from_s:byte(1)
    local to = to_s:byte(1)
    -- item 3410001
    i = 1
    while true do
        -- item 3410002
        if i <= #str then
            
        else
            break
        end
        -- item 346
        c = str:byte(i)
        -- item 343
        if c == from then
            -- item 347
            result = result .. to_s
        else
            -- item 339
            result = result .. string.char(c)
        end
        -- item 3410003
        i = i + 1
    end
    -- item 340
    return result
end

function replace_quoted(text, from, to)
    -- item 1088
    local first, last
    -- item 1073
    if text then
        -- item 1087
        local from2 = "'" .. from .. "'"
        -- item 1089
        first, last = text:find(from2)
        -- item 1081
        if first == nil then
            -- item 1092
            local from3 = "\"" .. from .. "\""
            -- item 1093
            first, last = text:find(from3)
            -- item 1090
            if first == nil then
                -- item 1080
                first, last = text:find(from)
                -- item 1094
                if first == nil then
                    -- item 1076
                    return nil
                else
                    -- item 1077
                    local to2 = "'" .. to .. "'"
                    -- item 1085
                    local result = text:sub(1, first - 1) ..
                    	to2 ..
                    	text:sub(last + 1)
                    -- item 1086
                    return result
                end
            else
                -- item 1077
                local to2 = "'" .. to .. "'"
                -- item 1085
                local result = text:sub(1, first - 1) ..
                	to2 ..
                	text:sub(last + 1)
                -- item 1086
                return result
            end
        else
            -- item 1077
            local to2 = "'" .. to .. "'"
            -- item 1085
            local result = text:sub(1, first - 1) ..
            	to2 ..
            	text:sub(last + 1)
            -- item 1086
            return result
        end
    else
        -- item 1076
        return nil
    end
end

function replace_quoted_in_object(obj, path, from, to)
    -- item 1112
    local result = nil
    -- item 1110
    if obj then
        -- item 1119
        local current = obj
        local i
        -- item 11170001
        i = 1
        while true do
            -- item 11170002
            if i < #path then
                
            else
                -- item 1125
                local property = path[#path]
                -- item 1124
                local value = current[property]
                -- item 1126
                local value2 = replace_quoted(
                	value,
                	from,
                	to
                )
                -- item 1127
                if value2 then
                    -- item 1130
                    current[property] = value2
                    -- item 1132
                    result = obj
                end
                break
            end
            -- item 1131
            local step = path[i]
            -- item 1120
            current = current[step]
            -- item 1152
            if current then
                
            else
                break
            end
            -- item 11170003
            i = i + 1
        end
    end
    -- item 1113
    return result
end

function reverse(list)
    -- item 75
    local result = {}
    -- item 77
    if list then
        -- item 800001
        local i = #list
        while true do
            -- item 800002
            if i > 0 then
                
            else
                break
            end
            -- item 82
            local value = list[i]
            table.insert(result, value)
            -- item 800003
            i = i - 1
        end
    end
    -- item 76
    return result
end

function round(num, idp)
    -- item 474
    local mult = 10^(idp or 0)
    return math.floor(num * mult + 0.5) / mult
end

function select_by(table_ref, index_name, value)
    -- item 1520
    local rows = table_ref.data.index[index_name]
    	:select(value)
    -- item 1521
    local output = {}
    for _, row in ipairs(rows) do
        -- item 1524
        local out_row = get_row_core(table_ref, row)
        -- item 1525
        table.insert(output, out_row)
    end
    -- item 1526
    return output
end

function send_length(sock, bytes)
    -- item 519
    local length_bytes = pickle.pack("i", #bytes)
    -- item 520
    if sock:write(length_bytes) then
        -- item 523
        return true
    else
        -- item 525
        log.error("could not send length")
        -- item 524
        return false
    end
end

function send_msgpack(sock, obj)
    -- item 509
    if obj then
        -- item 513
        local bytes = msgpack.encode(obj)
        -- item 555
        if send_length(sock, bytes) then
            -- item 551
            if sock:write(bytes) then
                -- item 558
                return true
            else
                -- item 553
                log.error("error sending payload")
                -- item 557
                return false
            end
        else
            -- item 557
            return false
        end
    else
        -- item 512
        error("obj is nil")
    end
end

function set_to_list(set)
    -- item 209
    local result = {}
    -- item 211
    if set then
        for key, value in pairs(set) do
            -- item 217
            if value then
                -- item 216
                table.insert(
                	result,
                	key
                )
            end
        end
    end
    -- item 210
    return result
end

function simple_xml_default(self, text)
    -- item 712
    local expected = self.expected
    -- item 691
    if expected then
        -- item 699
        self.result[expected] = text
        -- item 698
        self.expected = nil
    else
        -- item 713
        local name = self.names[text]
        -- item 694
        if name then
            -- item 697
            self.expected = name
        end
    end
end

function sort_by_prop(array, prop, direction)
    -- item 1720
    if direction == "desc" then
        -- item 1723
        comparer = make_comparer_desc(prop)
    else
        -- item 1724
        comparer = make_comparer(prop)
    end
    -- item 1725
    table.sort(array, comparer)
end

function split(text, separator)
    -- item 172
    local tokens = {}
    local current = ""
    -- item 188
    if text then
        -- item 177
        local sep_code = utf8.codepoint(separator)
        for i, code in utf8.next, text do
            -- item 174
            if sep_code == code then
                -- item 179
                if #current == 0 then
                    
                else
                    -- item 182
                    table.insert(tokens, current)
                    -- item 187
                    current = ""
                end
            else
                -- item 178
                current = utf8.insert(
                	current,
                	utf8.char(code)
                )
            end
        end
        -- item 183
        if #current == 0 then
            
        else
            -- item 186
            table.insert(tokens, current)
        end
    end
    -- item 173
    return tokens
end

function split_trim(text, separ)
    -- item 1274
    local parts_all = split(text, separ)
    local parts = {}
    for _, raw_part in ipairs(parts_all) do
        -- item 1277
        local part = trim(raw_part)
        -- item 1278
        if #part == 0 then
            
        else
            -- item 1281
            table.insert(
            	parts,
            	part
            )
        end
    end
    -- item 1282
    return parts
end

function starts_with(what, with)
    -- item 416
    local sub = what:sub(1, #with)
    -- item 417
    return sub == with
end

function string_contains(haystack, needle)
    -- item 942
    if is_empty(needle) then
        -- item 946
        return false
    else
        -- item 941
        local first, last = utf8.find(
        	haystack,
        	needle
        )
        -- item 947
        if first then
            -- item 945
            return true
        else
            -- item 946
            return false
        end
    end
end

function string_contains_words(haystack, needle)
    -- item 1006
    if (is_empty(needle)) or (is_empty(haystack)) then
        -- item 1010
        return false
    else
        -- item 1005
        local first, last = utf8.find(
        	haystack,
        	needle
        )
        -- item 1011
        if first then
            -- item 1013
            if first > 1 then
                -- item 1021
                local before = utf8.sub(
                	haystack,
                	first - 1,
                	first - 1
                )
                -- item 1016
                if before == " " then
                    -- item 1017
                    if last < utf8.len(haystack) then
                        -- item 1022
                        local after = utf8.sub(
                        	haystack,
                        	last + 1,
                        	last + 1
                        )
                        -- item 1020
                        if after == " " then
                            -- item 1009
                            return true
                        else
                            -- item 1010
                            return false
                        end
                    else
                        -- item 1009
                        return true
                    end
                else
                    -- item 1010
                    return false
                end
            else
                -- item 1017
                if last < utf8.len(haystack) then
                    -- item 1022
                    local after = utf8.sub(
                    	haystack,
                    	last + 1,
                    	last + 1
                    )
                    -- item 1020
                    if after == " " then
                        -- item 1009
                        return true
                    else
                        -- item 1010
                        return false
                    end
                else
                    -- item 1009
                    return true
                end
            end
        else
            -- item 1010
            return false
        end
    end
end

function string_normalizer_Normal_char(self, code)
    -- item 919
    self.result = append_char(
    	self.result,
    	code
    )
    -- item 903
    self.state = "Normal"
end

function string_normalizer_Normal_space(self, code)
    -- item 920
    self.state = "Whitespace"
end

function string_normalizer_Start_char(self, code)
    -- item 913
    self.result = append_char(
    	self.result,
    	code
    )
    -- item 895
    self.state = "Normal"
end

function string_normalizer_Start_space(self, code)
    -- item 929
    self.state = "Start"
end

function string_normalizer_Whitespace_char(self, code)
    -- item 928
    self.result = append_char(
    	self.result,
    	32
    )
    -- item 927
    self.result = append_char(
    	self.result,
    	code
    )
    -- item 898
    self.state = "Normal"
end

function string_normalizer_Whitespace_space(self, code)
    -- item 926
    self.state = "Whitespace"
end

function string_to_chars(text)
    -- item 289
    local result = {}
    -- item 2870001
    local i = 1
    while true do
        -- item 2870002
        if i <= #text then
            
        else
            break
        end
        -- item 291
        local code = string.byte(text, i)
        -- item 292
        table.insert(result, code)
        -- item 2870003
        i = i + 1
    end
    -- item 290
    return result
end

function take_first(array, length)
    -- item 1632
    local result = {}
    local i
    -- item 16340001
    i = 1
    while true do
        -- item 16340002
        if i <= length then
            
        else
            break
        end
        -- item 1636
        table.insert(
        	result,
        	array[i]
        )
        -- item 16340003
        i = i + 1
    end
    -- item 1633
    return result
end

function trim(text)
    -- item 237
    return (text:gsub("^%s*(.-)%s*$", "%1"))
end

function update2(space, id, value)
    -- item 41
    space:update(id, {{"=", 2, value}})
end

function update3(space, id, id2, value)
    -- item 47
    space:update({id, id2}, {{"=", 3, value}})
end

function update4(space, id, id2, id3, value)
    -- item 53
    space:update({id, id2, id3}, {{"=", 4, value}})
end

function update_row(table_ref, fields)
    -- item 1466
    local key = {}
    -- item 1444
    local i
    local tfields = table_ref.fields
    local count = #tfields
    -- item 16740001
    i = 1
    while true do
        -- item 16740002
        if i < count then
            
        else
            -- item 1687
            local old_row = table_ref.data:get(key)
            -- item 1694
            if old_row then
                -- item 1702
                local new_row = {}
                -- item 14400001
                i = 1
                while true do
                    -- item 14400002
                    if i < count then
                        
                    else
                        break
                    end
                    -- item 1443
                    local field = tfields[i]
                    local field_name = field.name
                    -- item 1445
                    local part = fields[field_name]
                    -- item 1449
                    if part == nil then
                        -- item 1699
                        part = old_row[i]
                    else
                        -- item 1442
                        fields[field_name] = nil
                    end
                    -- item 1446
                    table.insert(new_row, part)
                    -- item 14400003
                    i = i + 1
                end
                -- item 1478
                local old_fields = old_row[#old_row]
                -- item 1479
                copy_props(fields, old_fields)
                -- item 1480
                table.insert(new_row, old_fields)
                -- item 1448
                table_ref.data:replace(new_row)
            else
                -- item 1696
                error("update_row: " ..
                  table_ref.name ..
                  " row not found")
            end
            break
        end
        -- item 1675
        local field = tfields[i]
        local field_name = field.name
        -- item 1676
        if field.pk then
            -- item 1680
            local part = fields[field_name]
            -- item 1681
            if part == nil then
                -- item 1683
                error("update_row: " ..
                  table_ref.name ..
                  ": field is nil: " ..
                  field_name)
                break
            end
            -- item 1679
            table.insert(key, part)
        end
        -- item 16740003
        i = i + 1
    end
end

function utc_time()
    -- item 1659
    return os.time(os.date("!*t"))
end

function write2(space, id, value)
    -- item 35
    space:upsert({id, value}, {{"=", 2, value}})
end

function write4(space, id, id2, id3, value)
    -- item 113
    space:upsert({id, id2, id3, value}, {{"=", 4, value}})
end

function write_all_bytes(filename, data)
    -- item 154
    local file, msg = io.open(filename, "w+b")
    -- item 155
    if file then
        -- item 162
        if data then
            -- item 160
            file:write(data)
        end
        -- item 161
        file:close()
        -- item 158
        return true
    else
        -- item 159
        return false
    end
end

function write_json(filename, obj)
    -- item 310
    local data = json.encode(obj)
    -- item 311
    return write_all_bytes(filename, data)
end


function string_normalizer()
    local obj = {}
    obj.type_name = "string_normalizer"
    obj.state = "Start"
    obj.char = function(self, code)
        local _state_ = self.state
        if _state_ == "Start" then
            return string_normalizer_Start_char(self, code)
        elseif _state_ == "Normal" then
            return string_normalizer_Normal_char(self, code)
        elseif _state_ == "Whitespace" then
            return string_normalizer_Whitespace_char(self, code)
        end
        return nil
    end
    obj.space = function(self, code)
        local _state_ = self.state
        if _state_ == "Start" then
            return string_normalizer_Start_space(self, code)
        elseif _state_ == "Normal" then
            return string_normalizer_Normal_space(self, code)
        elseif _state_ == "Whitespace" then
            return string_normalizer_Whitespace_space(self, code)
        end
        return nil
    end
    return obj
end

init()

return {
	copy_props = copy_props,
	contains = contains,
	reverse = reverse,
	write2 = write2,
	update2 = update2,
	update3 = update3,
	update4 = update4,
	remove = remove,
	write4 = write4,
	read_all_bytes = read_all_bytes,
	write_all_bytes = write_all_bytes,
	split = split,
	list_to_set = list_to_set,
	set_to_list = set_to_list,
	trim = trim,
	good_id_symbols = good_id_symbols,
	random_string = random_string,
	write_json = write_json,
	is_empty = is_empty,
	join = join,
	replace = replace,
	add_range = add_range,
	get_extension = get_extension,
	get_mime = get_mime,
	get_filename = get_filename,
	load_as_base64 = load_as_base64,
	starts_with = starts_with,
	date = date,
	add_list_to_set = add_list_to_set,
	days_to_secs = days_to_secs,
	make_language_path = make_language_path,
	round = round,
	months_to_secs = months_to_secs,
	get_product = get_product,
	copy = copy,
	send_msgpack = send_msgpack,
	receive_msgpack = receive_msgpack,
	http_post = http_post,
	http_post_json = http_post_json,
	msgpack_call = msgpack_call,
	string_to_chars = string_to_chars,
	is_digit = is_digit,
	get_host_name = get_host_name,
	print_amount = print_amount,
	parse_xml = parse_xml,
	parse_query = parse_query,
	parse_compound_name = parse_compound_name,
	parse_date8 = parse_date8,
	date8_to_expiry = date8_to_expiry,
	add_months = add_months,
	get_days_in_month = get_days_in_month,
	is_leap_year = is_leap_year,
	read_json = read_json,
	normalize_string = normalize_string,
	string_contains = string_contains,
	find_many_substrings = find_many_substrings,
	print_table = print_table,
	string_contains_words = string_contains_words,
	random_password = random_password,
	replace_quoted = replace_quoted,
	replace_quoted_in_object = replace_quoted_in_object,
	bulk_action = bulk_action,
	bash_escape = bash_escape,

	map = map,
	group_by = group_by,
	filter = filter,
	repeat_value = repeat_value,
	add_set = add_set,
	split_trim = split_trim,

	get_row = get_row,
	get_row2 = get_row2,
	get_rows = get_rows,
	insert_row = insert_row,
	select_by = select_by,
	delete_row = delete_row,
	delete_row2 = delete_row2,
	update_row = update_row,
	delete_by = delete_by,
	create_table = create_table,
	insert1 = insert1,
	utc_time = utc_time,
sort_by_prop = sort_by_prop
}
