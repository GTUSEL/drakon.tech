var module = {}

var MaxLineLength = 800
var TabText = "  "
var MaxChars = 40


// Autogenerated with DRAKON Editor 1.32


function MTable(name, keys) {
    // item 1025
    this.name = name
    this.rows = {}
    this.count = 0
    this.keys = keys
    // item 1026
    this.insert = MTable_insert
    // item 1027
    this.get = MTable_get
}

function MTable_get() {
    var current, i, keyPart, keys, table
    // item 970
    table = this
    // item 960
    current = table.rows
    keys = table.keys
    // item 9580001
    i = 0;
    while (true) {
        // item 9580002
        if (i < keys.length) {
            
        } else {
            // item 969
            return current
        }
        // item 963
        keyPart = arguments[i]
        // item 961
        if (keyPart) {
            
        } else {
            // item 971
            return current
        }
        // item 964
        current = current[keyPart]
        // item 965
        if (current) {
            
        } else {
            // item 967
            return null
        }
        // item 9580003
        i++;
    }
}

function MTable_insert(row) {
    var bucket, i, keyName, keyPart, keys, lastKey, message, rows, table
    // item 944
    table = this
    // item 923
    rows = table.rows
    keys = table.keys
    lastKey = keys.length - 1
    // item 9210001
    i = 0;
    while (true) {
        // item 9210002
        if (i < lastKey) {
            
        } else {
            // item 937
            keyName = keys[lastKey]
            keyPart = row[keyName]
            // item 938
            if (keyPart) {
                // item 939
                if (keyPart in rows) {
                    // item 942
                    message = table.name + 
                     " insert: id not unique. id=" +
                     keyToString(table, row)
                    // item 930
                    throw Error(message)
                } else {
                    // item 934
                    rows[keyPart] = row
                    // item 943
                    table.count++
                }
            } else {
                // item 929
                message = table.name + 
                 " insert: id part is empty. name=" +
                 keyName
                // item 930
                throw Error(message)
            }
            break;
        }
        // item 927
        keyName = keys[i]
        keyPart = row[keyName]
        // item 924
        if (keyPart) {
            
        } else {
            // item 929
            message = table.name + 
             " insert: id part is empty. name=" +
             keyName
            // item 930
            throw Error(message)
        }
        // item 928
        bucket = rows[keyPart]
        // item 931
        if (bucket) {
            
        } else {
            // item 935
            bucket = {}
            rows[keyPart] = bucket
        }
        // item 933
        rows = bucket
        // item 9210003
        i++;
    }
}

function MachineStack(machines) {
    var prev
    // item 388
    this.first = {
        prev : null,
        next : null
    }
    // item 389
    this.top = function() { return this.first.next }
    // item 393
    prev = this.first
    // item 3900001
    var _ind390 = 0;
    var _col390 = machines;
    var _len390 = _col390.length;
    while (true) {
        // item 3900002
        if (_ind390 < _len390) {
            
        } else {
            break;
        }
        // item 3900004
        var machine = _col390[_ind390];
        // item 392
        machine.prev = prev
        prev.next = machine
        // item 394
        prev = machine
        // item 3900003
        _ind390++;
    }
}

function OneToMany(one, many, oneField, manyField) {
    // item 977
    this.one = one
    this.many = many
    this.oneField = oneField
    this.manyField = manyField
    // item 978
    this.link = OneToMany_link
    this.unlink = OneToMany_unlink
}

function OneToMany_link(manyRow) {
    var bucket, id, oneRow, self
    // item 989
    self = this
    // item 984
    id = manyRow[self.manyField]
    // item 985
    if (id) {
        // item 988
        oneRow = self.one.get(id)
        // item 990
        bucket = oneRow[self.oneField]
        // item 991
        if (bucket) {
            
        } else {
            // item 994
            bucket = []
            oneRow[self.oneField] = bucket
        }
        // item 995
        bucket.push(manyRow)
    }
}

function OneToMany_unlink(manyRow) {
    var bucket, id, oneRow, self
    // item 1006
    self = this
    // item 1001
    id = manyRow[self.manyField]
    // item 1002
    if (id) {
        // item 1005
        oneRow = self.one.get(id)
        // item 1007
        bucket = oneRow[self.oneField]
        // item 1008
        if (bucket) {
            // item 1009
            remove(bucket, manyRow)
        }
    }
}

function OperBuilder_Idle_eol(self, token) {
    // item 707
    self.next.eol()
    // item 686
    self.state = "Idle";
}

function OperBuilder_Idle_onToken(self, token) {
    // item 705
    if ((token.type == "operator") && (longOp1(token.text))) {
        // item 716
        addOp(self, token)
        // item 714
        self.state = "One";
    } else {
        // item 711
        self.next.onToken(token)
        // item 679
        self.state = "Idle";
    }
}

function OperBuilder_One_eol(self, token) {
    // item 708
    mergeOps(self)
    // item 709
    self.next.eol()
    // item 692
    self.state = "Idle";
}

function OperBuilder_One_onToken(self, token) {
    // item 718
    if ((token.type == "operator") && (longOp2(
self.tokens[0].text,
token.text))) {
        // item 725
        addOp(self, token)
        // item 723
        self.state = "Two";
    } else {
        // item 726
        mergeOps(self)
        // item 720
        self.next.onToken(token)
        // item 688
        self.state = "Idle";
    }
}

function OperBuilder_Two_eol(self, token) {
    // item 717
    mergeOps(self)
    // item 710
    self.next.eol()
    // item 695
    self.state = "Idle";
}

function OperBuilder_Two_onToken(self, token) {
    // item 727
    if ((token.type == "operator") && (longOp3(
self.tokens[0].text,
self.tokens[1].text,
token.text))) {
        // item 733
        addOp(self, token)
        // item 735
        mergeOps(self)
    } else {
        // item 734
        mergeOps(self)
        // item 729
        self.next.onToken(token)
    }
    // item 695
    self.state = "Idle";
}

function SourceFlower_Created_default(self, msg) {
    // item 30
    self.state = "Created";
}

function SourceFlower_Created_init(self, msg) {
    // item 39
    self.render = msg
    self.tokens = []
    self.widths = []
    self.lines = 0
    // item 40
    self.fontHeight = self.render.getFontHeight()
    self.lineHeight = Math.floor(self.fontHeight *
      LineHeight)
    // item 51
    self.height = self.fontHeight
    // item 41
    self.y = self.fontHeight
    self.x = 0
    // item 21
    self.state = "Normal";
}

function SourceFlower_Normal_eol(self, msg) {
    // item 47
    if (self.lines > MaxLines) {
        // item 52
        self.state = null;
    } else {
        // item 45
        addLine(self)
        // item 38
        self.state = "Normal";
    }
}

function SourceFlower_Normal_onToken(self, msg) {
    // item 42
    if (msg.type == "whitespace") {
        // item 46
        advanceOnWhitespace(
            self,
            msg
        )
    } else {
        // item 50
        placeToken(
            self,
            msg
        )
    }
    // item 32
    self.state = "Normal";
}

function Table(name) {
    var self
    // item 876
    this.name = name
    this.nextId = 1
    this.rows = {}
    this.count = 0
    // item 879
    self = this
    // item 877
    this.insert = function(row) {
        return Table_insert(self, row)
    }
    // item 878
    this.get = function(id) {
        return Table_get(self, id)
    }
    // item 880
    this.remove = function(id) {
        return Table_remove(self, id)
    }
    // item 881
    this.clear = function() {
        return Table_clear(self)
    }
}

function Table_clear(table) {
    // item 1046
    table.nextId = 1
    table.rows = {}
    table.count = 0
}

function Table_get(table, id) {
    var message, row
    // item 908
    if (id) {
        // item 907
        row = table.rows[id]
        // item 905
        if (row) {
            // item 915
            return row
        } else {
            // item 912
            message = table.name + 
             " get: row not found. id=" +
             id
            // item 913
            throw Error(message)
        }
    } else {
        // item 911
        message = table.name + 
         " get: id is null or empty"
        // item 913
        throw Error(message)
    }
}

function Table_insert(table, row) {
    var id, message
    // item 891
    id = row.id
    // item 887
    if (id) {
        
    } else {
        // item 892
        id = table.nextId.toString()
        table.nextId++
        row.id = id
    }
    // item 895
    if (id in table.rows) {
        // item 897
        message = table.name + 
         " insert: id not unique. id=" +
         id
        // item 899
        throw Error(message)
    } else {
        // item 890
        table.rows[id] = row
        // item 894
        table.count++
        // item 893
        return id
    }
}

function Table_remove(table, id) {
    var row
    // item 1038
    row = table.rows[id]
    // item 1035
    if (row) {
        // item 1033
        delete table.rows[id]
        // item 1034
        table.count--
        // item 1040
        return row
    } else {
        // item 1039
        return null
    }
}

function Token(type) {
    // item 863
    this.type = type
    this.text = null
}

function TokenBuilder_Building_addChar(self, msg) {
    // item 842
    self.chars.push(
        msg
    )
    // item 825
    self.state = "Building";
}

function TokenBuilder_Building_endToken(self, msg) {
    // item 846
    endToken(self)
    // item 834
    self.state = "Empty";
}

function TokenBuilder_Building_eol(self, msg) {
    // item 847
    endToken(self)
    // item 841
    self.next.eol()
    // item 837
    self.state = "Empty";
}

function TokenBuilder_Building_finish(self, msg) {
    // item 846
    endToken(self)
    // item 834
    self.state = "Empty";
}

function TokenBuilder_Building_identifier(self, msg) {
    // item 843
    endToken(self)
    // item 838
    startToken(
        self,
        "identifier",
        msg
    )
    // item 819
    self.state = "Building";
}

function TokenBuilder_Building_number(self, msg) {
    // item 844
    endToken(self)
    // item 839
    startToken(
        self,
        "number",
        msg
    )
    // item 828
    self.state = "Building";
}

function TokenBuilder_Building_sendToken(self, msg) {
    // item 845
    endToken(self)
    // item 840
    self.next.onToken(
        msg
    )
    // item 831
    self.state = "Empty";
}

function TokenBuilder_Empty_addChar(self, msg) {
    // item 818
    console.error(
    	"unexpected addChar in state" +
    	self.state
    )
    // item 803
    self.state = "Empty";
}

function TokenBuilder_Empty_eol(self, msg) {
    // item 817
    self.next.eol()
    // item 813
    self.state = "Empty";
}

function TokenBuilder_Empty_identifier(self, msg) {
    // item 814
    startToken(
        self,
        "identifier",
        msg
    )
    // item 794
    self.state = "Building";
}

function TokenBuilder_Empty_number(self, msg) {
    // item 815
    startToken(
        self,
        "number",
        msg
    )
    // item 807
    self.state = "Building";
}

function TokenBuilder_Empty_sendToken(self, msg) {
    // item 816
    self.next.onToken(
        msg
    )
    // item 810
    self.state = "Empty";
}

function addChar(self, code) {
    // item 645
    self.chars.push(code)
}

function addItem(parentBlock, item) {
    var text
    // item 1690
    parentBlock.statement.items.push(item)
    // item 1709
    parentBlock.prev = item.type
    // item 1871
    text = item.text || ""
    // item 1892
    parentBlock.seqStart = isSeqStart(item)
}

function addItemWithLength(statement, item) {
    // item 1786
    statement.items.push(item)
    statement.length += item.length
}

function addLine(self) {
    // item 129
    self.widths.push(
        self.x
    )
    // item 128
    self.y += self.lineHeight
    self.x = 0
    self.height += self.lineHeight
    self.lines ++
}

function addLongOp(op) {
    var first, longs, second
    var _sw3200000_ = 0;
    // item 327
    longs = module.longOps
    // item 3200000
    _sw3200000_ = op.length;
    // item 3200001
    if (_sw3200000_ === 2) {
        // item 326
        first = getCreateObj(
            longs,
            op[0]
        )
        // item 330
        getCreateObj(
            first,
            op[1]
        )
    } else {
        // item 3200002
        if (_sw3200000_ === 3) {
            
        } else {
            // item 3200003
            throw "Unexpected switch value: " + _sw3200000_;
        }
        // item 328
        first = getCreateObj(
            longs,
            op[0]
        )
        // item 329
        second = getCreateObj(
            first,
            op[1]
        )
        // item 331
        second.three = true
        // item 332
        getCreateObj(
            second,
            op[2]
        )
    }
}

function addNoWs(self, token) {
    // item 1418
    if ((token.type == "whitespace") || (token.type == "eol")) {
        
    } else {
        // item 1557
        if (token.type == "identifier") {
            // item 1564
            if (token.text in module.keyOps) {
                // item 1567
                token.type = "operator"
            } else {
                // item 1560
                if (token.text in module.keywords) {
                    // item 1561
                    token.type = "keyword"
                }
            }
        }
        // item 1417
        self.tokens.push(token)
    }
}

function addOp(self, token) {
    // item 765
    self.tokens.push(token)
}

function addRange(from, to) {
    // item 1140
    if (from) {
        // item 11430001
        var _ind1143 = 0;
        var _col1143 = from;
        var _len1143 = _col1143.length;
        while (true) {
            // item 11430002
            if (_ind1143 < _len1143) {
                
            } else {
                break;
            }
            // item 11430004
            var item = _col1143[_ind1143];
            // item 1145
            to.push(item)
            // item 11430003
            _ind1143++;
        }
    }
}

function addSingleItem(parentBlock, item) {
    // item 1658
    if (isSeparator(item)) {
        // item 1676
        addItem(
            parentBlock,
            item
        )
        // item 1677
        startStatement(
            parentBlock
        )
    } else {
        // item 1670
        if (isNewStart(parentBlock.prev, item)) {
            // item 1679
            startStatement(
                parentBlock
            )
            // item 1680
            addItem(
                parentBlock,
                item
            )
        } else {
            // item 1681
            addItem(
                parentBlock,
                item
            )
            // item 1662
            if (isSingleComment(item)) {
                // item 1665
                addItem(
                    parentBlock,
                    createEol()
                )
            }
        }
    }
}

function addSpaces(block) {
    var block2, statement2
    // item 1749
    block2 = createBlock2(block.seq)
    // item 17520001
    var _ind1752 = 0;
    var _col1752 = block.statements;
    var _len1752 = _col1752.length;
    while (true) {
        // item 17520002
        if (_ind1752 < _len1752) {
            
        } else {
            break;
        }
        // item 17520004
        var statement = _col1752[_ind1752];
        // item 1754
        statement2 = addSpacesToStatement(
            statement
        )
        // item 1757
        block2.statements.push(statement2)
        // item 1755
        block2.length += statement2.length
        // item 17520003
        _ind1752++;
    }
    // item 1756
    block2.length += (block2.statements.length - 1)
    // item 1750
    return block2
}

function addSpacesToStatement(statement) {
    var item2, result, state
    var _sw17630000_ = 0;
    var _sw18220000_ = 0;
    // item 1758
    result = createStatement()
    // item 1762
    state = "operator"
    // item 17600001
    var _ind1760 = 0;
    var _col1760 = statement.items;
    var _len1760 = _col1760.length;
    while (true) {
        // item 17600002
        if (_ind1760 < _len1760) {
            
        } else {
            break;
        }
        // item 17600004
        var item = _col1760[_ind1760];
        // item 17630000
        _sw17630000_ = item.type;
        // item 17630001
        if (_sw17630000_ === "operator") {
            // item 1780
            item.length = item.text.length
            // item 1777
            if (item.text in module.noSpaces) {
                // item 1787
                addItemWithLength(
                    result,
                    item
                )
                // item 1814
                state = "identifier"
            } else {
                // item 1788
                if (item.text == ":") {
                    // item 1791
                    addItemWithLength(
                        result,
                        item
                    )
                    // item 1794
                    addItemWithLength(
                        result,
                        createSpace()
                    )
                } else {
                    // item 1801
                    if (item.text == ".") {
                        // item 1805
                        addItemWithLength(
                            result,
                            createBreak()
                        )
                        // item 1804
                        addItemWithLength(
                            result,
                            item
                        )
                    } else {
                        // item 1806
                        if ((item.text == "-") && (state == "operator")) {
                            // item 1810
                            addItemWithLength(
                                result,
                                item
                            )
                        } else {
                            // item 1813
                            addItemWithLength(
                                result,
                                createSpace()
                            )
                            // item 1811
                            addItemWithLength(
                                result,
                                item
                            )
                            // item 1812
                            addItemWithLength(
                                result,
                                createSpace()
                            )
                        }
                    }
                }
                // item 1770
                state = item.type
            }
        } else {
            // item 17630002
            if (_sw17630000_ === "keyword") {
                // item 1821
                item.length = item.text.length
                // item 18220000
                _sw18220000_ = item.text;
                // item 18220001
                if ((_sw18220000_ === "else") || (_sw18220000_ === "catch")) {
                    // item 1840
                    addItemWithLength(
                        result,
                        createSpace()
                    )
                    // item 1838
                    addItemWithLength(
                        result,
                        item
                    )
                    // item 1839
                    addItemWithLength(
                        result,
                        createSpace()
                    )
                } else {
                    // item 18220003
                    if ((((_sw18220000_ === "if") || (_sw18220000_ === "try")) || (_sw18220000_ === "async")) || (_sw18220000_ === "await")) {
                        // item 1842
                        addItemWithLength(
                            result,
                            item
                        )
                        // item 1843
                        addItemWithLength(
                            result,
                            createSpace()
                        )
                    } else {
                        // item 1844
                        addItemWithLength(
                            result,
                            item
                        )
                    }
                }
            } else {
                // item 1815
                item2 = computeLength(item)
                // item 1817
                addItemWithLength(
                    result,
                    item2
                )
            }
            // item 1770
            state = item.type
        }
        // item 17600003
        _ind1760++;
    }
    // item 1759
    return result
}

function addToList(newItem, existing) {
    var prev
    // item 400
    prev = existing.prev
    // item 401
    prev.next = newItem
    newItem.prev = prev
    // item 402
    newItem.next = existing
    existing.prev = newItem
}

function advanceOnWhitespace(self, msg) {
    var x, x2
    // item 100
    x = self.x
    // item 95
    if (msg.text == "\t") {
        // item 98
        x2 = getTabPosition(
            self,
            x
        )
    } else {
        // item 99
        x2 = getSpaceWidth(self) + x
    }
    // item 101
    self.x = x2
}

function callEditMethod(name, method, args) {
    // item 1331
    if (module.readonly) {
        // item 1335
        return undefined
    } else {
        // item 1330
        addTrace(name, args)
        // item 1334
        return method.apply(
            undefined,
            args
        )
    }
}

function checkInputText(text) {
    // item 1120
    if (module.readonly) {
        // item 1123
        return "ERR_READONLY"
    } else {
        // item 1112
        if ((text) && (text.length > Config.MAX_TEXT)) {
            // item 1118
            return "ERR_TEXT_TOO_LONG"
        } else {
            // item 1119
            return null
        }
    }
}

function classifyChar(code) {
    // item 295
    if (code == 10) {
        // item 298
        return "eol"
    } else {
        // item 283
        if (isDigit(code)) {
            // item 286
            return "digit"
        } else {
            // item 287
            if (isOperator(code)) {
                // item 290
                return "operator"
            } else {
                // item 291
                if (isWhitespace(code)) {
                    // item 293
                    return "whitespace"
                } else {
                    // item 294
                    return "alpha"
                }
            }
        }
    }
}

function collectLevels(visuals, branch) {
    var getLevel, levelIds, node, visited
    // item 1248
    visited = {}
    visited[branch.node.id] = true
    // item 1249
    scanManhattan(
        visited,
        getDown(branch.node)
    )
    // item 1250
    delete visited[branch.node.id]
    // item 1251
    levelIds = {}
    // item 12530001
    var _ind1253 = 0;
    var _col1253 = visited;
    var _keys1253 = Object.keys(_col1253); 
    var _len1253 = _keys1253.length;
    while (true) {
        // item 12530002
        if (_ind1253 < _len1253) {
            
        } else {
            break;
        }
        // item 12530004
        var nodeId = _keys1253[_ind1253]; var _ = _col1253[nodeId];
        // item 1255
        node = visuals.nodes.get(nodeId)
        levelIds[node.level.id] = true
        // item 12530003
        _ind1253++;
    }
    // item 1252
    getLevel = function(levelId) {
        return visuals.levels.get(levelId)
    }
    // item 1256
    return Object.keys(levelIds).map(
        getLevel
    )
}

function compareByProperty(leftItem, rightItem, getter) {
    var left, right
    // item 1198
    left = getter(leftItem)
    right = getter(rightItem)
    // item 1199
    if (left < right) {
        // item 1202
        return -1
    } else {
        // item 1203
        if (left > right) {
            // item 1207
            return 1
        } else {
            // item 1206
            return 0
        }
    }
}

function computeLength(item) {
    var length, text
    var _sw17260000_ = 0;
    // item 17260000
    _sw17260000_ = item.type;
    // item 17260001
    if (_sw17260000_ === "block") {
        // item 1736
        return addSpaces(item)
    } else {
        // item 17260002
        if (_sw17260000_ === "eol") {
            // item 1735
            length = 1
        } else {
            // item 1734
            text = item.text || ""
            length = text.length
        }
        // item 1738
        item.length = length
        // item 1739
        return item
    }
}

function contains(list, item) {
    var index
    // item 1070
    if (list) {
        // item 1074
        index = list.indexOf(item)
        // item 1076
        if (index == -1) {
            // item 1073
            return false
        } else {
            // item 1075
            return true
        }
    } else {
        // item 1073
        return false
    }
}

function copyToClipboard(type, subgraph) {
    // item 1279
    var fun = module.callbacks.copyToClipboard
    // item 1275
    if (fun) {
        // item 1278
        fun(type, subgraph);
    }
}

function createBlock(seq) {
    // item 1464
    return {
        type : "block",
        statements : [],
        prev : "operator",
        statement : createStatement(),
        length : 0,
        seq : seq,
        seqStart : false
    }
}

function createBlock2(seq) {
    // item 1743
    return {
        type : "block",
        statements : [],
        length : 0,
        seq : seq
    }
}

function createBreak() {
    var token
    // item 1798
    token = createToken(
        "break",
        ""
    )
    // item 1799
    token.length = 0
    // item 1800
    return token
}

function createEol() {
    // item 1923
    return createToken("eol", "")
}

function createParsingState(tokens) {
    var state
    // item 1375
    state = {
        tokens : tokens,
        index : 0,
        current : tokens[0]
    }
    // item 1376
    return state
}

function createRawFlower() {
    // item 1966
    return {
        tokens : [],
        max : MaxChars,
        current : 0
    }
}

function createSpace() {
    var token
    // item 1775
    token = createToken(
        "whitespace",
        " "
    )
    // item 1792
    token.length = token.text.length
    // item 1793
    return token
}

function createStatement() {
    // item 1703
    return {
        type : "statement",
        items : [],
        length : 0
    }
}

function createTab() {
    // item 1901
    return createToken("whitespace", TabText)
}

function createToken(type, text) {
    // item 1479
    return {
        type : type,
        text : text
    }
}

function createTokenCollection() {
    var self
    // item 782
    self = {
        tokens : []
    }
    // item 784
    self.onToken = function(token) {
    	addNoWs(self, token)
    }
    // item 785
    self.eol = function() {
    
    }
    // item 783
    return self
}

function createTreeLexer() {
    var handlers, result
    // item 418
    handlers = {
        normal : handleNormal,
        choose : handleChoose,
        single : handleSingle,
        quote : handleQuote,
        backtick : handleBacktick,
        one : handleOne,
        multi : handleMulti
    }
    // item 419
    result = {
        handlers : handlers,
        top : "",
        tt : "",
        escaping : false,
        part : 0,
        chars : []
    }
    // item 420
    result.onChar = function(op, cat, code) {
        onChar(result, op, cat, code)
    }
    // item 422
    setTop(result, "normal")
    // item 421
    return result
}

function editMethod(name, method) {
    var wrapped
    // item 1323
    wrapped = function() {
    	var args = Array.from(arguments)
    	return callEditMethod(name, method, args)
    }
    // item 1324
    module[name] = wrapped
}

function endToken(self) {
    // item 869
    self.token.text = Utils.arrayToString(
        self.chars
    )
    // item 870
    self.next.onToken(
        self.token
    )
}

function finishToken(self) {
    // item 662
    if (self.chars.length == 0) {
        
    } else {
        // item 661
        sendToken(
            self,
            self.tt,
            self.chars
        )
    }
}

function firstChar(text) {
    // item 271
    return text.charCodeAt(0)
}

function flowSourceCode(render, text, source) {
    var flower, lexer, machineList, machines, ob
    // item 9
    lexer = createTreeLexer()
    // item 11
    flower = new SourceFlower()
    flower.maxLength = MaxLineLength
    flower.init(render)
    flower.source = source
    // item 12
    ob = new OperBuilder()
    ob.tokens = []
    ob.finish = function() {mergeOps(ob)}
    // item 6
    machineList = [
    	lexer,
    	ob,
    	flower
    ]
    // item 7
    machines = new MachineStack(
        machineList
    )
    // item 8
    toTokens2(
        machines,
        text
    )
    // item 10
    return {
        tokens : flower.tokens,
        height : getFlowerHeight(flower),
        width : getFlowerWidth(flower)
    }
}

function getClipboard(type) {
    // item 1298
    if (getClipboardType() == type) {
        // item 1294
        return getClipboardCore()
    } else {
        // item 1295
        return null;
    }
}

function getClipboardCore(type) {
    var fun
    // item 1309
    fun = module.callbacks.getClipboard
    // item 1302
    if (fun) {
        // item 1305
        return fun();
    } else {
        // item 1306
        return null;
    }
}

function getClipboardType() {
    var fun
    // item 1288
    fun = module.callbacks.getClipboardType
    // item 1283
    if (fun) {
        // item 1286
        return fun();
    } else {
        // item 1287
        return null;
    }
}

function getCreateList(dict, key) {
    var list
    // item 1164
    list = dict[key]
    // item 1166
    if (list) {
        
    } else {
        // item 1169
        list = []
        dict[key] = list
    }
    // item 1165
    return list
}

function getCreateObj(dict, key) {
    var obj
    // item 1348
    obj = dict[key]
    // item 1350
    if (obj) {
        
    } else {
        // item 1353
        obj = {}
        dict[key] = obj
    }
    // item 1349
    return obj
}

function getFlowerHeight(self) {
    // item 182
    return self.height
}

function getFlowerWidth(self) {
    var width
    // item 188
    width = self.x
    // item 1900001
    var _ind190 = 0;
    var _col190 = self.widths;
    var _len190 = _col190.length;
    while (true) {
        // item 1900002
        if (_ind190 < _len190) {
            
        } else {
            break;
        }
        // item 1900004
        var lineWidth = _col190[_ind190];
        // item 192
        width = Math.max(width, lineWidth)
        // item 1900003
        _ind190++;
    }
    // item 189
    return width
}

function getSpaceWidth(self) {
    // item 86
    if (self.spaceWidth) {
        
    } else {
        // item 85
        self.spaceWidth = render.measureTextWidth(
            "n"
        )
    }
    // item 89
    return self.spaceWidth
}

function getTabPosition(self, x) {
    var currentTabCount, spaceWidth, tabWidth, targetTabCount
    // item 79
    spaceWidth = getSpaceWidth(self)
    // item 76
    tabWidth = spaceWidth * SpacesInTab
    // item 75
    currentTabCount = Math.floor(x / tabWidth)
    // item 77
    targetTabCount = currentTabCount + 1
    // item 78
    return targetTabCount * tabWidth
}

function getTokenColor(token, source) {
    var type
    // item 60
    if (source) {
        // item 64
        if ((token.type == "identifier") && (token.text in module.keywords)) {
            // item 69
            type = "keyword"
        } else {
            // item 68
            type = token.type
        }
        // item 59
        return Theme.get(type)
    } else {
        // item 63
        return Theme.get("identifier")
    }
}

function handleBacktick(self, op, cat, code) {
    // item 5940001
    if (op === "char") {
        // item 587
        if (self.escaping) {
            // item 589
            handleEscape(
                self,
                code
            )
            // item 590
            self.escaping = false
        } else {
            // item 5780001
            if (code === module.BACKTICK) {
                // item 585
                addChar(self, code)
                // item 591
                sendToken(
                    self,
                    "string",
                    self.chars
                )
                // item 586
                setTop(self, "normal")
            } else {
                // item 5780002
                if (code === module.BACK) {
                    // item 592
                    self.escaping = true
                } else {
                    // item 593
                    addChar(self, code)
                }
            }
        }
    } else {
        // item 5940002
        if (op === "eol") {
            // item 601
            sendToken(
                self,
                "string",
                self.chars
            )
        } else {
            // item 5940003
            if (op === "finish") {
                
            } else {
                // item 5940004
                throw "Unexpected switch value: " + op;
            }
            // item 602
            sendToken(
                self,
                "error",
                self.chars
            )
        }
    }
}

function handleChoose(self, op, cat, code) {
    // item 516
    if (op == "char") {
        // item 5200001
        if (code === module.SLASH) {
            // item 529
            addChar(self, code)
            // item 530
            setTop(self, "one")
        } else {
            // item 5200002
            if (code === module.STAR) {
                // item 531
                addChar(self, code)
                // item 527
                setTop(self, "multi")
            } else {
                // item 532
                sendToken(
                    self,
                    "operator",
                    self.chars
                )
                // item 528
                setTop(self, "normal")
                // item 533
                self.onChar(
                    op,
                    cat,
                    code
                )
            }
        }
    } else {
        // item 534
        sendToken(
            self,
            "operator",
            self.chars
        )
        // item 519
        setTop(self, "normal")
    }
}

function handleEscape(self, code) {
    // item 670
    addChar(self, module.BACK)
    addChar(self, code)
}

function handleMulti(self, op, cat, code) {
    // item 6120001
    if (op === "char") {
        // item 621
        addChar(self, code)
        // item 609
        if (self.escaping) {
            // item 622
            if (code == module.SLASH) {
                // item 624
                sendToken(
                    self,
                    "comment",
                    self.chars
                )
                // item 625
                setTop(self, "normal")
            } else {
                // item 611
                self.escaping = false
            }
        } else {
            // item 626
            if (code == module.STAR) {
                // item 628
                self.escaping = true
            }
        }
    } else {
        // item 6120002
        if (op === "eol") {
            // item 619
            sendToken(
                self,
                "comment",
                self.chars
            )
        } else {
            // item 6120003
            if (op === "finish") {
                
            } else {
                // item 6120004
                throw "Unexpected switch value: " + op;
            }
            // item 620
            sendToken(
                self,
                "error",
                self.chars
            )
        }
    }
}

function handleNormal(self, op, cat, code) {
    // item 455
    if (op == "char") {
        // item 458
        if (cat == "operator") {
            // item 460
            if (((self.tt == "number") && (self.part == 1)) && (code == module.DOT)) {
                // item 464
                addChar(self, code)
                // item 465
                self.part = 2
            } else {
                // item 466
                finishToken(self)
                // item 4670001
                if (code === module.SINGLE_QUOTE) {
                    // item 477
                    setTop(self, "single")
                    // item 482
                    addChar(self, code)
                } else {
                    // item 4670002
                    if (code === module.DOUBLE_QUOTE) {
                        // item 478
                        setTop(self, "quote")
                        // item 482
                        addChar(self, code)
                    } else {
                        // item 4670003
                        if (code === module.BACKTICK) {
                            // item 510
                            setTop(self, "backtick")
                            // item 482
                            addChar(self, code)
                        } else {
                            // item 4670004
                            if (code === module.SLASH) {
                                // item 479
                                setTop(self, "choose")
                                // item 482
                                addChar(self, code)
                            } else {
                                // item 480
                                sendToken(
                                    self,
                                    "operator",
                                    [code]
                                )
                            }
                        }
                    }
                }
            }
        } else {
            // item 483
            if (self.tt == "idle") {
                // item 4850001
                if (cat === "digit") {
                    // item 492
                    addChar(self, code)
                    // item 494
                    setTt(self, "number")
                } else {
                    // item 4850002
                    if (cat === "alpha") {
                        // item 493
                        addChar(self, code)
                        // item 495
                        setTt(self, "identifier")
                    } else {
                        // item 4850003
                        if (cat === "whitespace") {
                            
                        } else {
                            // item 4850004
                            throw "Unexpected switch value: " + cat;
                        }
                        // item 496
                        sendToken(
                            self,
                            "whitespace",
                            [code]
                        )
                    }
                }
            } else {
                // item 4970001
                if ((cat === "digit") || (cat === "alpha")) {
                    // item 504
                    addChar(self, code)
                } else {
                    // item 4970003
                    if (cat === "whitespace") {
                        
                    } else {
                        // item 4970004
                        throw "Unexpected switch value: " + cat;
                    }
                    // item 507
                    finishToken(self)
                    // item 506
                    sendToken(
                        self,
                        "whitespace",
                        [code]
                    )
                }
            }
        }
    } else {
        // item 481
        finishToken(self)
    }
}

function handleOne(self, op, cat, code) {
    // item 639
    if (op == "char") {
        // item 636
        addChar(self, code)
    } else {
        // item 637
        sendToken(
            self,
            "comment",
            self.chars
        )
        // item 638
        setTop(self, "normal")
    }
}

function handleQuote(self, op, cat, code, quote) {
    // item 571
    handleString(
        self,
        op,
        cat,
        code,
        module.DOUBLE_QUOTE
    )
}

function handleSingle(self, op, cat, code, quote) {
    // item 540
    handleString(
        self,
        op,
        cat,
        code,
        module.SINGLE_QUOTE
    )
}

function handleString(self, op, cat, code, quote) {
    // item 546
    if (op == "char") {
        // item 559
        if (self.escaping) {
            // item 561
            handleEscape(
                self,
                code
            )
            // item 562
            self.escaping = false
        } else {
            // item 5490001
            if (code === quote) {
                // item 556
                addChar(self, code)
                // item 563
                sendToken(
                    self,
                    "string",
                    self.chars
                )
                // item 557
                setTop(self, "normal")
            } else {
                // item 5490002
                if (code === module.BACK) {
                    // item 564
                    self.escaping = true
                } else {
                    // item 565
                    addChar(self, code)
                }
            }
        }
    } else {
        // item 558
        sendToken(
            self,
            "error",
            self.chars
        )
    }
}

function hexByteToString(value) {
    // item 1064
    return ("00" + value.toString(16)).substr(-2)
}

function isClosing(state, finish) {
    // item 1613
    if ((state.current.type == "operator") && (state.current.text == finish)) {
        // item 1617
        return true
    } else {
        // item 1618
        return false
    }
}

function isDigit(c) {
    // item 260
    if ((c >= module.ZERO) && (c <= module.NINE)) {
        // item 264
        return true
    } else {
        // item 265
        return false
    }
}

function isEnd(state) {
    // item 1400
    return state.current.type == "end"
}

function isNewStart(prev, item) {
    // item 1447
    if (item.type == "operator") {
        // item 1458
        return false
    } else {
        // item 1866
        if (((((noBreakKeyword(item)) || (prev == "operator")) || (prev == "keyword")) || (item.text == "async")) || (item.text == "await")) {
            // item 1445
            return false
        } else {
            // item 1446
            return true
        }
    }
}

function isOperator(c) {
    // item 219
    if (module.opChars[c]) {
        // item 222
        return true
    } else {
        // item 218
        return false
    }
}

function isSeparator(item) {
    // item 1524
    if ((item.text == ",") || (item.text == ";")) {
        // item 1530
        return true
    } else {
        // item 1531
        return false
    }
}

function isSeqStart(item) {
    var _sw18770000_ = 0;
    // item 18770000
    _sw18770000_ = item.type;
    // item 18770001
    if (_sw18770000_ === "operator") {
        // item 1887
        if ((item.text == ")") || (item.text == "=>")) {
            // item 1886
            return true
        } else {
            // item 1891
            return false
        }
    } else {
        // item 18770002
        if (_sw18770000_ === "keyword") {
            // item 1886
            return true
        } else {
            // item 1885
            return false
        }
    }
}

function isSingleComment(item) {
    // item 1480
    if ((item.type == "comment") && (item.text.substring(0, 2) == "//")) {
        // item 1483
        return true
    } else {
        // item 1484
        return false
    }
}

function isSubset(larger, smaller) {
    // item 1153
    if (larger) {
        // item 11510001
        var _ind1151 = 0;
        var _col1151 = smaller;
        var _keys1151 = Object.keys(_col1151); 
        var _len1151 = _keys1151.length;
        while (true) {
            // item 11510002
            if (_ind1151 < _len1151) {
                
            } else {
                // item 1156
                return true
            }
            // item 11510004
            var smallKey = _keys1151[_ind1151]; var _ = _col1151[smallKey];
            // item 1158
            if (smallKey in larger) {
                
            } else {
                // item 1157
                return false
            }
            // item 11510003
            _ind1151++;
        }
    } else {
        // item 1157
        return false
    }
}

function isWhitespace(c) {
    // item 247
    if (((((c >= 9) && (c <= 13)) || (c == 32)) || (c == 133)) || (c == 160)) {
        // item 245
        return true
    } else {
        // item 246
        return false
    }
}

function keyToString(table, row) {
    var result
    // item 952
    result = ""
    // item 9500001
    var _ind950 = 0;
    var _col950 = table.keys;
    var _len950 = _col950.length;
    while (true) {
        // item 9500002
        if (_ind950 < _len950) {
            
        } else {
            break;
        }
        // item 9500004
        var part = _col950[_ind950];
        // item 953
        result += "|" + row[part]
        // item 9500003
        _ind950++;
    }
    // item 954
    return result
}

function lastElement(array) {
    // item 1214
    if (array.length == 0) {
        // item 1217
        return null
    } else {
        // item 1213
        return array[array.length - 1]
    }
}

function lexInit() {
    var addToKeywords, keywords
    // item 231
    module.opChars = []
    // item 2270001
    var i = 0;
    while (true) {
        // item 2270002
        if (i < 256) {
            
        } else {
            break;
        }
        // item 229
        module.opChars.push(false)
        // item 2270003
        i++;
    }
    // item 226
    saveOpChar("!")
    saveOpChar(";")
    saveOpChar("?")
    saveOpChar("=")
    saveOpChar("<")
    saveOpChar(">")
    saveOpChar("-")
    saveOpChar("+")
    saveOpChar("/")
    saveOpChar("\\")
    saveOpChar("*")
    saveOpChar("%")
    saveOpChar("(")
    saveOpChar(")")
    saveOpChar("(")
    saveOpChar(")")
    saveOpChar("{")
    saveOpChar("}")
    saveOpChar("[")
    saveOpChar("]")
    saveOpChar(":")
    saveOpChar(".")
    saveOpChar("#")
    saveOpChar(",")
    saveOpChar("^")
    saveOpChar("|")
    saveOpChar("&")
    saveOpChar("'")
    saveOpChar("\"")
    saveOpChar("`")
    // item 230
    module.ZERO = firstChar("0")
    module.NINE = firstChar("9")
    module.UNDER = firstChar("_")
    module.DOT = firstChar(".")
    module.BACK = firstChar("\\")
    module.ESCAPE_X = firstChar("x")
    module.ESCAPE_R = firstChar("r")
    module.ESCAPE_T = firstChar("t")
    module.ESCAPE_N = firstChar("n")
    module.DOUBLE_QUOTE = firstChar("\"")
    module.SINGLE_QUOTE = firstChar("\'")
    module.EQUALS = firstChar("=")
    module.SLASH = firstChar("/")
    module.STAR = firstChar("*")
    module.BACKTICK = firstChar("`")
    module.R = firstChar("r")
    module.N = firstChar("n")
    module.T = firstChar("t")
    // item 232
    module.longOps = {}
    addLongOp("==")
    addLongOp("===")
    addLongOp("...")
    addLongOp("!==")
    addLongOp(">>>")
    addLongOp("!=")
    addLongOp("<=")
    addLongOp(">=")
    addLongOp("&&")
    addLongOp("||")
    addLongOp("+=")
    addLongOp("-=")
    addLongOp("/=")
    addLongOp("*=")
    addLongOp("|=")
    addLongOp("^=")
    addLongOp("&=")
    addLongOp("=>")
    // item 233
    keywords = [
    "abstract", "arguments", "boolean", "break", "byte", "case", "catch",
    "char", "class", "const", "continue", "debugger", "default", "delete",
    "do", "double", "else", "enum", "eval", "export", "extends", "false",
    "final", "finally", "float", "for", "function", "goto", "if",
    "implements", "import", "in", "instanceof", "int", "interface",
    "let", "long", "native", "new", "null", "package", "private", "protected",
    "public", "return", "short", "static", "super", "switch", "synchronized",
    "this", "throw", "throws", "transient", "true", "try", "typeof", "var",
    "void", "volatile", "while", "yield", "async", "await"]
    // item 234
    module.keywords = {}
    // item 235
    addToKeywords = function(keyword) {
        module.keywords[keyword] = true
    }
    // item 236
    keywords.forEach(
        addToKeywords
    )
    // item 1563
    module.keyOps = {}
    module.keyOps["in"] = true
    module.keyOps["instanceof"] = true
    module.keyOps["typeof"] = true
    // item 1776
    module.noSpaces = {}
    module.noSpaces[";"] = true
    module.noSpaces[","] = true
    module.noSpaces[")"] = true
    module.noSpaces["]"] = true
    module.noSpaces["}"] = true
    module.noSpaces["("] = true
    module.noSpaces["["] = true
    module.noSpaces["{"] = true
}

function lexSource(text) {
    var lexer, machineList, machines, ob, tcollection
    // item 774
    lexer = createTreeLexer()
    // item 776
    tcollection = createTokenCollection()
    // item 777
    ob = new OperBuilder()
    ob.tokens = []
    ob.finish = function() {mergeOps(ob)}
    // item 771
    machineList = [
    	lexer,
    	ob,
    	tcollection
    ]
    // item 772
    machines = new MachineStack(
        machineList
    )
    // item 773
    toTokens2(
        machines,
        text
    )
    // item 1359
    tcollection.tokens.push(
        {type:"end", text:""}
    )
    // item 775
    return tcollection.tokens
}

function longOp1(text) {
    // item 358
    return text in module.longOps
}

function longOp2(text1, text2) {
    var part1
    // item 365
    part1 = module.longOps[text1]
    // item 366
    if (part1) {
        // item 364
        return text2 in part1
    } else {
        // item 369
        return false
    }
}

function longOp3(text1, text2, text3) {
    var part1, part2
    // item 376
    part1 = module.longOps[text1]
    // item 377
    if (part1) {
        // item 381
        part2 = part1[text2]
        // item 382
        if (part2) {
            // item 375
            return text3 in part2
        } else {
            // item 380
            return false
        }
    } else {
        // item 380
        return false
    }
}

function makeRandomColor() {
    var b, g, r, rb, rg, rs
    // item 1050
    r = random(200, 256)
    g = random(200, 256)
    b = random(200, 256)
    // item 1051
    rs = hexByteToString(r)
    rg = hexByteToString(g)
    rb = hexByteToString(b)
    // item 1052
    return "#" + rs + rg + rb
}

function merge(from, to) {
    // item 1175
    if (from) {
        // item 11780001
        var _ind1178 = 0;
        var _col1178 = from;
        var _keys1178 = Object.keys(_col1178); 
        var _len1178 = _keys1178.length;
        while (true) {
            // item 11780002
            if (_ind1178 < _len1178) {
                
            } else {
                break;
            }
            // item 11780004
            var key = _keys1178[_ind1178]; var value = _col1178[key];
            // item 1180
            to[key] = value
            // item 11780003
            _ind1178++;
        }
    }
}

function mergeOps(self) {
    var text, token
    var _sw7420000_ = 0;
    // item 7420000
    _sw7420000_ = self.tokens.length;
    // item 7420001
    if (_sw7420000_ === 0) {
        
    } else {
        // item 7420002
        if (_sw7420000_ === 1) {
            // item 752
            self.next.onToken(
                self.tokens[0]
            )
        } else {
            // item 7420003
            if (_sw7420000_ === 2) {
                // item 757
                text = self.tokens[0].text +
                	self.tokens[1].text
            } else {
                // item 7420004
                if (_sw7420000_ === 3) {
                    
                } else {
                    // item 7420005
                    throw "Unexpected switch value: " + _sw7420000_;
                }
                // item 755
                text = self.tokens[0].text +
                	self.tokens[1].text +
                	self.tokens[2].text
            }
            // item 758
            token = new Token("operator")
            token.text = text
            // item 759
            self.next.onToken(token)
        }
        // item 754
        self.tokens = []
    }
}

function nextSymbol(state) {
    // item 1382
    state.index++
    state.current = state.tokens[state.index]
}

function noBreakKeyword(item) {
    // item 1852
    if (item.type == "keyword") {
        // item 1856
        if (((((item.text == "async") || (item.text == "await")) || (item.text == "function")) || (item.text == "else")) || (item.text == "catch")) {
            // item 1864
            return true
        } else {
            // item 1865
            return false
        }
    } else {
        // item 1855
        return false
    }
}

function onChar(self, op, cat, code) {
    var handler
    // item 441
    handler = self.handlers[self.top]
    // item 442
    handler(self, op, cat, code)
    // item 443
    if (op == "eol") {
        // item 446
        self.next.eol()
    } else {
        // item 447
        if (op == "finish") {
            // item 449
            self.next.finish()
        }
    }
}

function placeToken(self, token) {
    var token2, width, x2
    // item 108
    token.color = getTokenColor(
        token,
        self.source
    )
    // item 107
    width = self.render.measureTextWidth(
        token.text
    )
    // item 109
    x2 = self.x + width
    // item 110
    if (x2 > self.maxLength) {
        // item 114
        if (self.x == 0) {
            // item 118
            if (token.text.length == 1) {
                // item 113
                placeTokenCore(
                    self,
                    token,
                    width
                )
            } else {
                // item 121
                token2 = splitToken(
                    self,
                    token
                )
                // item 122
                placeToken(
                    self,
                    token2
                )
            }
        } else {
            // item 117
            addLine(self)
            // item 116
            if (width > self.maxLength) {
                // item 118
                if (token.text.length == 1) {
                    // item 113
                    placeTokenCore(
                        self,
                        token,
                        width
                    )
                } else {
                    // item 121
                    token2 = splitToken(
                        self,
                        token
                    )
                    // item 122
                    placeToken(
                        self,
                        token2
                    )
                }
            } else {
                // item 113
                placeTokenCore(
                    self,
                    token,
                    width
                )
            }
        }
    } else {
        // item 113
        placeTokenCore(
            self,
            token,
            width
        )
    }
}

function placeTokenCore(self, token, width) {
    // item 135
    token.x = self.x
    token.y = self.y
    // item 136
    self.x += width
    self.width = self.x
    // item 137
    self.tokens.push(token)
}

function prepend(item, array) {
    var copy
    // item 1315
    copy = array.slice()
    // item 1316
    copy.unshift(item)
    // item 1317
    return copy
}

function prettify(tokens) {
    var block2, rawFlower, root, rootBlock, state
    // item 1699
    root = createBlock()
    // item 1388
    state = createParsingState(
        tokens
    )
    // item 1389
    readBlock(state, root, null, true)
    // item 1708
    rootBlock = root.statement.items[0]
    // item 1711
    if (rootBlock) {
        // item 1715
        block2 = addSpaces(rootBlock)
        // item 1993
        rawFlower = createRawFlower()
        // item 1994
        printBlock(
            block2,
            0,
            rawFlower
        )
        // item 1995
        return rawFlower.tokens
    } else {
        // item 1714
        return []
    }
}

function printBlock(block, depth, output) {
    var available, first
    // item 1908
    if (block.seq) {
        // item 19140001
        var _ind1914 = 0;
        var _col1914 = block.statements;
        var _len1914 = _col1914.length;
        while (true) {
            // item 19140002
            if (_ind1914 < _len1914) {
                
            } else {
                break;
            }
            // item 19140004
            var statement = _col1914[_ind1914];
            // item 1917
            startIndented(
                output,
                depth + 1
            )
            // item 1916
            printStatement(
            	statement,
            	depth + 1,
            	output
            )
            // item 19140003
            _ind1914++;
        }
        // item 1941
        startIndented(
            output,
            depth
        )
    } else {
        // item 1907
        available = output.max - output.current
        // item 1911
        if (block.length > available) {
            // item 19140001
            var _ind1914 = 0;
            var _col1914 = block.statements;
            var _len1914 = _col1914.length;
            while (true) {
                // item 19140002
                if (_ind1914 < _len1914) {
                    
                } else {
                    break;
                }
                // item 19140004
                var statement = _col1914[_ind1914];
                // item 1917
                startIndented(
                    output,
                    depth + 1
                )
                // item 1916
                printStatement(
                	statement,
                	depth + 1,
                	output
                )
                // item 19140003
                _ind1914++;
            }
            // item 1941
            startIndented(
                output,
                depth
            )
        } else {
            // item 1942
            first = true
            // item 19120001
            var _ind1912 = 0;
            var _col1912 = block.statements;
            var _len1912 = _col1912.length;
            while (true) {
                // item 19120002
                if (_ind1912 < _len1912) {
                    
                } else {
                    break;
                }
                // item 19120004
                var statement = _col1912[_ind1912];
                // item 1943
                if (first) {
                    // item 1946
                    first = false
                } else {
                    // item 1947
                    printToken(
                        output,
                        createSpace()
                    )
                }
                // item 1948
                printStatement(
                	statement,
                	depth,
                	output
                )
                // item 19120003
                _ind1912++;
            }
        }
    }
}

function printStatement(statement, depth, output) {
    var available
    // item 19540001
    var _ind1954 = 0;
    var _col1954 = statement.items;
    var _len1954 = _col1954.length;
    while (true) {
        // item 19540002
        if (_ind1954 < _len1954) {
            
        } else {
            break;
        }
        // item 19540004
        var item = _col1954[_ind1954];
        // item 1956
        if (item.type == "block") {
            // item 1959
            printBlock(
                item,
                depth,
                output
            )
        } else {
            // item 1981
            if (item.type == "eol") {
                // item 1983
                startIndented(
                    output,
                    depth
                )
            } else {
                // item 1960
                available = output.max - output.current
                // item 1961
                if ((item.length > available) && ((item.type == "whitespace") || (item.type == "break"))) {
                    // item 1983
                    startIndented(
                        output,
                        depth
                    )
                } else {
                    // item 1992
                    printToken(
                        output,
                        item
                    )
                }
            }
        }
        // item 19540003
        _ind1954++;
    }
}

function printToken(output, token) {
    // item 1985
    if (token.type == "break") {
        
    } else {
        // item 1939
        output.tokens.push(token)
        // item 1940
        output.current += token.text.length
    }
}

function printTokens(tokens) {
    var chunks
    // item 1972
    chunks = []
    // item 19730001
    var _ind1973 = 0;
    var _col1973 = tokens;
    var _len1973 = _col1973.length;
    while (true) {
        // item 19730002
        if (_ind1973 < _len1973) {
            
        } else {
            break;
        }
        // item 19730004
        var token = _col1973[_ind1973];
        // item 1975
        if (token.type == "eol") {
            // item 1978
            chunks.push("\n")
        } else {
            // item 1979
            chunks.push(token.text)
        }
        // item 19730003
        _ind1973++;
    }
    // item 1980
    return chunks.join("")
}

function random(min, max) {
    // item 1058
    return Math.random() * (max - min) + min
}

function readBlock(state, parentBlock, finish, seq) {
    var result
    // item 1360
    result = createBlock(seq)
    while (true) {
        // item 1500
        if (readItem(state, result, finish)) {
            
        } else {
            break;
        }
    }
    // item 1707
    startStatement(result)
    result.statement = null
    // item 1507
    if (result.statements.length == 0) {
        
    } else {
        // item 1361
        addItem(
            parentBlock,
            result
        )
    }
}

function readItem(state, parentBlock, finish) {
    var current, currentFinish, seq
    var _sw16190000_ = 0;
    // item 1630
    if ((isEnd(state)) || (isClosing(state, finish))) {
        // item 1549
        return false
    } else {
        // item 1636
        current = state.current
        // item 1637
        nextSymbol(state)
        // item 16190000
        _sw16190000_ = current.text;
        // item 16190001
        if (_sw16190000_ === "(") {
            // item 1639
            currentFinish = ")"
            seq = false
            // item 1652
            addItem(
                parentBlock,
                current
            )
            // item 1638
            readBlock(
                state,
                parentBlock,
                currentFinish,
                seq
            )
            // item 1646
            if (isEnd(state)) {
                // item 1648
                return false
            } else {
                // item 1650
                addItem(
                    parentBlock,
                    state.current
                )
                // item 1710
                parentBlock.prev = "block"
                // item 1651
                nextSymbol(state)
                // item 1649
                return true
            }
        } else {
            // item 16190002
            if (_sw16190000_ === "{") {
                // item 1640
                currentFinish = "}"
                seq = parentBlock.seqStart
                // item 1652
                addItem(
                    parentBlock,
                    current
                )
                // item 1638
                readBlock(
                    state,
                    parentBlock,
                    currentFinish,
                    seq
                )
                // item 1646
                if (isEnd(state)) {
                    // item 1648
                    return false
                } else {
                    // item 1650
                    addItem(
                        parentBlock,
                        state.current
                    )
                    // item 1710
                    parentBlock.prev = "block"
                    // item 1651
                    nextSymbol(state)
                    // item 1649
                    return true
                }
            } else {
                // item 16190003
                if (_sw16190000_ === "[") {
                    // item 1641
                    currentFinish = "]"
                    seq = false
                    // item 1652
                    addItem(
                        parentBlock,
                        current
                    )
                    // item 1638
                    readBlock(
                        state,
                        parentBlock,
                        currentFinish,
                        seq
                    )
                    // item 1646
                    if (isEnd(state)) {
                        // item 1648
                        return false
                    } else {
                        // item 1650
                        addItem(
                            parentBlock,
                            state.current
                        )
                        // item 1710
                        parentBlock.prev = "block"
                        // item 1651
                        nextSymbol(state)
                        // item 1649
                        return true
                    }
                } else {
                    // item 1683
                    addSingleItem(
                        parentBlock,
                        current
                    )
                    // item 1684
                    return true
                }
            }
        }
    }
}

function remove(array, item) {
    var index
    // item 1015
    index = array.indexOf(item)
    // item 1016
    if (index == -1) {
        
    } else {
        // item 1019
        array.splice(index, 1)
    }
}

function removeFromList(item) {
    var next, prev
    // item 408
    prev = item.prev
    next = item.next
    // item 409
    prev.next = next
    // item 410
    if (next) {
        // item 413
        next.prev = prev
    }
    // item 414
    item.prev = null
    item.next = null
}

function replaceAll(text, oldText, newText) {
    var parts
    // item 1082
    parts = text.split(oldText)
    // item 1083
    return parts.join(newText)
}

function requestSourceFlow(render, text) {
    // item 198
    if (module.language == "LANG_HUMAN") {
        // item 201
        return flowText(
            render,
            text,
            Config.DEF_ICON_WIDTH
        )
    } else {
        // item 202
        return flowSourceCode(
            render,
            text,
            true
        )
    }
}

function requestTextFlow(render, text) {
    // item 208
    if (module.language == "LANG_HUMAN") {
        // item 211
        return flowText(
            render,
            text,
            Config.DEF_ICON_WIDTH
        )
    } else {
        // item 212
        return flowSourceCode(
            render,
            text,
            false
        )
    }
}

function roMethod(name, method) {
    var wrapped
    // item 1341
    wrapped = function() {
    	var args = Array.from(arguments)
    	addTrace(name, args)
    	return method.apply(undefined, args)
    }
    // item 1342
    module[name] = wrapped
}

function saveOpChar(text) {
    var code
    // item 277
    code = firstChar(text)
    module.opChars[code] = true
}

function scanManhattan(visited, node) {
    // item 1224
    if (node.id in visited) {
        
    } else {
        // item 1223
        visited[node.id] = true
        // item 1227
        if (node.left) {
            // item 1230
            scanManhattan(
                visited,
                getLeft(node)
            )
        }
        // item 1231
        if (node.up) {
            // item 1234
            scanManhattan(
                visited,
                getUp(node)
            )
        }
        // item 1235
        if (node.right) {
            // item 1238
            scanManhattan(
                visited,
                getRight(node)
            )
        }
        // item 1239
        if (node.down) {
            // item 1242
            scanManhattan(
                visited,
                getDown(node)
            )
        }
    }
}

function sendToken(self, type, chars) {
    var text, token
    // item 651
    text = Utils.arrayToString(
        chars
    )
    // item 653
    token = {
        type : type,
        text : text
    }
    // item 652
    self.next.onToken(
        token
    )
    // item 655
    self.chars = []
    // item 654
    setTt(self, "idle")
}

function setTop(lexer, top) {
    // item 428
    lexer.top = top
    lexer.escaping = false
    // item 429
    setTt(lexer, "idle")
}

function setTt(lexer, tt) {
    // item 435
    lexer.tt = tt
    lexer.part = 1
}

function showInputBox(title, oldText, callback, x, y, validate) {
    // item 1093
    var fun = module.callbacks.showInputBox
    // item 1089
    if (fun) {
        // item 1092
        fun(title, oldText, callback, x, y, validate)
    }
}

function sort(array, property) {
    var comparer, getter
    // item 1186
    if (typeof property == "string") {
        // item 1189
        getter = function(item) {
            return item[property]
        }
    } else {
        // item 1190
        getter = property
    }
    // item 1191
    comparer = function(left, right) {
        return compareByProperty(left, right, getter)
    }
    // item 1192
    array.sort(comparer)
}

function splitToken(self, token) {
    var i, text, text2, token1, token2, width
    // item 143
    i = token.text.length - 1
    while (true) {
        // item 162
        text = token.text.substring(
            0,
            i
        )
        // item 161
        width = self.render.measureTextWidth(
            text
        )
        // item 147
        if ((i > 1) && (width > self.maxLength)) {
            
        } else {
            break;
        }
        // item 146
        i--
    }
    // item 155
    text2 = token.text.substring(
        i,
        token.text.length
    )
    // item 156
    token1 = new Token(token.type)
    token1.text = text
    token1.color = token.color
    // item 157
    token2 = new Token(token.type)
    token2.text = text2
    token2.color = token.color
    // item 163
    placeTokenCore(
        self,
        token1,
        width
    )
    // item 166
    return token2
}

function startIndented(output, depth) {
    var i
    // item 1929
    printToken(
        output,
        createEol()
    )
    // item 1933
    output.current = 0
    // item 19300001
    i = 0;
    while (true) {
        // item 19300002
        if (i < depth) {
            
        } else {
            break;
        }
        // item 1932
        printToken(
            output,
            createTab()
        )
        // item 19300003
        i++;
    }
}

function startStatement(block) {
    var old
    // item 1696
    old = block.statement
    // item 1704
    if (old.items.length == 0) {
        
    } else {
        // item 1697
        block.statements.push(old)
    }
    // item 1698
    block.statement = createStatement()
    block.prev = "operator"
}

function startToken(self, type, c) {
    // item 856
    self.token = new Token(
        type
    )
    // item 857
    self.chars = [c]
}

function subtract(from, what) {
    var result
    // item 1268
    result = {}
    // item 12620001
    var _ind1262 = 0;
    var _col1262 = from;
    var _keys1262 = Object.keys(_col1262); 
    var _len1262 = _keys1262.length;
    while (true) {
        // item 12620002
        if (_ind1262 < _len1262) {
            
        } else {
            break;
        }
        // item 12620004
        var key = _keys1262[_ind1262]; var value = _col1262[key];
        // item 1265
        if (key in what) {
            
        } else {
            // item 1264
            result[key] = value
        }
        // item 12620003
        _ind1262++;
    }
    // item 1269
    return result
}

function toTokens(machines, text) {
    var c, category, i, length, machine
    // item 306
    length = text.length
    // item 3040001
    i = 0;
    while (true) {
        // item 3040002
        if (i < length) {
            
        } else {
            break;
        }
        // item 305
        c = text.charCodeAt(i)
        // item 312
        if (c == 13) {
            
        } else {
            // item 308
            category = classifyChar(c)
            // item 309
            machine = machines.top()
            // item 310
            callMethod(
                machine,
                category,
                [c]
            )
        }
        // item 3040003
        i++;
    }
    // item 311
    machine = machines.top()
    machine.finish()
}

function toTokens2(machines, text) {
    var c, category, i, length, machine
    // item 340
    length = text.length
    // item 3380001
    i = 0;
    while (true) {
        // item 3380002
        if (i < length) {
            
        } else {
            break;
        }
        // item 339
        c = text.charCodeAt(i)
        // item 345
        if (c == 13) {
            
        } else {
            // item 351
            if (c == 10) {
                // item 348
                machine.onChar("eol")
            } else {
                // item 342
                category = classifyChar(c)
                // item 343
                machine = machines.top()
                // item 350
                machine.onChar(
                    "char",
                    category,
                    c
                )
            }
        }
        // item 3380003
        i++;
    }
    // item 344
    machine = machines.top()
    // item 349
    machine.onChar("finish")
}

function twoTokens(token, secondStart) {
    var text1, text2, token1, token2
    // item 172
    text1 = token.text.substring(
        0,
        secondStart
    )
    // item 173
    text2 = token.text.substring(
        secondStart,
        token.text.length
    )
    // item 174
    token1 = new Token(token.type)
    token1.text = text1
    token1.color = token.color
    // item 175
    token2 = new Token(token.type)
    token2.text = text2
    token2.color = token.color
    // item 176
    return {
        first : token1,
        second : token2
    }
}

function validateItemText(text) {
    var error
    // item 1133
    error = checkInputText(text)
    // item 1134
    if (error) {
        // item 1132
        return translate(error)
    } else {
        // item 1130
        return null
    }
}

function validateModuleName(name) {
    var error
    // item 1105
    error = checkInputText(name)
    // item 1106
    if (error) {
        // item 1104
        return translate(error)
    } else {
        // item 1101
        error = Utils.validateModuleName(
            name,
            module.language
        )
        // item 1102
        if (error) {
            // item 1104
            return translate(error)
        } else {
            // item 1100
            return null
        }
    }
}

function SourceFlower() {
  var _self = this;
  _self.type_name = "SourceFlower";
  _self.state = "Created";
  _self.eol = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Created") {
      return SourceFlower_Created_default(_self, msg);
    }
    else if (_state_ == "Normal") {
      return SourceFlower_Normal_eol(_self, msg);
    }
    return null;
  };
  _self.init = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Created") {
      return SourceFlower_Created_init(_self, msg);
    }
    return null;
  };
  _self.onToken = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Created") {
      return SourceFlower_Created_default(_self, msg);
    }
    else if (_state_ == "Normal") {
      return SourceFlower_Normal_onToken(_self, msg);
    }
    return null;
  };
}

function OperBuilder() {
  var _self = this;
  _self.type_name = "OperBuilder";
  _self.state = "Idle";
  _self.eol = function(token) {
    var _state_ = _self.state;
    if (_state_ == "Idle") {
      return OperBuilder_Idle_eol(_self, token);
    }
    else if (_state_ == "One") {
      return OperBuilder_One_eol(_self, token);
    }
    else if (_state_ == "Two") {
      return OperBuilder_Two_eol(_self, token);
    }
    return null;
  };
  _self.onToken = function(token) {
    var _state_ = _self.state;
    if (_state_ == "Idle") {
      return OperBuilder_Idle_onToken(_self, token);
    }
    else if (_state_ == "One") {
      return OperBuilder_One_onToken(_self, token);
    }
    else if (_state_ == "Two") {
      return OperBuilder_Two_onToken(_self, token);
    }
    return null;
  };
}

function TokenBuilder() {
  var _self = this;
  _self.type_name = "TokenBuilder";
  _self.state = "Empty";
  _self.addChar = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Empty") {
      return TokenBuilder_Empty_addChar(_self, msg);
    }
    else if (_state_ == "Building") {
      return TokenBuilder_Building_addChar(_self, msg);
    }
    return null;
  };
  _self.endToken = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Building") {
      return TokenBuilder_Building_endToken(_self, msg);
    }
    return null;
  };
  _self.eol = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Empty") {
      return TokenBuilder_Empty_eol(_self, msg);
    }
    else if (_state_ == "Building") {
      return TokenBuilder_Building_eol(_self, msg);
    }
    return null;
  };
  _self.finish = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Building") {
      return TokenBuilder_Building_finish(_self, msg);
    }
    return null;
  };
  _self.identifier = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Empty") {
      return TokenBuilder_Empty_identifier(_self, msg);
    }
    else if (_state_ == "Building") {
      return TokenBuilder_Building_identifier(_self, msg);
    }
    return null;
  };
  _self.number = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Empty") {
      return TokenBuilder_Empty_number(_self, msg);
    }
    else if (_state_ == "Building") {
      return TokenBuilder_Building_number(_self, msg);
    }
    return null;
  };
  _self.sendToken = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Empty") {
      return TokenBuilder_Empty_sendToken(_self, msg);
    }
    else if (_state_ == "Building") {
      return TokenBuilder_Building_sendToken(_self, msg);
    }
    return null;
  };
}


lexInit()
