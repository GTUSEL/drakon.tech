TableGen = function() {

var gPrimitives = ["int", "double", "string", "bool"]

// Autogenerated with DRAKON Editor 1.28


function AstNode(print, first, second, third) {
    // item 324
    this.print = print
    this.first = first
    this.second = second
    this.third = third
}

function Class(name, constructor, methods) {
    // item 618
    this.name = name
    this.constructor = constructor
    this.methods = methods
}

function addInsertUniqueChecks(recordDef, tableName, body) {
    // item 1199
    var pkFieldName = null
    // item 11870001
    var _ind1187 = 0;
    var _col1187 = recordDef.fields;
    var _len1187 = _col1187.length;
    while (true) {
        // item 11870002
        if (_ind1187 < _len1187) {
            
        } else {
            break;
        }
        // item 11870004
        var field = _col1187[_ind1187];
        // item 1189
        if (isIndexed(field)) {
            // item 1195
            if (field.pk) {
                // item 1197
                pkFieldName = buildName(field.name)
                // item 1192
                if (recordDef.autopk) {
                    
                } else {
                    // item 1196
                    addNullCheck(tableName, field, body)
                    addUniqueCheck(tableName, "this", "row", field, body)
                }
            } else {
                // item 1196
                addNullCheck(tableName, field, body)
                addUniqueCheck(tableName, "this", "row", field, body)
            }
        } else {
            
        }
        // item 11870003
        _ind1187++;
    }
    // item 1200
    return pkFieldName
}

function addNullCheck(tableName, field, body) {
    // item 975
    var fieldName = buildName(field.name)
    // item 976
    body.push(ques(
    	toke("!row._" + fieldName),
    	[err(tableName + "." + fieldName + " cannot be empty")],
    	[]
    ))
}

function addToIndexes(recordDef, body) {
    // item 12070001
    var _ind1207 = 0;
    var _col1207 = recordDef.fields;
    var _len1207 = _col1207.length;
    while (true) {
        // item 12070002
        if (_ind1207 < _len1207) {
            
        } else {
            break;
        }
        // item 12070004
        var field = _col1207[_ind1207];
        // item 1209
        if (isIndexed(field)) {
            // item 1212
            var index = makeIndexName(field)
            var fieldName = buildName(field.name)
            // item 1213
            body.push(assi2(
            	"this._" + index + "[" + "row._" + fieldName + "]",
            	"row"
            ))
        } else {
            
        }
        // item 12070003
        _ind1207++;
    }
}

function addUniqueCheck(tableName, table, row, field, body) {
    // item 962
    var fieldName = buildName(field.name)
    var index = makeIndexName(field)
    // item 963
    body.push(ques(
    	toke(row + "._" + fieldName + " in " + table + "._" + index),
    	[thro(toke("\"" + tableName + "." + fieldName
     + " is not unique: \" + " + row + "._" + fieldName))],
    	[]
    ))
}

function assi(left, right) {
    // item 318
    return new AstNode(printAssignment, left, right)
}

function assi2(leftText, rightText) {
    // item 683
    var left = toke(leftText)
    var right = toke(rightText)
    // item 682
    return new AstNode(printAssignment, left, right)
}

function blockEnd(depth) {
    // item 409
    return makeIndent(depth) + "}"
}

function buildArrayAppend(recordDef) {
    // item 1229
    var body = []
    var tableName = buildClassName(recordDef.name)
    // item 1231
    body.push(ques(
    	toke("row.__parent"),
    	[thro(toke(escapeString(tableName
     + " append: the new row already has a parent")))],
    	[]
    ))
    // item 1244
    addInsertUniqueChecks(
    	recordDef,
    	tableName,
    	body
    )
    // item 1245
    addToIndexes(recordDef, body)
    // item 1237
    body.push(assi2(
    	"var id",
    	"this._rows.length"
    ))
    // item 1239
    body.push(assi2(
    	"row.__parent", "this"
    ))
    // item 1246
    body.push(stat(
    	toke("this._rows.push(row)")
    ))
    // item 1238
    body.push(retu(
    	toke("id")
    ))
    // item 1230
    return fund(
    	tableName + "_append",
    	["row"],
    	body
    )
}

function buildArrayClass(recordDef) {
    // item 1112
    var methods = []
    var constructor = buildArrayConstructor(recordDef)
    // item 1114
    methods.push(buildArrayForeach(recordDef))
    methods.push(buildArrayCount(recordDef.name))
    methods.push(buildArrayAppend(recordDef))
    methods.push(buildArrayInsertAt(recordDef))
    methods.push(buildArrayDeleteAt(recordDef))
    methods.push(buildArrayGet(recordDef.name))
    methods.push(buildArrayClear(recordDef))
    methods.push(buildArraySort(recordDef))
    methods.push(buildArrayGetList(recordDef))
    methods.push(buildArrayGetOrdinal(recordDef))
    // item 11150001
    var _ind1115 = 0;
    var _col1115 = recordDef.fields;
    var _len1115 = _col1115.length;
    while (true) {
        // item 11150002
        if (_ind1115 < _len1115) {
            
        } else {
            break;
        }
        // item 11150004
        var field = _col1115[_ind1115];
        // item 1119
        if (isIndexed(field)) {
            // item 1117
            var getter = buildIndexGetter(recordDef.name, field)
            // item 1118
            methods.push(getter)
        } else {
            
        }
        // item 11150003
        _ind1115++;
    }
    // item 1113
    return new Class(recordDef.name, constructor, methods)
}

function buildArrayClear(recordDef) {
    // item 1361
    var className = buildClassName(recordDef.name)
    // item 1375
    var body = []
    // item 13640001
    var _ind1364 = 0;
    var _col1364 = recordDef.fields;
    var _len1364 = _col1364.length;
    while (true) {
        // item 13640002
        if (_ind1364 < _len1364) {
            
        } else {
            break;
        }
        // item 13640004
        var field = _col1364[_ind1364];
        // item 1366
        if (isIndexed(field)) {
            // item 1373
            var index = makeIndexName(field)
            // item 1376
            body.push(assi2("this._" + index, "{}"))
        } else {
            
        }
        // item 13640003
        _ind1364++;
    }
    // item 1377
    body.push(assi2("this._count", "0"))
    // item 1378
    if (recordDef.autopk) {
        // item 1381
        body.push(assi2("this._next", "1"))
    } else {
        
    }
    // item 1382
    if (recordDef.type == "array") {
        // item 1385
        body.push(assi2("this._rows", "[]"))
    } else {
        
    }
    // item 1362
    return fund(
    	className + "_clear",
    	[],
    	body
    )
}

function buildArrayConstructor(recordDef) {
    // item 1127
    var body = []
    var className = buildClassName(recordDef.name)
    // item 1128
    body.push(assi2("this.__parent", "null"))
    body.push(assi2("this._rows", "[]"))
    // item 1129
    body.push(assi2("this.foreach", className + "_foreach"))
    body.push(assi2("this.count", className + "_count"))
    body.push(assi2("this.insertAt", className + "_insertAt"))
    body.push(assi2("this.deleteAt", className + "_deleteAt"))
    body.push(assi2("this.append", className + "_append"))
    body.push(assi2("this.get", className + "_get"))
    body.push(assi2("this.clear", className + "_clear"))
    body.push(assi2("this.sort", className + "_sort"))
    body.push(assi2("this.getList", className + "_getList"))
    body.push(assi2("this.getOrdinal", className + "_getOrdinal"))
    // item 11380001
    var _ind1138 = 0;
    var _col1138 = recordDef.fields;
    var _len1138 = _col1138.length;
    while (true) {
        // item 11380002
        if (_ind1138 < _len1138) {
            
        } else {
            break;
        }
        // item 11380004
        var field = _col1138[_ind1138];
        // item 1142
        if (isIndexed(field)) {
            // item 1140
            var getter = makeIndexGetterName(field)
            // item 1141
            body.push(assi2(
            	"this._" + makeIndexName(field),
            	"{}"
            ))
        } else {
            
        }
        // item 11380003
        _ind1138++;
    }
    // item 11300001
    var _ind1130 = 0;
    var _col1130 = recordDef.fields;
    var _len1130 = _col1130.length;
    while (true) {
        // item 11300002
        if (_ind1130 < _len1130) {
            
        } else {
            break;
        }
        // item 11300004
        var field = _col1130[_ind1130];
        // item 1135
        if (isIndexed(field)) {
            // item 1132
            var getter = makeIndexGetterName(field)
            // item 1133
            body.push(assi2(
            	"this." + getter,
            	className + "_" + getter
            ))
        } else {
            
        }
        // item 11300003
        _ind1130++;
    }
    // item 1134
    return assi(
    	toke("this." + className),
    	funl([], body)
    )
}

function buildArrayCount(className) {
    // item 1157
    className = buildClassName(className)
    // item 1158
    return fund(
    	className + "_count",
    	[],
    	[retu(toke("this._rows.length"))]
    )
}

function buildArrayDeleteAt(recordDef) {
    // item 1278
    var name = buildClassName(recordDef.name)
    var body = []
    // item 1282
    var deleteRows = [
    	assi2(
    		"var old",
    		"this._rows[pos]"
    	),
    	stat(toke("this._rows.splice(pos, 1)"))
    ]
    // item 1283
    removeFromIndexes(recordDef, deleteRows)
    // item 1280
    body.push(ques(
    	toke("pos >=0 && pos < this._rows.length"),
    	deleteRows,
    	[]
    ))
    // item 1281
    body.push(retu(toke("null")))
    // item 1277
    return fund(
    	name + "_deleteAt",
    	["pos"],
    	body
    )
}

function buildArrayForeach(recordDef) {
    // item 1166
    var name = buildClassName(recordDef.name)
    // item 1165
    return fund(
    	name + "_foreach",
    	["action"],
    	[
    		assi2("var rows", "this._rows"),
    		assi2("var length", "rows.length"),
    		stat(toke("var i")),
    		for2("i = 0; i < length; i++",
    		[
    			assi2("var row", "rows[i]"),
    			assi2("var mustExit", "action(row, i)"),
    			ques(toke("mustExit"),
    				[retu(toke("true"))],
    				[]
    			)
    		]),
    		retu(toke("false"))
    	]
    )
}

function buildArrayGet(className) {
    // item 1150
    className = buildClassName(className)
    // item 1151
    return fund(
    	className + "_get",
    	["id"],
    	[retu(toke("this._rows[id]"))]
    )
}

function buildArrayGetList(recordDef) {
    // item 1399
    var name = buildClassName(recordDef.name)
    // item 1398
    return fund(
    	name + "_getList",
    	[],
    	[
    		retu(toke("this._rows.slice()"))
    	]
    )
}

function buildArrayGetOrdinal(recordDef) {
    // item 1414
    var name = buildClassName(recordDef.name)
    // item 1413
    return fund(
    	name + "_getOrdinal",
    	["row"],
    	[
    		retu(toke("this._rows.indexOf(row)"))
    	]
    )
}

function buildArrayInsertAt(recordDef) {
    // item 1259
    var body = []
    var tableName = buildClassName(recordDef.name)
    // item 1261
    body.push(ques(
    	toke("row.__parent"),
    	[thro(toke(escapeString(tableName
     + " insertAt: the new row already has a parent")))],
    	[]
    ))
    // item 1271
    body.push(ques(
    	toke("pos < 0 || pos > this._rows.length"),
    	[thro(toke(escapeString(tableName
     + " insertAt: pos out of range")))],
    	[]
    ))
    // item 1268
    addInsertUniqueChecks(
    	recordDef,
    	tableName,
    	body
    )
    // item 1269
    addToIndexes(recordDef, body)
    // item 1264
    body.push(assi2(
    	"row.__parent", "this"
    ))
    // item 1270
    body.push(stat(
    	toke("this._rows.splice(pos, 0, row)")
    ))
    // item 1263
    body.push(retu(
    	toke("pos")
    ))
    // item 1260
    return fund(
    	tableName + "_insertAt",
    	["pos", "row"],
    	body
    )
}

function buildArraySort(recordDef) {
    // item 1390
    var className = buildClassName(recordDef.name)
    // item 1391
    return fund(
    	className + "_sort",
    	["comparer"],
    	[stat(toke("this._rows.sort(comparer)"))]
    )
}

function buildAst(recordDefs, name) {
    // item 501
    var mainName = buildClassName(
    	normalizeName(name)
    )
    // item 397
    var lines = [assi2("var _factory", "this")]
    // item 729
    var records = []
    var rmap = {}
    // item 12930001
    var _ind1293 = 0;
    var _col1293 = recordDefs;
    var _len1293 = _col1293.length;
    while (true) {
        // item 12930002
        if (_ind1293 < _len1293) {
            
        } else {
            break;
        }
        // item 12930004
        var def = _col1293[_ind1293];
        // item 1292
        rmap[def.originalName] = def
        // item 12930003
        _ind1293++;
    }
    // item 7300001
    var _ind730 = 0;
    var _col730 = recordDefs;
    var _len730 = _col730.length;
    while (true) {
        // item 7300002
        if (_ind730 < _len730) {
            
        } else {
            break;
        }
        // item 7300004
        var def = _col730[_ind730];
        // item 503
        buildRecord(rmap, def, records)
        // item 7300003
        _ind730++;
    }
    // item 6190001
    var _ind619 = 0;
    var _col619 = records;
    var _len619 = _col619.length;
    while (true) {
        // item 6190002
        if (_ind619 < _len619) {
            
        } else {
            break;
        }
        // item 6190004
        var record = _col619[_ind619];
        // item 621
        lines.push(record.constructor)
        // item 6190003
        _ind619++;
    }
    // item 6220001
    var _ind622 = 0;
    var _col622 = records;
    var _len622 = _col622.length;
    while (true) {
        // item 6220002
        if (_ind622 < _len622) {
            
        } else {
            break;
        }
        // item 6220004
        var record = _col622[_ind622];
        // item 6250001
        var _ind625 = 0;
        var _col625 = record.methods;
        var _len625 = _col625.length;
        while (true) {
            // item 6250002
            if (_ind625 < _len625) {
                
            } else {
                break;
            }
            // item 6250004
            var method = _col625[_ind625];
            // item 624
            lines.push(method)
            // item 6250003
            _ind625++;
        }
        // item 6220003
        _ind622++;
    }
    // item 710
    var lines2 = interwine(lines, empty)
    // item 500
    var module = stat(
      fund(
        mainName,
        [],
        lines2
      )
    )
    // item 1097
    var exps = makeExports(mainName)
    // item 1098
    return [module, exps]
}

function buildClass(rmap, recordDef) {
    // item 1313
    checkInheritance(rmap, recordDef.originalName, {})
    var allFields = findAllFields(rmap, recordDef.originalName)
    // item 532
    var methods = []
    // item 6270001
    var _ind627 = 0;
    var _col627 = recordDef.fields;
    var _len627 = _col627.length;
    while (true) {
        // item 6270002
        if (_ind627 < _len627) {
            
        } else {
            break;
        }
        // item 6270004
        var field = _col627[_ind627];
        // item 631
        var fieldName = buildName(field.name)
        // item 629
        var getter = buildClassGetter(recordDef.name, field)
        // item 630
        methods.push(getter)
        // item 632
        var setter = buildClassSetter(recordDef.name, field)
        // item 633
        methods.push(setter)
        // item 6270003
        _ind627++;
    }
    // item 1044
    var className = buildClassName(recordDef.name)
    // item 534
    var constructor = buildRecordConstructor(
    	recordDef,
    	className,
    	allFields
    )
    // item 533
    return new Class(recordDef.name, constructor, methods)
}

function buildClassGetter(className, field) {
    // item 639
    var name = buildClassName(className)
    var fieldName = buildName(field.name)
    // item 664
    return fund(
    	name + "_" + fieldName,
    	[],
    	[retu(toke("this._" + fieldName))]
    )
}

function buildClassName(normalized) {
    // item 1290
    var parts = normalized.split(" ")
    // item 1291
    return parts.map(initCap).join("")
}

function buildClassSetter(className, field) {
    // item 670
    var name = buildClassName(className)
    var fieldName = buildName(field.name)
    var setter = buildName("set " + field.name)
    var lines = []
    // item 684
    var thisField = "this._" + fieldName
    // item 672
    if (field.isPrimitive) {
        // item 676
        lines.push(assi2(thisField, "value"))
    } else {
        // item 1078
        putComplexObject(
        	name,
        	fieldName,
        	thisField,
        	lines
        )
    }
    // item 675
    return fund(
    	name + "_" + setter,
    	["value"],
    	lines
    )
}

function buildIndexGetter(className, field) {
    // item 928
    className = buildClassName(className)
    var getter = makeIndexGetterName(field)
    var index = makeIndexName(field)
    var fieldName = buildName(field.name)
    // item 929
    return fund(
    	className + "_" + getter,
    	[fieldName],
    	[retu(toke("this._"
     + index + "[" + fieldName + "]"))]
    )
}

function buildInitValue(className, field) {
    // item 719
    if ((("value" in field) && (field.value == "new")) && (!(field.isPrimitive))) {
        // item 716
        if ("type" in field) {
            // item 721
            return "new _factory." + buildClassName(field.type) + "()"
        } else {
            // item 725
            if ("extype" in field) {
                // item 726
                return "new " + field.extype + "()"
            } else {
                // item 723
                return printValue(field.value)
            }
        }
    } else {
        // item 723
        return printValue(field.value)
    }
}

function buildMapAdd(recordDef) {
    // item 944
    var body = []
    var tableName = buildClassName(recordDef.name)
    var pkFieldName
    // item 946
    body.push(ques(
    	toke("row.__parent"),
    	[thro(toke(escapeString(tableName
     + " add: the new row already has a parent")))],
    	[]
    ))
    // item 1201
    var pkFieldName = addInsertUniqueChecks(
    	recordDef,
    	tableName,
    	body
    )
    // item 977
    if (recordDef.autopk) {
        // item 1355
        var pkField = "row._" + pkFieldName
        // item 1354
        body.push(ques(
        	toke("!" + pkField),
        	[assi2(pkField, "this._next.toString()"),
        	stat(toke("this._next++"))],
        	[]
        ))
        // item 981
        body.push(stat(toke(
        	"this._next++"
        )))
    } else {
        
    }
    // item 1214
    addToIndexes(recordDef, body)
    // item 982
    body.push(stat(
    	toke("this._count++")
    ))
    // item 984
    body.push(assi2(
    	"row.__parent", "this"
    ))
    // item 983
    body.push(retu(
    	toke("row._" + pkFieldName)
    ))
    // item 945
    return fund(
    	tableName + "_add",
    	["row"],
    	body
    )
}

function buildMapClass(recordDef) {
    // item 739
    var methods = []
    var constructor = buildMapConstructor(recordDef)
    // item 856
    methods.push(buildMapForeach(recordDef))
    methods.push(buildMapCount(recordDef))
    methods.push(buildMapAdd(recordDef))
    methods.push(buildMapRemove(recordDef))
    methods.push(buildArrayClear(recordDef))
    methods.push(buildMapGetList(recordDef))
    // item 9070001
    var _ind907 = 0;
    var _col907 = recordDef.fields;
    var _len907 = _col907.length;
    while (true) {
        // item 9070002
        if (_ind907 < _len907) {
            
        } else {
            break;
        }
        // item 9070004
        var field = _col907[_ind907];
        // item 911
        if (isIndexed(field)) {
            // item 909
            var getter = buildIndexGetter(recordDef.name, field)
            // item 910
            methods.push(getter)
        } else {
            
        }
        // item 9070003
        _ind907++;
    }
    // item 740
    return new Class(recordDef.name, constructor, methods)
}

function buildMapConstructor(recordDef) {
    // item 751
    var body = []
    var className = buildClassName(recordDef.name)
    // item 752
    body.push(assi2("this.__parent", "null"))
    body.push(assi2("this._count", "0"))
    // item 849
    if (recordDef.autopk) {
        // item 852
        body.push(assi2("this._next", "1"))
    } else {
        
    }
    // item 753
    body.push(assi2("this.foreach", className + "_foreach"))
    body.push(assi2("this.count", className + "_count"))
    body.push(assi2("this.add", className + "_add"))
    body.push(assi2("this.remove", className + "_remove"))
    body.push(assi2("this.clear", className + "_clear"))
    body.push(assi2("this.getList", className + "_getList"))
    // item 8120001
    var _ind812 = 0;
    var _col812 = recordDef.fields;
    var _len812 = _col812.length;
    while (true) {
        // item 8120002
        if (_ind812 < _len812) {
            
        } else {
            break;
        }
        // item 8120004
        var field = _col812[_ind812];
        // item 816
        if (isIndexed(field)) {
            // item 814
            var getter = makeIndexGetterName(field)
            // item 815
            body.push(assi2(
            	"this._" + makeIndexName(field),
            	"{}"
            ))
        } else {
            
        }
        // item 8120003
        _ind812++;
    }
    // item 7540001
    var _ind754 = 0;
    var _col754 = recordDef.fields;
    var _len754 = _col754.length;
    while (true) {
        // item 7540002
        if (_ind754 < _len754) {
            
        } else {
            break;
        }
        // item 7540004
        var field = _col754[_ind754];
        // item 781
        if (isIndexed(field)) {
            // item 756
            var getter = makeIndexGetterName(field)
            // item 757
            body.push(assi2(
            	"this." + getter,
            	className + "_" + getter
            ))
        } else {
            
        }
        // item 7540003
        _ind754++;
    }
    // item 758
    return assi(
    	toke("this." + className),
    	funl([], body)
    )
}

function buildMapCount(recordDef) {
    // item 901
    var name = buildClassName(recordDef.name)
    // item 900
    return fund(
    	name + "_count",
    	[],
    	[retu(toke("this._count"))]
    )
}

function buildMapForeach(recordDef) {
    // item 874
    var pk = getPk(recordDef.fields)
    var indexName = makeIndexName(pk)
    // item 893
    var name = buildClassName(recordDef.name)
    // item 892
    return fund(
    	name + "_foreach",
    	["action"],
    	[
    		assi2("var index", "this._" + indexName),
    		fore("key", toke("index"),
    		[
    			assi2("var mustExit", "action(index[key])"),
    			ques(toke("mustExit"),
    				[retu(toke("true"))],
    				[]
    			)
    		]),
    		retu(toke("false"))
    	]
    )
}

function buildMapGetList(recordDef) {
    // item 1405
    var pk = getPk(recordDef.fields)
    var indexName = makeIndexName(pk)
    // item 1407
    var name = buildClassName(recordDef.name)
    // item 1406
    return fund(
    	name + "_getList",
    	[],
    	[
    		assi2("var index", "this._" + indexName),
    		assi2("var result", "[]"),
    		fore("key", toke("index"),
    		[
    			stat(toke("result.push(index[key])"))
    		]),
    		retu(toke("result"))
    	]
    )
}

function buildMapRecord(recordDef, rmap) {
    // item 1028
    var methods = []
    var rowName = recordDef.name + " row"
    // item 10310001
    var _ind1031 = 0;
    var _col1031 = recordDef.fields;
    var _len1031 = _col1031.length;
    while (true) {
        // item 10310002
        if (_ind1031 < _len1031) {
            
        } else {
            break;
        }
        // item 10310004
        var field = _col1031[_ind1031];
        // item 1035
        var fieldName = buildName(field.name)
        // item 1033
        var getter = buildClassGetter(rowName, field)
        // item 1034
        methods.push(getter)
        // item 10310003
        _ind1031++;
    }
    // item 10500001
    var _ind1050 = 0;
    var _col1050 = recordDef.fields;
    var _len1050 = _col1050.length;
    while (true) {
        // item 10500002
        if (_ind1050 < _len1050) {
            
        } else {
            break;
        }
        // item 10500004
        var field = _col1050[_ind1050];
        // item 1054
        var fieldName = buildName(field.name)
        // item 1052
        var setter = buildRecordSetter(rowName, field)
        // item 1053
        methods.push(setter)
        // item 10500003
        _ind1050++;
    }
    // item 1046
    var className = makeRowName(recordDef.name)
    // item 1347
    var allFields = findAllFields(rmap, recordDef.originalName)
    // item 1045
    var constructor = buildRecordConstructor(
    	recordDef,
    	className,
    	allFields
    )
    // item 1029
    return new Class(recordDef.name, constructor, methods)
}

function buildMapRemove(recordDef) {
    // item 1003
    var name = buildClassName(recordDef.name)
    var body = []
    // item 1004
    var pk = getPk(recordDef.fields)
    var pkName = buildName(pk.name)
    var index = makeIndexName(pk)
    // item 1007
    var deleteRows = [
    	assi2(
    		"var old",
    		"this._" + index + "[" + pkName + "]"
    	),
    	stat(toke("this._count--"))
    ]
    // item 1008
    removeFromIndexes(recordDef, deleteRows)
    // item 1005
    body.push(ques(
    	toke(pkName),
    	[
    		ques(toke(pkName + " in this._" + index),
    		deleteRows,
    		[]
    		)
    	],
    	[]
    ))
    // item 1006
    body.push(retu(toke("null")))
    // item 1002
    return fund(
    	name + "_remove",
    	[pkName],
    	body
    )
}

function buildName(normalized) {
    // item 487
    var parts = normalized.split(" ")
    var head = parts[0]
    var tail = parts.slice(1, parts.length)
    // item 488
    var tail2 = tail.map(initCap).join("")
    // item 489
    return head + tail2
}

function buildRecord(rmap, recordDef, records) {
    var _sw5090000_ = 0;
    // item 5090000
    _sw5090000_ = recordDef.type;
    // item 5090001
    if (_sw5090000_ === "class") {
        // item 517
        var cls = buildClass(rmap, recordDef)
        // item 732
        records.push(cls)
    } else {
        // item 5090002
        if (_sw5090000_ === "array") {
            // item 1105
            var arrayRecord = buildMapRecord(recordDef, rmap)
            var arrayClass = buildArrayClass(recordDef)
            // item 1106
            records.push(arrayRecord)
            records.push(arrayClass)
        } else {
            // item 5090003
            if (_sw5090000_ === "map") {
                
            } else {
                // item 5090004
                throw "Unexpected switch value: " + _sw5090000_;
            }
            // item 728
            var mapRecord = buildMapRecord(recordDef, rmap)
            var mapClass = buildMapClass(recordDef)
            // item 733
            records.push(mapRecord)
            records.push(mapClass)
        }
    }
}

function buildRecordConstructor(recordDef, className, allFields) {
    // item 549
    var body = []
    // item 554
    body.push(assi(
    	toke("this.__parent"),
    	toke("null")
    ))
    // item 5500001
    var _ind550 = 0;
    var _col550 = allFields;
    var _keys550 = Object.keys(_col550); 
    var _len550 = _keys550.length;
    while (true) {
        // item 5500002
        if (_ind550 < _len550) {
            
        } else {
            break;
        }
        // item 5500004
        var _ = _keys550[_ind550]; var field = _col550[_];
        // item 1103
        var fieldName = buildName(field.name)
        // item 552
        var line = assi(
        	toke("this._" + fieldName),
        	toke(buildInitValue(className, field))
        )
        // item 553
        body.push(line)
        // item 1099
        if ((field.isPrimitive) || (!(field.value == "new"))) {
            
        } else {
            // item 1104
            body.push(assi2(
            	"this._" + fieldName + ".__parent",
            	"this"
            ))
        }
        // item 5500003
        _ind550++;
    }
    // item 6030001
    var _ind603 = 0;
    var _col603 = allFields;
    var _keys603 = Object.keys(_col603); 
    var _len603 = _keys603.length;
    while (true) {
        // item 6030002
        if (_ind603 < _len603) {
            
        } else {
            break;
        }
        // item 6030004
        var _ = _keys603[_ind603]; var field = _col603[_];
        // item 611
        var fieldName = buildName(field.name)
        // item 605
        var line = assi(
        	toke("this." + fieldName),
        	toke(field.className + "_" + fieldName)
        )
        // item 606
        body.push(line)
        // item 6030003
        _ind603++;
    }
    // item 13480001
    var _ind1348 = 0;
    var _col1348 = allFields;
    var _keys1348 = Object.keys(_col1348); 
    var _len1348 = _keys1348.length;
    while (true) {
        // item 13480002
        if (_ind1348 < _len1348) {
            
        } else {
            break;
        }
        // item 13480004
        var _ = _keys1348[_ind1348]; var field = _col1348[_];
        // item 612
        var fieldName = buildName(field.name)
        var setter = buildName("set " + field.name)
        // item 609
        var line = assi(
        	toke("this." + setter),
        	toke(field.className + "_" + setter)
        )
        // item 610
        body.push(line)
        // item 13480003
        _ind1348++;
    }
    // item 602
    return assi(
    	toke("this." + className),
    	funl([], body)
    )
}

function buildRecordSetter(className, field) {
    // item 1063
    var name = buildClassName(className)
    var fieldName = buildName(field.name)
    var setter = buildName("set " + field.name)
    var lines = []
    // item 1070
    var thisField = "this._" + fieldName
    // item 1065
    if (field.isPrimitive) {
        // item 1079
        if (isIndexed(field)) {
            // item 1081
            putIndexedValue(
            	name,
            	field,
            	thisField,
            	lines
            )
        } else {
            // item 1069
            lines.push(assi2(thisField, "value"))
        }
    } else {
        // item 1077
        putComplexObject(
        	name,
        	fieldName,
        	thisField,
        	lines
        )
    }
    // item 1068
    return fund(
    	name + "_" + setter,
    	["value"],
    	lines
    )
}

function call(func, args) {
    // item 330
    return new AstNode(printCall, func, args)
}

function checkInheritance(rmap, name, found) {
    // item 1304
    if (name in found) {
        // item 1307
        throw new Error("Inheritance cycle in \"" + name + "\"")
    } else {
        // item 1308
        found[name] = true
        // item 1309
        var record = rmap[name]
        // item 1310
        if (record.base) {
            // item 1312
            checkInheritance(rmap, record.base, found)
        } else {
            
        }
    }
}

function checkTableFields(fieldDefs, className) {
    // item 834
    var pks = 0
    // item 8320001
    var _ind832 = 0;
    var _col832 = fieldDefs;
    var _len832 = _col832.length;
    while (true) {
        // item 8320002
        if (_ind832 < _len832) {
            
        } else {
            // item 847
            if (pks == 1) {
                
            } else {
                // item 846
                throw new Error(className
                 + ": a map should have exactly one pk field")
            }
            break;
        }
        // item 8320004
        var field = _col832[_ind832];
        // item 835
        if (field.pk) {
            // item 838
            pks++
        } else {
            
        }
        // item 853
        if (((isIndexed(field)) && (field.type)) && (field.type != "string")) {
            // item 845
            throw new Error(className + "." + field.name
             + ": only string fields can be indexed")
        } else {
            
        }
        // item 8320003
        _ind832++;
    }
}

function checkUniqueNames(items, type, name) {
    // item 99
    var names = {}
    // item 1000001
    var _ind100 = 0;
    var _col100 = items;
    var _len100 = _col100.length;
    while (true) {
        // item 1000002
        if (_ind100 < _len100) {
            
        } else {
            break;
        }
        // item 1000004
        var item = _col100[_ind100];
        // item 102
        if (item.name in names) {
            // item 106
            throw new Error("\"" + item.name
             + "\" is not unique name for " + type
             + " in " + name)
        } else {
            
        }
        // item 105
        names[item.name] = true
        // item 1000003
        _ind100++;
    }
}

function copyObject(src) {
    // item 1341
    var dst = {}
    // item 1338
    if (src) {
        // item 13430001
        var _ind1343 = 0;
        var _col1343 = src;
        var _keys1343 = Object.keys(_col1343); 
        var _len1343 = _keys1343.length;
        while (true) {
            // item 13430002
            if (_ind1343 < _len1343) {
                
            } else {
                break;
            }
            // item 13430004
            var name = _keys1343[_ind1343]; var value = _col1343[name];
            // item 1345
            dst[name] = value
            // item 13430003
            _ind1343++;
        }
    } else {
        
    }
    // item 1342
    return dst
}

function decl(variable) {
    // item 336
    return new AstNode(printDeclare, variable)
}

function empty() {
    // item 709
    return new AstNode(printEmpty)
}

function err(message) {
    // item 969
    return thro(toke(escapeString(message)))
}

function escapeString(text) {
    // item 572
    var result = ""
    var i
    // item 5740001
    i = 0;
    while (true) {
        // item 5740002
        if (i < text.length) {
            
        } else {
            break;
        }
        // item 588
        var c = text[i]
        // item 5760001
        if (c === "\t") {
            // item 591
            c = "\\t"
        } else {
            // item 5760002
            if (c === "\"") {
                // item 592
                c = "\\\""
            } else {
                // item 5760003
                if (c === "\r") {
                    // item 593
                    c = "\\r"
                } else {
                    // item 5760004
                    if (c === "\n") {
                        // item 594
                        c = "\\n"
                    } else {
                        
                    }
                }
            }
        }
        // item 589
        result += c
        // item 5740003
        i++;
    }
    // item 573
    return "\"" + result + "\""
}

function findAllFields(rmap, className) {
    // item 1319
    var allFields = {}
    while (true) {
        // item 1326
        var record = rmap[className]
        // item 13210001
        var _ind1321 = 0;
        var _col1321 = record.fields;
        var _len1321 = _col1321.length;
        while (true) {
            // item 13210002
            if (_ind1321 < _len1321) {
                
            } else {
                break;
            }
            // item 13210004
            var field = _col1321[_ind1321];
            // item 1329
            if (field.originalName in allFields) {
                // item 1332
                throw new Error("Field \"" + field.originalName
                 + "\" already defined in base class \""
                 + record.originalName + "\"")
            } else {
                
            }
            // item 1352
            var className = record.name
            // item 1349
            if (record.type == "class") {
                
            } else {
                // item 1353
                className += " row"
            }
            // item 1346
            var field2 = copyObject(field)
            field2.className = buildClassName(className)
            allFields[field.originalName] = field2
            // item 13210003
            _ind1321++;
        }
        // item 1328
        className = record.base
        // item 1323
        if (className) {
            
        } else {
            break;
        }
    }
    // item 1320
    return allFields
}

function for2(header, body) {
    // item 1172
    return new AstNode(printFor, header, body)
}

function fore(variable, collection, body) {
    // item 890
    return new AstNode(printForeach, variable, collection, body)
}

function fund(name, args, body) {
    // item 342
    return new AstNode(printFunctionDef, name, args, body)
}

function funl(args, body) {
    // item 348
    return new AstNode(printFunctionLit, args, body)
}

function generate(model) {
    // item 7
    var name = getRequiredString(model, "name")
    var records = getRequiredArray(model, "records")
    // item 46
    var recordDefs = records.map(parseRecord)
    // item 93
    checkUniqueNames(recordDefs, "record", name)
    // item 47
    var forest = buildAst(recordDefs, name)
    // item 1284
    var header = "// autogenerated with TableGen v.0.1\n"
    // item 502
    return header + 
      forest.map((tree)=>tree.print(0)).join("\n")
}

function getOptionalBool(obj, name, def) {
    // item 796
    if (name in obj) {
        // item 801
        var value = obj[name]
        // item 799
        if ((value === true) || (value === 1)) {
            // item 802
            return true
        } else {
            // item 811
            return false
        }
    } else {
        // item 807
        return def
    }
}

function getOptionalString(obj, name, context) {
    // item 465
    context = context || ""
    // item 455
    if (name in obj) {
        // item 460
        var value = obj[name]
        // item 458
        if (typeof value == "string") {
            // item 463
            if (value) {
                // item 461
                return value
            } else {
                // item 467
                return null
            }
        } else {
            // item 462
            throw new Error("Optional field \""
             + name + "\" is not a string: " + context)
        }
    } else {
        // item 466
        return null
    }
}

function getPk(fields) {
    // item 8670001
    var _ind867 = 0;
    var _col867 = fields;
    var _len867 = _col867.length;
    while (true) {
        // item 8670002
        if (_ind867 < _len867) {
            
        } else {
            // item 873
            throw new Error(
              "Primary key field not found"
            )
        }
        // item 8670004
        var field = _col867[_ind867];
        // item 869
        if (field.pk) {
            // item 872
            return field
        } else {
            
        }
        // item 8670003
        _ind867++;
    }
}

function getRequiredArray(obj, name, context) {
    // item 442
    context = context || ""
    // item 433
    if (name in obj) {
        // item 439
        var value = obj[name]
        // item 437
        if (isArray(value)) {
            // item 440
            return value
        } else {
            // item 441
            throw new Error("Mandatory field \""
             + name + "\" is not an array: " + context)
        }
    } else {
        // item 436
        throw new Error("Mandatory field \""
         + name + "\" is missing: " + context)
    }
}

function getRequiredString(obj, name, context) {
    // item 427
    context = context || ""
    // item 415
    if (name in obj) {
        // item 421
        var value = obj[name]
        // item 419
        if (typeof value == "string") {
            // item 424
            if (value) {
                // item 422
                return value
            } else {
                // item 426
                throw new Error("Mandatory field \""
                 + name + "\" is empty: " + context)
            }
        } else {
            // item 423
            throw new Error("Mandatory field \""
             + name + "\" is not a string: " + context)
        }
    } else {
        // item 418
        throw new Error("Mandatory field \""
         + name + "\" is missing: " + context)
    }
}

function inde(arr, index) {
    // item 354
    return new AstNode(printIndex, arr, index)
}

function initCap(text) {
    // item 480
    var head = text.substring(0, 1)
    var tail = text.substring(1)
    // item 481
    return head.toUpperCase() + tail.toLowerCase()
}

function interwine(array, generator) {
    // item 692
    var result = []
    // item 693
    if (array.length == 0) {
        
    } else {
        // item 697
        result.push(array[0])
        // item 6900001
        var i = 1;
        while (true) {
            // item 6900002
            if (i < array.length) {
                
            } else {
                break;
            }
            // item 698
            result.push(generator())
            result.push(array[i])
            // item 6900003
            i++;
        }
    }
    // item 696
    return result
}

function isArray(obj) {
    // item 448
    var type = Object.prototype.toString.call(obj)
    // item 449
    return (type == "[object Array]")
}

function isIndexed(field) {
    // item 770
    if ((field.unique) || (field.pk)) {
        // item 776
        return true
    } else {
        // item 777
        return false
    }
}

function makeExports(name) {
    // item 1095
    return ques(
    	toke("typeof exports !== \"undefined\""),
    	[
    		assi2("var obj", "new " + name + "()"),
    		fore(
    			"name",
    			toke("obj"),
    			[assi2("exports[name]", "obj[name]")]
    		)
    	],
    	[]
    )
}

function makeIndent(depth) {
    // item 403
    return " ".repeat(4 * depth)
}

function makeIndexGetterName(field) {
    // item 903
    if (field.pk) {
        // item 906
        return "get"
    } else {
        // item 789
        return buildName("get by " + field.name)
    }
}

function makeIndexName(field) {
    // item 824
    return buildName("by " + field.name)
}

function makeRowName(name) {
    // item 1043
    return buildClassName(name + " row")
}

function normalizeName(text) {
    // item 495
    if (text.indexOf("_") == -1) {
        // item 499
        return text.toLowerCase().trim()
    } else {
        // item 498
        throw new Error("Underscores are not allowed in names: " + name)
    }
}

function parseClassField(field) {
    // item 107
    var name = getRequiredString(field, "name")
    var type = getOptionalString(field, "type", name)
    var extype = getOptionalString(field, "extype", name)
    var unique = getOptionalBool(field, "unique", false)
    var pk = getOptionalBool(field, "pk", false)
    var value = field.value || null
    var isPrimitive
    // item 129
    if (type) {
        // item 128
        isPrimitive = (gPrimitives.indexOf(type) != -1)
    } else {
        // item 132
        isPrimitive = true
    }
    // item 160
    var normalized = normalizeName(name)
    // item 133
    return {
    	originalName: name,
    	name: normalized,
    	type: type,
    	extype: extype,
    	value: value,
    	isPrimitive: isPrimitive,
    	pk: pk,
    	unique: unique
    }
}

function parseRecord(record) {
    // item 66
    var name = getRequiredString(record, "name")
    var fields = getRequiredArray(record, "fields", name)
    var type = getRequiredString(record, "type", name)
    var autopk = getOptionalBool(record, "autopk", false)
    var fieldDefs
    // item 680001
    if (type === "class") {
        // item 67
        fieldDefs = fields.map(parseClassField)
    } else {
        // item 680002
        if (type === "array") {
            // item 80
            fieldDefs = fields.map(parseTableField)
            // item 1296
            if (record.base) {
                // item 1298
                throw new Error("Only classes can have base: \""
                 + type + "\" in record \"" + name + "\"")
            } else {
                
            }
        } else {
            // item 680003
            if (type === "map") {
                // item 825
                fieldDefs = fields.map(parseTableField)
                // item 826
                checkTableFields(fieldDefs, name)
                // item 1296
                if (record.base) {
                    // item 1298
                    throw new Error("Only classes can have base: \""
                     + type + "\" in record \"" + name + "\"")
                } else {
                    
                }
            } else {
                // item 77
                throw new Error("Unexpected record type: \""
                 + type + "\" in record \"" + name + "\"")
            }
        }
    }
    // item 92
    checkUniqueNames(fieldDefs, "fields", name)
    // item 148
    var normalized = normalizeName(name)
    // item 81
    return {
    	originalName: name,
    	name: normalized,
    	type: type,
    	fields: fieldDefs,
    	autopk: autopk,
    	base: record.base
    }
}

function parseTableField(fieldDef) {
    // item 790
    return parseClassField(fieldDef)
}

function printAssignment(depth) {
    // item 240
    var text = makeIndent(depth)
    text += this.first.print(depth)
    text += " = "
    text += this.second.print(depth)
    // item 241
    return text
}

function printBlockContent(statements, depth) {
    // item 380
    if (statements) {
        // item 287
        var body = statements.map((s) => s.print(depth + 1)).join("\n")
        // item 288
        return body
    } else {
        // item 383
        return null
    }
}

function printCall(depth) {
    // item 259
    var result = this.first.print(depth) + "("
    // item 260
    var args = this.second.map((item)=>item.print(depth))
    // item 261
    return result + args.join(", ") + ")"
}

function printDeclare(depth) {
    // item 294
    return "var " + this.first
}

function printEmpty(depth) {
    // item 704
    return ""
}

function printFor(depth) {
    // item 1179
    var body = printBlockContent(this.second, depth)
    // item 1180
    var indent = makeIndent(depth)
    // item 1178
    var result = indent
     + "for (" + this.first + ") {\n"
     + body + "\n"
     + blockEnd(depth)
    // item 1181
    return result
}

function printForeach(depth) {
    // item 881
    var body = printBlockContent(this.third, depth)
    // item 883
    var indent = makeIndent(depth)
    // item 880
    var result = indent
     + "for (var " + this.first
     + " in "
     + this.second.print(depth) + ") {\n"
     + body + "\n"
     + blockEnd(depth)
    // item 884
    return result
}

function printFunctionDef(depth) {
    // item 274
    var body = printBlockContent(this.third, depth)
    // item 273
    return makeIndent(depth) + "function " + this.first + "("
     + this.second.join(", ") + ") {\n"
     + body + "\n"
     + blockEnd(depth)
}

function printFunctionLit(depth) {
    // item 281
    var body = printBlockContent(this.second, depth)
    // item 280
    return "function ("
     + this.first.join(", ") + ") {\n"
     + body + "\n"
     + blockEnd(depth)
}

function printIf(depth) {
    // item 379
    var thenBody = printBlockContent(this.second, depth)
    var elseBody = printBlockContent(this.third, depth)
    // item 388
    var indent = makeIndent(depth)
    // item 378
    var result = indent
     + "if (" + this.first.print(depth) + ") {\n"
     + thenBody + "\n"
    // item 385
    if (elseBody) {
        // item 389
        result += indent + "} else {\n"
        result += elseBody + "\n"
    } else {
        
    }
    // item 384
    result += blockEnd(depth)
    // item 390
    return result
}

function printIndex(depth) {
    // item 267
    return this.first.print(depth) + "[" + this.second.print(depth) + "]"
}

function printProperty(depth) {
    // item 253
    return this.first.print(depth) + "." + this.second
}

function printReturn(depth) {
    // item 645
    return makeIndent(depth) + "return " + this.first.print(depth)
}

function printStatement(depth) {
    // item 300
    return makeIndent(depth) + this.first.print(depth)
}

function printThrow(depth) {
    // item 651
    return makeIndent(depth)
     + "throw new Error("
     + this.first.print(depth)
     + ")"
}

function printToken(depth) {
    // item 247
    return this.first
}

function printValue(value) {
    // item 560
    if (value === null) {
        // item 563
        return "null"
    } else {
        // item 564
        if (typeof value == "string") {
            // item 595
            return escapeString(value)
        } else {
            // item 596
            if (isArray(value)) {
                // item 600
                var result = "["
                 + value.map(printValue).join(", ")
                 + "]"
                // item 601
                return result
            } else {
                // item 599
                return value.toString()
            }
        }
    }
}

function prop(obj, name) {
    // item 360
    return new AstNode(printProperty, obj, name)
}

function putComplexObject(name, fieldName, thisField, lines) {
    // item 1076
    lines.push(ques(
    	toke("this._" + fieldName + " !== value"),
    	[
    
    		ques(
    			toke("value"),
    			[
    				ques(
    					toke("value.__parent"),
    					[err("set " + name
     + "." + fieldName + ": the new value already has a parent")],
    					[]
    				),
    				assi2("value.__parent", "this")
    			],
    			[]
    		),
    		ques(
    			toke("this._" + fieldName),
    			[
    				assi2("var old", thisField),
    				assi2("old.__parent", "null"),
    				assi2(thisField, "value"),
    				retu(toke("old"))
    			],
    			[
    				assi2(thisField, "value"),
    				retu(toke("null"))
    			]
    		)
    	],
    	[]
    ))
}

function putIndexedValue(name, field, thisField, lines) {
    // item 1088
    var fieldName = buildName(field.name)
    var index = makeIndexName(field)
    // item 1089
    lines.push(assi2("var old", "this._" + fieldName))
    // item 1087
    lines.push(ques(
    	toke("old !== value"),
    	[ques(toke("this.__parent"),
    		[ques(toke("!value"),
    			[err("set " + name + "." + fieldName
     + ": cannot put null in an indexed field")],
    			[]
    		),
    		ques(toke("value in this.__parent._" + index),
    			[thro(toke("\"set " + name + "." + fieldName
     + ": value is not unique: \" + value"))],
    			[]
    		),
    		ques(toke("old"),
    			[stat(toke("delete this.__parent._"
     + index + "[old]"))],
    			[]
    		),
    		assi2("this.__parent._" + index + "[value]", "this")
    		],
    		[]
    	),
    	assi2("this._" + fieldName, "value")	
    	],
    	[]
    ))
}

function ques(condition, thenLines, elseLines) {
    // item 396
    return new AstNode(printIf, condition, thenLines, elseLines)
}

function removeFromIndexes(recordDef, output) {
    // item 10140001
    var _ind1014 = 0;
    var _col1014 = recordDef.fields;
    var _len1014 = _col1014.length;
    while (true) {
        // item 10140002
        if (_ind1014 < _len1014) {
            
        } else {
            break;
        }
        // item 10140004
        var field = _col1014[_ind1014];
        // item 1017
        if (isIndexed(field)) {
            // item 1016
            var index = makeIndexName(field)
            var fieldName = buildName(field.name)
            // item 1020
            output.push(stat(
            	toke("delete this._"
             + index + "[old._" + fieldName + "]")
            ))
        } else {
            
        }
        // item 10140003
        _ind1014++;
    }
    // item 1021
    output.push(assi2(
    	"old.__parent", "null"
    ))
    // item 1022
    output.push(retu(
    	toke("old")
    ))
}

function retu(expr) {
    // item 657
    return new AstNode(printReturn, expr)
}

function stat(expr) {
    // item 366
    return new AstNode(printStatement, expr)
}

function thro(expr) {
    // item 663
    return new AstNode(printThrow, expr)
}

function toke(toke) {
    // item 372
    return new AstNode(printToken, toke)
}


this.generate = generate
this.buildClassName = buildClassName

}
