var _ = require('lodash')
var esprima = require('esprima')
var escodegen = require('escodegen')

var INDENT = "    "
var globals = {}
var globalForbidVar = true

var completeMethod = "onChildCompleted"

// Autogenerated with DRAKON Editor 1.32


function abnormalLoop(loop, doneLoops, exits) {
    while (true) {
        // item 1776
        if (loop) {
            
        } else {
            // item 1784
            return false
        }
        // item 1779
        if ((loop.id in doneLoops) && (!(loop.id in exits))) {
            // item 1783
            return true
        }
        // item 1782
        loop = loop.parentLoop
    }
}

function addAddress(seq, item) {
    var items, last, prim, text
    // item 2127
    if (hasReturn(seq)) {
        
    } else {
        // item 2136
        text = "return branch" + 
        	item.branchId +
        	"();"
        // item 2135
        prim = createAddress(text)
        // item 2137
        items = seq.items
        last = items.length - 1
        // item 2130
        if ((items.length === 0) || (!(items[last].type === "break"))) {
            // item 2141
            items.push(prim)
        } else {
            // item 2140
            items[last] = prim
        }
    }
}

function addAwait(machine, method, state, variable, next) {
    var awaits, item
    // item 2821
    awaits = getCreateArray(
        machine.awaits,
        method
    )
    // item 2822
    item = {
        state : state,
        variable : variable,
        next : next
    }
    // item 2823
    awaits.push(item)
}

function addBreak(seq, prev, item, loop) {
    var step
    // item 1247
    if ((loop) && (loop.id)) {
        // item 1741
        if (convergeWithParent(item, loop)) {
            // item 1747
            return true
        } else {
            // item 1254
            if (((prev) && (loop.id in item.loops)) && (_.includes(item.prev, prev))) {
                // item 1252
                removeFromPrev(item, prev)
                // item 2004
                if (hasReturn(seq)) {
                    // item 1762
                    return false
                } else {
                    // item 1251
                    step = createBreak()
                    seq.items.push(step)
                    // item 1745
                    return false
                }
            } else {
                // item 1762
                return false
            }
        }
    } else {
        // item 1746
        return false
    }
}

function addBroken(prev, item) {
    // item 2419
    if (prev.one === item) {
        // item 2422
        prev.oneBroken = true
    }
    // item 2423
    if (prev.two === item) {
        // item 2426
        prev.twoBroken = true
    }
}

function addCase(sw, value) {
    var seq
    // item 2780
    seq = createSeq()
    // item 2739
    sw.cases.push({
    	value: value,
    	seq: seq
    })
    // item 2779
    return seq
}

function addCompleted(seq, value) {
    var text
    // item 2804
    addLine(seq, "self.state = undefined;")
    // item 2687
    text = "sm.sendMessage(self.parent, \"" +
      completeMethod + "\", " + value + ");"
    // item 2689
    addLine(seq, text)
    // item 2691
    addLine(seq, "work = false;")
}

function addDiagramError(build, diagram, message) {
    var error, id
    // item 34
    id = makeId(diagram)
    // item 25
    error = {
        type : "folder",
        name : diagram.name,
        target : id,
        message : translate(build, message)
    }
    // item 26
    build.state = "error"
    // item 27
    build.errors.push(error)
}

function addFakeLoopEnd(diagram, item) {
    var fakeEnd
    // item 1701
    fakeEnd = createItem(
        diagram.work,
        "_" + item.id + "_end",
        "action",
        ""
    )
    // item 1702
    fakeEnd.one = item
    fakeEnd.prev = item.aprev
    // item 1703
    item.aprev = [fakeEnd]
    // item 17040001
    var _ind1704 = 0;
    var _col1704 = fakeEnd.prev;
    var _len1704 = _col1704.length;
    while (true) {
        // item 17040002
        if (_ind1704 < _len1704) {
            
        } else {
            break;
        }
        // item 17040004
        var prev = _col1704[_ind1704];
        // item 1706
        if (prev.one === item) {
            // item 1709
            prev.one = fakeEnd
        }
        // item 1710
        if (prev.two === item) {
            // item 1713
            prev.two = fakeEnd
        }
        // item 17040003
        _ind1704++;
    }
}

function addFlag(node, flag, acc) {
    // item 1033
    if (flag in node.flags) {
        // item 1036
        return acc + flag + " "
    } else {
        // item 1037
        return acc
    }
}

function addItemError(build, diagram, itemId, message) {
    var error, id
    // item 447
    id = makeId(diagram)
    // item 444
    error = {
        type : "item",
        name : diagram.name,
        target : {id:id, itemId:itemId},
        message : translate(build, message)
    }
    // item 445
    build.state = "error"
    // item 446
    build.errors.push(error)
}

function addLine(seq, text) {
    var step
    // item 2575
    step = createPrim(text)
    // item 2774
    seq.items.push(step)
}

function addNext(seq, id) {
    // item 2727
    addLine(
      seq,
      "self.state = \"" + id + "\";")
}

function addQuestion(seq, node) {
    var step
    // item 2582
    step = createIf(node.text, node.flag1)
    // item 2775
    seq.items.push(step)
    // item 2584
    return step
}

function addScenarioStep(machine, node) {
    var seq
    // item 2525
    if (node.id in machine.visited) {
        
    } else {
        // item 2528
        machine.visited[node.id] = true
        // item 2556
        seq = addCase(machine.sw, node.id)
        // item 2620
        appendStepCore(
            machine,
            seq,
            node
        )
    }
}

function addSilBranches(diagram) {
    var body, work
    // item 2112
    work = diagram.work
    body = work.fun.body.items
    // item 21130001
    var _ind2113 = 0;
    var _col2113 = work.branches;
    var _len2113 = _col2113.length;
    while (true) {
        // item 21130002
        if (_ind2113 < _len2113) {
            
        } else {
            break;
        }
        // item 21130004
        var branch = _col2113[_ind2113];
        // item 2115
        body.push(
            branch.fun
        )
        // item 21130003
        _ind2113++;
    }
    // item 2116
    body.push(
    	createPrim("return branch1();")
    )
}

function addThrow(step, value) {
    var text
    // item 2980
    if (value[value.length - 1] === ";") {
        // item 2983
        value = value.substring(0, value.length - 1)
    }
    // item 2715
    text = "sm.handleError(self, " + value + ");"
    // item 2717
    addLine(step, text)
    // item 2718
    addLine(step, "work = false;")
}

function addToSameTarget(oldItem, newItem) {
    var next
    // item 2320
    next = oldItem.one
    // item 2324
    newItem.one = next
    // item 2321
    if (isArrow(oldItem, next)) {
        // item 2325
        next.aprev.push(newItem)
    } else {
        // item 2326
        next.prev.push(newItem)
    }
}

function addVariablesDec(diagram) {
    var step, text, work
    // item 1054
    work = diagram.work
    // item 1051
    if (work.vars.length === 0) {
        
    } else {
        // item 1056
        text = "var " + work.vars.join(", ") + ";"
        // item 1057
        step = createPrim(text)
        // item 1055
        work.fun.body.items.unshift(step)
    }
}

function and(left, right) {
    // item 173
    return "(" + left + ") && (" +
      right + ")"
}

function appendAction(machine, step, node) {
    var retLength, value
    // item 2647
    if (startsWithWord(node.text, "return")) {
        // item 2654
        retLength = "return ".length
        // item 2653
        value = node.text.substring(retLength).trim()
        // item 2657
        addCompleted(step, value)
    } else {
        // item 2658
        if (node.text === "return") {
            // item 2690
            addCompleted(step, "undefined")
        } else {
            // item 2676
            if (startsWithWord(node.text, "throw")) {
                // item 2708
                retLength = "throw ".length
                // item 2709
                value = node.text.substring(retLength).trim()
                // item 2719
                addThrow(step, value)
            } else {
                // item 2680
                addLine(step, node.text)
                // item 2681
                appendScenarioStep(
                    machine,
                    step,
                    node.one
                )
            }
        }
    }
}

function appendAddress(machine, seq, node) {
    var branch, next
    // item 2940
    branch = getBranchById(
        machine,
        node.branchId
    )
    // item 2958
    next = branch.one
    // item 2957
    addNext(seq, next.id)
    // item 2956
    addScenarioStep(
        machine,
        next
    )
}

function appendEnd(machine, step, node) {
    // item 2720
    addCompleted(step, "undefined")
}

function appendInput(machine, seq, node) {
    // item 2824
    addAwait(
        machine,
        node.text2,
        node.id,
        node.text,
        node.one.id
    )
    // item 2826
    addLine(seq, "self.state = \"" + 
      waitState(node.id) + "\";")
    // item 2825
    addLine(seq, "work = false;")
    // item 2836
    addScenarioStep(
        machine,
        node.one
    )
}

function appendInsertion(machine, seq, node) {
    var body, callExpr, callNode, expr, statement, variable
    var _sw29170000_ = 0;
    // item 2897
    if (node.text) {
        // item 2904
        body = getBody(node)
        // item 2910
        if (body.length === 1) {
            // item 2914
            statement = body[0]
            // item 2915
            if (statement.type === "ExpressionStatement") {
                // item 2916
                expr = statement.expression
                // item 29170000
                _sw29170000_ = expr.type;
                // item 29170001
                if (_sw29170000_ === "AssignmentExpression") {
                    // item 2926
                    variable = escodegen.generate(expr.left)
                    // item 2928
                    callNode = expr.right
                    // item 2931
                    callNode.arguments.unshift({
                    	type: "Identifier",
                    	name: "self"
                    })
                    // item 2930
                    callExpr = escodegen.generate(callNode)
                    // item 2891
                    addAwait(
                        machine,
                        completeMethod,
                        node.id,
                        variable,
                        node.one.id
                    )
                    // item 2893
                    addLine(seq, "self.state = \"" + 
                      waitState(node.id) + "\";")
                    // item 2892
                    addLine(seq, "work = false;")
                    // item 2895
                    addLine(seq, "var machine = " + callExpr + ";")
                    // item 2896
                    addLine(seq, "machine.run();")
                    // item 2894
                    addScenarioStep(
                        machine,
                        node.one
                    )
                } else {
                    // item 29170002
                    if (_sw29170000_ === "CallExpression") {
                        // item 2927
                        variable = undefined
                        // item 2929
                        callNode = expr
                        // item 2931
                        callNode.arguments.unshift({
                        	type: "Identifier",
                        	name: "self"
                        })
                        // item 2930
                        callExpr = escodegen.generate(callNode)
                        // item 2891
                        addAwait(
                            machine,
                            completeMethod,
                            node.id,
                            variable,
                            node.one.id
                        )
                        // item 2893
                        addLine(seq, "self.state = \"" + 
                          waitState(node.id) + "\";")
                        // item 2892
                        addLine(seq, "work = false;")
                        // item 2895
                        addLine(seq, "var machine = " + callExpr + ";")
                        // item 2896
                        addLine(seq, "machine.run();")
                        // item 2894
                        addScenarioStep(
                            machine,
                            node.one
                        )
                    } else {
                        // item 2913
                        addItemError(
                            machine.build,
                            machine.diagram,
                            node.id,
                            globals.strings.BUILD_ERROR_INSERTION
                        )
                    }
                }
            } else {
                // item 2913
                addItemError(
                    machine.build,
                    machine.diagram,
                    node.id,
                    globals.strings.BUILD_ERROR_INSERTION
                )
            }
        } else {
            // item 2913
            addItemError(
                machine.build,
                machine.diagram,
                node.id,
                globals.strings.BUILD_ERROR_INSERTION
            )
        }
    } else {
        // item 2900
        addItemError(
            machine.build,
            machine.diagram,
            node.id,
            globals.strings.BUILD_EMPTY_INSERTION
        )
    }
}

function appendPause(machine, seq, node) {
    var text
    // item 2964
    addAwait(
        machine,
        "onTimeout",
        node.id,
        undefined,
        node.one.id
    )
    // item 2966
    addLine(seq, "self.state = \"" + 
      waitState(node.id) + "\";")
    // item 2965
    addLine(seq, "work = false;")
    // item 2971
    text = "sm.sendMessage(self, \"onTimeout\", " +
     "undefined, " + node.text + ");"
    // item 2972
    addLine(seq, text)
    // item 2967
    addScenarioStep(
        machine,
        node.one
    )
}

function appendQuestion(machine, seq, node) {
    var qnode
    // item 2692
    qnode = addQuestion(seq, node)
    // item 2699
    appendScenarioStep(
        machine,
        qnode.right,
        node.two
    )
    // item 2700
    appendScenarioStep(
        machine,
        qnode.down,
        node.one
    )
}

function appendScenarioStep(machine, seq, node) {
    // item 2585
    if ((node.prev.length > 1) || (node.type === "arrow-loop")) {
        // item 2721
        addNext(seq, node.id)
        // item 2591
        addScenarioStep(
            machine,
            node
        )
    } else {
        // item 2621
        appendStepCore(
            machine,
            seq,
            node
        )
    }
}

function appendStepCore(machine, seq, node) {
    var _sw25970000_ = 0;
    // item 25970000
    _sw25970000_ = node.type;
    // item 25970001
    if (_sw25970000_ === "arrow-loop") {
        // item 2612
        appendScenarioStep(
            machine,
            seq,
            node.one
        )
    } else {
        // item 25970002
        if (_sw25970000_ === "input") {
            // item 2613
            appendInput(
                machine,
                seq,
                node
            )
        } else {
            // item 25970003
            if (_sw25970000_ === "pause") {
                // item 2970
                appendPause(
                    machine,
                    seq,
                    node
                )
            } else {
                // item 25970004
                if (_sw25970000_ === "insertion") {
                    // item 2614
                    appendInsertion(
                        machine,
                        seq,
                        node
                    )
                } else {
                    // item 25970005
                    if (_sw25970000_ === "end") {
                        // item 2615
                        appendEnd(
                            machine,
                            seq,
                            node
                        )
                    } else {
                        // item 25970006
                        if (_sw25970000_ === "branch") {
                            // item 2616
                            appendScenarioStep(
                                machine,
                                seq,
                                node.one
                            )
                        } else {
                            // item 25970007
                            if (_sw25970000_ === "question") {
                                // item 2617
                                appendQuestion(
                                    machine,
                                    seq,
                                    node
                                )
                            } else {
                                // item 25970008
                                if (_sw25970000_ === "address") {
                                    // item 2935
                                    appendAddress(
                                        machine,
                                        seq,
                                        node
                                    )
                                } else {
                                    // item 2618
                                    appendAction(
                                        machine,
                                        seq,
                                        node
                                    )
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

function assign(varName, value) {
    // item 378
    return varName + " = " + value + ";"
}

function awaitName(diagram, name) {
    // item 2832
    return diagram.name + "_" + name
}

function beginBuild(build) {
    var _sw22090000_ = 0;
    // item 2184
    checkUniqueNames(build)
    // item 2185
    writeBlock(
        build,
        "roof"
    )
    // item 2222
    build.lines.push(
       "// Created with Drakon Tech https://drakon.tech/\n"
    )
    // item 22090000
    _sw22090000_ = build.props.mformat;
    // item 22090001
    if (_sw22090000_ === "MES_IFFE") {
        // item 2223
        build.lines.push("(function() {\n")
    } else {
        // item 22090002
        if (_sw22090000_ === "MES_FUNCTION") {
            // item 2225
            build.lines.push("function " + 
            	build.name + "() {\n")
            // item 2267
            build.lines.push("var module = {};\n")
        }
    }
    // item 2221
    writeBlock(
        build,
        "header"
    )
}

function bindItemsToLoop(map, loopId, item) {
    var idata
    while (true) {
        // item 1830
        idata = map[item.id]
        // item 1823
        if ((loopId in idata.loops) || (item.id === loopId)) {
            break;
        }
        // item 1829
        idata.loops[loopId] = 1
        // item 18330001
        var _ind1833 = 0;
        var _col1833 = item.prev;
        var _len1833 = _col1833.length;
        while (true) {
            // item 18330002
            if (_ind1833 < _len1833) {
                
            } else {
                break;
            }
            // item 18330004
            var prev = _col1833[_ind1833];
            // item 1832
            bindItemsToLoop(
                map,
                loopId,
                prev
            )
            // item 18330003
            _ind1833++;
        }
    }
}

function bindItemsToLoops(work, map) {
    // item 18120001
    var _ind1812 = 0;
    var _col1812 = work.items;
    var _keys1812 = Object.keys(_col1812); 
    var _len1812 = _keys1812.length;
    while (true) {
        // item 18120002
        if (_ind1812 < _len1812) {
            
        } else {
            break;
        }
        // item 18120004
        var id = _keys1812[_ind1812]; var item = _col1812[id];
        // item 1814
        if (item.type === "arrow-loop") {
            // item 1817
            bindItemsToLoop(
                map,
                item.id,
                item.aprev[0]
            )
        }
        // item 18120003
        _ind1812++;
    }
}

function buildAwait(build, diagram, aname, states) {
    var fun, seq, sw
    // item 2864
    fun = createFunction(
        awaitName(diagram, aname),
        ["self", "data"],
        {}
    )
    // item 2868
    sw = createSwitch("self.state")
    sw.defReturn = true
    fun.body.items.push(sw)
    // item 28660001
    var _ind2866 = 0;
    var _col2866 = states;
    var _len2866 = _col2866.length;
    while (true) {
        // item 28660002
        if (_ind2866 < _len2866) {
            
        } else {
            break;
        }
        // item 28660004
        var state = _col2866[_ind2866];
        // item 2869
        seq = addCase(sw, waitState(state.state))
        // item 2907
        if (state.variable) {
            // item 2870
            addLine(seq, state.variable + " = data;")
        }
        // item 2871
        addLine(seq, "self.state = \"" + 
          state.next + "\";")
        // item 28660003
        _ind2866++;
    }
    // item 2872
    addLine(fun.body, runName(diagram) + "(self);")
    // item 2865
    printNode(
        fun,
        0,
        build.lines
    )
}

function buildBody(build, diagram) {
    var context, flags, work
    var _sw23000000_ = 0;
    // item 891
    work = diagram.work
    // item 1786
    findParentLoops(
        work
    )
    // item 8870001
    var _ind887 = 0;
    var _col887 = work.branches;
    var _len887 = _col887.length;
    while (true) {
        // item 8870002
        if (_ind887 < _len887) {
            
        } else {
            break;
        }
        // item 8870004
        var branch = _col887[_ind887];
        // item 892
        context = {
            subtrees : {},
            items : work.items,
            build : build,
            diagram : diagram
        }
        // item 890
        findBlockEnds(
            branch.item,
            branch.item.one,
            [],
            context
        )
        // item 8870003
        _ind887++;
    }
    // item 2228
    flags = chooseFlags(
        build,
        diagram,
        work.flags
    )
    // item 993
    work.fun = createFunction(
        diagram.name,
        work.args,
        flags
    )
    // item 10410001
    var _ind1041 = 0;
    var _col1041 = work.branches;
    var _len1041 = _col1041.length;
    while (true) {
        // item 10410002
        if (_ind1041 < _len1041) {
            
        } else {
            break;
        }
        // item 10410004
        var branch = _col1041[_ind1041];
        // item 1043
        branch.fun = createBranchFunction(
            branch.item.branchId,
            flags
        )
        // item 1044
        scanSequence(
            branch.fun.body,
            branch.item,
            branch.item.one,
            "",
            "",
            false
        )
        // item 10410003
        _ind1041++;
    }
    // item 23000000
    _sw23000000_ = work.branches.length;
    // item 23000001
    if (_sw23000000_ === 0) {
        
    } else {
        // item 23000002
        if (_sw23000000_ === 1) {
            // item 1058
            work.fun.body = work.branches[0].fun.body
        } else {
            // item 2033
            checkEnd(
                build,
                diagram
            )
            // item 2034
            checkOrphaneBranches(
                build,
                diagram
            )
            // item 2035
            replaceAddresses(
                diagram
            )
            // item 2036
            addSilBranches(
                diagram
            )
        }
    }
    // item 1045
    addVariablesDec(
        diagram
    )
    // item 2227
    diagram.output = {
        flags : work.flags
    }
}

function buildEnds(item, context) {
    var branching, exits, gitem, grouped, loop, p2, parentLoop
    // item 937
    grouped = _.groupBy(
        item.dangling
    )
    // item 947
    p2 = []
    exits = {}
    // item 9380001
    var _ind938 = 0;
    var _col938 = grouped;
    var _keys938 = Object.keys(_col938); 
    var _len938 = _keys938.length;
    while (true) {
        // item 9380002
        if (_ind938 < _len938) {
            
        } else {
            break;
        }
        // item 9380004
        var id = _keys938[_ind938]; var group = _col938[id];
        // item 949
        branching = context.subtrees[id]
        // item 940
        if (group.length > 1) {
            // item 943
            branching -= (group.length - 1)
            // item 963
            context.subtrees[id] = branching
        }
        // item 9380003
        _ind938++;
    }
    // item 14310001
    var _ind1431 = 0;
    var _col1431 = grouped;
    var _keys1431 = Object.keys(_col1431); 
    var _len1431 = _keys1431.length;
    while (true) {
        // item 14310002
        if (_ind1431 < _len1431) {
            
        } else {
            break;
        }
        // item 14310004
        var id = _keys1431[_ind1431]; var group = _col1431[id];
        // item 1437
        branching = context.subtrees[id]
        // item 1439
        if ((branching <= 0) && (!(isLoop(context, id)))) {
            // item 1442
            gitem = context.items[id]
            parentLoop = gitem.parentLoop
            // item 1443
            if (parentLoop) {
                // item 1748
                loop = parentLoop.id
                // item 1444
                if ((context.subtrees[loop] === 0) && (!(parentLoop === item.parentLoop))) {
                    // item 1441
                    exits[loop] = true
                }
            }
        }
        // item 14310003
        _ind1431++;
    }
    // item 13640001
    var _ind1364 = 0;
    var _col1364 = grouped;
    var _keys1364 = Object.keys(_col1364); 
    var _len1364 = _keys1364.length;
    while (true) {
        // item 13640002
        if (_ind1364 < _len1364) {
            
        } else {
            break;
        }
        // item 13640004
        var id = _keys1364[_ind1364]; var group = _col1364[id];
        // item 1365
        branching = context.subtrees[id]
        // item 1371
        if (branching <= 0) {
            // item 1417
            if (isLoop(context, id)) {
                // item 1419
                if (exits[id]) {
                    
                } else {
                    // item 1375
                    p2.push(id)
                }
            } else {
                // item 1372
                gitem = context.items[id]
                parentLoop = gitem.parentLoop
                // item 1904
                if (isHierarchyBroken(gitem, item)) {
                    
                } else {
                    // item 1413
                    if (parentLoop) {
                        // item 1749
                        loop = parentLoop.id
                        // item 1373
                        if (exits[loop]) {
                            // item 1370
                            item.ends.push(id)
                            item.ends.push(loop)
                            item.loops[loop] = true
                        } else {
                            // item 1425
                            if (group.length > 1) {
                                // item 1412
                                item.ends.push(id)
                            } else {
                                // item 1427
                                p2.push(id)
                            }
                        }
                    } else {
                        // item 1425
                        if (group.length > 1) {
                            // item 1412
                            item.ends.push(id)
                        } else {
                            // item 1427
                            p2.push(id)
                        }
                    }
                }
            }
        } else {
            // item 1375
            p2.push(id)
        }
        // item 13640003
        _ind1364++;
    }
    // item 1305
    item.dangling = p2
}

function buildScenario(build, diagram) {
    var args, branches, ctr, first, loop, machine, run, sw, text
    // item 2516
    branches = diagram.work.branches
    // item 2765
    run = createFunction(
        runName(diagram),
        ["self"],
        {}
    )
    // item 2513
    if (branches.length === 0) {
        // item 2785
        text = "sm.sendMessage(self.parent, \"" +
          completeMethod + "\", undefined);"
        // item 2786
        addLine(run.body, text)
    } else {
        // item 2517
        first = branches[0].item.one
        // item 2777
        addLine(run.body, "var work = true;")
        // item 2783
        loop = createWhile("work")
        run.body.items.push(loop)
        // item 2778
        sw = createSwitch("self.state")
        sw.defReturn = true
        loop.body.items.push(sw)
        // item 2773
        machine = {
            build : build,
            diagram : diagram,
            sw : sw,
            visited : {},
            awaits : {}
        }
        // item 2519
        addScenarioStep(
            machine,
            first
        )
    }
    // item 2787
    args = _.clone(diagram.work.args)
    // item 2788
    args.unshift("parent")
    // item 2790
    ctr = createFunction(
        diagram.name,
        args,
        {}
    )
    // item 2789
    addLine(ctr.body, "var self = sm.createMachine(\"" + 
      diagram.name + "\");")
    // item 28000001
    var _ind2800 = 0;
    var _col2800 = diagram.work.args;
    var _len2800 = _col2800.length;
    while (true) {
        // item 28000002
        if (_ind2800 < _len2800) {
            
        } else {
            break;
        }
        // item 28000004
        var arg = _col2800[_ind2800];
        // item 2802
        addLine(ctr.body, "self." + arg +
         " = " + arg + ";")
        // item 28000003
        _ind2800++;
    }
    // item 28330001
    var _ind2833 = 0;
    var _col2833 = machine.awaits;
    var _keys2833 = Object.keys(_col2833); 
    var _len2833 = _keys2833.length;
    while (true) {
        // item 28330002
        if (_ind2833 < _len2833) {
            
        } else {
            break;
        }
        // item 28330004
        var aname = _keys2833[_ind2833]; var avalue = _col2833[aname];
        // item 2835
        addLine(ctr.body, "sm.addMethod(self, \"" + 
          aname + "\", " +
          awaitName(diagram, aname) + ");")
        // item 28330003
        _ind2833++;
    }
    // item 2799
    addLine(ctr.body, "sm.addChild(parent, self);")
    // item 2792
    addLine(ctr.body, "sm.addMethod(self, \"run\", " +
      runName(diagram) + ");")
    // item 2793
    if (first === undefined) {
        // item 2797
        addLine(ctr.body, "self.state = \"" +
           "created\";")
    } else {
        // item 2796
        addLine(ctr.body, "self.state = \"" +
           first.id + "\";")
    }
    // item 2791
    addLine(ctr.body, "return self;")
    // item 28470001
    var _ind2847 = 0;
    var _col2847 = machine.awaits;
    var _keys2847 = Object.keys(_col2847); 
    var _len2847 = _keys2847.length;
    while (true) {
        // item 28470002
        if (_ind2847 < _len2847) {
            
        } else {
            break;
        }
        // item 28470004
        var aname = _keys2847[_ind2847]; var avalue = _col2847[aname];
        // item 2849
        buildAwait(
            build,
            diagram,
            aname,
            avalue
        )
        // item 28470003
        _ind2847++;
    }
    // item 2932
    diagram.output = {
        flags : diagram.work.flags
    }
    // item 2766
    printNode(
        run,
        0,
        build.lines
    )
    // item 2798
    printNode(
        ctr,
        0,
        build.lines
    )
}

function buildVariableList(work) {
    // item 558
    work.vars = _.difference(
    	Object.keys(work.assigned),
    	Object.keys(work.declared)
    )
    // item 583
    work.vars.sort()
}

function canShortCircuit(item) {
    // item 222
    if (((item) && (item.type === "question")) && (item.prev.length === 1)) {
        // item 226
        return true
    } else {
        // item 227
        return false
    }
}

function checkEnd(build, diagram) {
    // item 20670001
    var _ind2067 = 0;
    var _col2067 = diagram.work.items;
    var _keys2067 = Object.keys(_col2067); 
    var _len2067 = _keys2067.length;
    while (true) {
        // item 20670002
        if (_ind2067 < _len2067) {
            
        } else {
            // item 2072
            addDiagramError(
                build,
                diagram,
                "BUILD_NO_END"
            )
            break;
        }
        // item 20670004
        var id = _keys2067[_ind2067]; var item = _col2067[id];
        // item 2069
        if (item.type === "end") {
            break;
        }
        // item 20670003
        _ind2067++;
    }
}

function checkOrphaneBranches(build, diagram) {
    var branchItem, branches, count, i, input, referenced, work
    // item 2092
    work = diagram.work
    input = diagram.input
    branches = work.branches
    // item 2097
    referenced = {}
    // item 20950001
    var _ind2095 = 0;
    var _col2095 = input.items;
    var _keys2095 = Object.keys(_col2095); 
    var _len2095 = _keys2095.length;
    while (true) {
        // item 20950002
        if (_ind2095 < _len2095) {
            
        } else {
            break;
        }
        // item 20950004
        var id = _keys2095[_ind2095]; var item = _col2095[id];
        // item 2098
        if (item.one) {
            // item 2102
            referenced[item.one] = true
            // item 2101
            if (item.two) {
                // item 2103
                referenced[item.two] = true
            }
        }
        // item 20950003
        _ind2095++;
    }
    // item 2105
    count = branches.length
    // item 21040001
    i = 1;
    while (true) {
        // item 21040002
        if (i < count) {
            
        } else {
            break;
        }
        // item 2107
        branchItem = branches[i].item
        // item 2108
        if (branchItem.id in referenced) {
            
        } else {
            // item 2111
            addItemError(
                build,
                diagram,
                branchItem.id,
                "BUILD_BRANCH_NOT_REFERENCED"
            )
        }
        // item 21040003
        i++;
    }
}

function checkUniqueNames(build) {
    // item 2177
    var grouped = _.groupBy(
        build.diagrams,
        "name"
    )
    // item 21780001
    var _ind2178 = 0;
    var _col2178 = grouped;
    var _keys2178 = Object.keys(_col2178); 
    var _len2178 = _keys2178.length;
    while (true) {
        // item 21780002
        if (_ind2178 < _len2178) {
            
        } else {
            break;
        }
        // item 21780004
        var name = _keys2178[_ind2178]; var group = _col2178[name];
        // item 2180
        if (group.length > 1) {
            // item 2183
            addDiagramError(
                build,
                group[0],
                "BUILD_DIAGRAM_NAME_NOT_UNIQUE"
            )
        }
        // item 21780003
        _ind2178++;
    }
}

function chooseFlags(build, diagram, flags) {
    var mformat, result
    // item 2268
    mformat = build.props.mformat
    // item 2238
    result = _.clone(flags)
    // item 2234
    if (("default" in flags) && (!(mformat === "MES_ES6"))) {
        // item 2239
        delete result["default"]
    }
    // item 2240
    if (("export" in flags) && (!(mformat === "MES_ES6"))) {
        // item 2244
        delete result["export"]
    }
    // item 2269
    return result
}

function completeBuild(build) {
    var _sw21960000_ = 0;
    // item 2208
    writeBlock(
        build,
        "footer"
    )
    // item 21960000
    _sw21960000_ = build.props.mformat;
    // item 21960001
    if (_sw21960000_ === "MES_IFFE") {
        // item 2224
        build.lines.push("})();\n")
    } else {
        // item 21960002
        if (_sw21960000_ === "MES_FUNCTION") {
            // item 2259
            completeFactory(build)
        } else {
            // item 21960003
            if (_sw21960000_ === "MES_COMMONJS") {
                // item 2280
                completeCommon(build)
            }
        }
    }
    // item 2195
    writeBlock(
        build,
        "basement"
    )
}

function completeCommon(build) {
    var addToModule, exported
    // item 2276
    exported = getExported(build)
    // item 2277
    addToModule = function(diagram) {
    	build.lines.push(
    		"module.exports." +
    		diagram.name + " = " + 
    		diagram.name + ";\n")
    }
    // item 2281
    build.lines.push("module.exports = {};\n")
    // item 2278
    exported.forEach(addToModule)
}

function completeFactory(build) {
    var addToModule, exported
    // item 2261
    exported = getExported(build)
    // item 2264
    addToModule = function(diagram) {
    	build.lines.push("module." + 
    		diagram.name + " = " + 
    		diagram.name + ";\n")
    }
    // item 2265
    exported.forEach(addToModule)
    // item 2266
    build.lines.push("return module;\n")
    // item 2260
    build.lines.push("}\n")
}

function completeLoop(item, context) {
    // item 11870001
    var _ind1187 = 0;
    var _col1187 = item.adangling;
    var _len1187 = _col1187.length;
    while (true) {
        // item 11870002
        if (_ind1187 < _len1187) {
            
        } else {
            break;
        }
        // item 11870004
        var id = _col1187[_ind1187];
        // item 1186
        context.subtrees[id]--
        // item 1285
        if (_.includes(item.dangling, id)) {
            
        } else {
            // item 1288
            item.ends.push(id)
        }
        // item 11870003
        _ind1187++;
    }
}

function connectItem(work, item, visited) {
    // item 105
    if (item.id in visited) {
        
    } else {
        // item 104
        visited[item.id] = true
        // item 118
        item.one = connectItemLink(
            work,
            item,
            item.one,
            visited
        )
        // item 119
        item.two = connectItemLink(
            work,
            item,
            item.two,
            visited
        )
    }
}

function connectItemLink(work, item, nextId, visited) {
    var address, next
    var _sw1240000_ = 0;
    // item 348
    if (nextId) {
        // item 123
        next = work.items[nextId]
        // item 1240000
        _sw1240000_ = next.type;
        // item 1240001
        if (_sw1240000_ === "end") {
            // item 352
            next.prev.push(item)
            // item 190
            return next
        } else {
            // item 1240002
            if (_sw1240000_ === "branch") {
                // item 2142
                address = createItem(
                    work,
                    undefined,
                    "address",
                    next.text
                )
                // item 353
                address.branchId = next.branchId
                address.prev.push(item)
                // item 246
                return address
            } else {
                // item 1240003
                if ((_sw1240000_ === "arrow-loop") && (isBefore(next, item))) {
                    // item 136
                    next.aprev.push(item)
                } else {
                    // item 133
                    next.prev.push(item)
                    // item 134
                    connectItem(
                        work,
                        next,
                        visited
                    )
                }
                // item 192
                return next
            }
        }
    } else {
        // item 351
        return undefined
    }
}

function convergeWithParent(item, loop) {
    while (true) {
        // item 1735
        loop = loop.parentLoop
        // item 1736
        if (loop) {
            
        } else {
            // item 1739
            return false
        }
        // item 1738
        if (loop.id in item.loops) {
            // item 1733
            return true
        }
    }
}

function copyItem(item) {
    var copy
    // item 94
    copy = _.clone(item)
    copy.prev = []
    copy.aprev = []
    copy.dangling = []
    copy.ends = []
    copy.closing = 0
    copy.adangling = []
    copy.aclosing = 0
    copy.loops = {}
    // item 93
    return copy
}

function countAsExit(item, context, paths) {
    // item 19580001
    var _ind1958 = 0;
    var _col1958 = paths;
    var _len1958 = _col1958.length;
    while (true) {
        // item 19580002
        if (_ind1958 < _len1958) {
            
        } else {
            break;
        }
        // item 19580004
        var id = _col1958[_ind1958];
        // item 1960
        if (_.includes(item.parentLoop.dangling, id)) {
            
        } else {
            // item 1957
            context.subtrees[id]--
        }
        // item 19580003
        _ind1958++;
    }
}

function createAddress(text) {
    // item 2150
    return {
        type : "address",
        text : text,
        print : printPrim
    }
}

function createBranchFunction(branchId, flags) {
    var flags2
    // item 2334
    flags2 = {}
    // item 2335
    if (flags["async"]) {
        // item 2338
        flags2["async"] = true
    }
    // item 2339
    return createFunction(
        "branch" + branchId,
        [],
        flags2
    )
}

function createBreak() {
    // item 1974
    return {
        type : "break",
        print : printBreak
    }
}

function createFunction(name, args, flags) {
    // item 975
    return {
        type : "function",
        name : name,
        args : _.clone(args),
        flags : _.clone(flags),
        body : createSeq(),
        print : printFunction
    }
}

function createIf(condition, flag1) {
    // item 986
    return {
        type : "if",
        condition : condition,
        flag1 : flag1,
        down : createSeq(),
        right : createSeq(),
        print : printIf
    }
}

function createItem(work, id, type, text) {
    var fields, item
    // item 2143
    if (id) {
        
    } else {
        // item 2146
        id = "_auto_" + work.nextId
        work.nextId++
    }
    // item 407
    fields = {
        id : id,
        type : type,
        text : text
    }
    // item 870
    item = copyItem(fields)
    // item 408
    work.items[id] = item
    // item 409
    return item
}

function createItemsMap(work) {
    var copy, map
    // item 1801
    map = {}
    // item 18030001
    var _ind1803 = 0;
    var _col1803 = work.items;
    var _keys1803 = Object.keys(_col1803); 
    var _len1803 = _keys1803.length;
    while (true) {
        // item 18030002
        if (_ind1803 < _len1803) {
            
        } else {
            break;
        }
        // item 18030004
        var id = _keys1803[_ind1803]; var item = _col1803[id];
        // item 1805
        copy = {
            id : id,
            type : item.type,
            loops : {}
        }
        // item 1806
        map[id] = copy
        // item 18030003
        _ind1803++;
    }
    // item 1802
    return map
}

function createPrim(text) {
    // item 992
    return {
        type : "prim",
        text : text,
        print : printPrim
    }
}

function createReturn() {
    // item 2469
    return createPrim("return;")
}

function createSeq() {
    // item 980
    return {
        type : "seq",
        items : [],
        print : printSeq
    }
}

function createStrings() {
    var strings
    // item 2288
    strings = {}
    // item 2287
    strings.BUILD_NO_END = "This diagram does not have an end"
    strings.BUILD_BRANCH_NOT_REFERENCED = "Branch is not referenced"
    strings.BUILD_DIAGRAM_NAME_NOT_UNIQUE = "Diagram name is not unique"
    strings.BUILD_NO_VAR = "\"var\" keyword is not allowed in DRAKON diagrams"
    strings.BUILD_NO_CONST = "\"const\" keyword is not allowed. Declaration of variables is automatic in a DRAKON diagram"
    strings.BUILD_NO_LET = "\"let\" keyword is not allowed. Declaration of variables is automatic in a DRAKON diagram"
    strings.BUILD_BAD_DECLARATION = "Unsupported declaration"
    strings.BUILD_BAD_LOOP = "Error in the loop statement"
    strings.BUILD_EXPRESSION_EXPECTED = "Expression expected"
    strings.BUILD_BAD_FLAG = "Unsupported keyword"
    strings.BUILD_ONE_EXPRESSION_EXPECTED = "One expression expected"
    strings.BUILD_ASSIGNMENT_NOT_ALLOWED = "Assignment is not allowed here"
    strings.BUILD_BAD_LOOP_VARIABLE = "This loop variable is declared or assigned elsewhere"
    strings.BUILD_EMPTY_CASE_NOT_LAST = "Only last Case icon can be empty"
    strings.BUILD_NO_VAR_SCEN = "Local variables are not allowed in scenarios"
    // item 2902
    strings.BUILD_EMPTY_INSERTION = "An insertion icon cannot be empty. Add a function call expression " +
     "and an optional assignment"
    // item 2903
    strings.BUILD_ERROR_INSERTION = "Error in the insertion icon. Expected a function call expression " +
     "and an optional assignment"
    // item 2472
    strings.BUILD_EXIT_FROM_NESTED = "Exit from a nested loop is not supported"
    // item 2289
    return strings
}

function createSwitch(condition) {
    // item 2733
    return {
        type : "switch",
        condition : condition,
        cases : [],
        print : printSwitch
    }
}

function createWhile(condition) {
    // item 1214
    return {
        type : "while",
        body : createSeq(),
        print : printWhile,
        condition : condition || "true"
    }
}

function cutOffComment(text) {
    var index
    // item 637
    index = text.indexOf("//")
    // item 638
    if (index === -1) {
        // item 641
        return text.trim()
    } else {
        // item 642
        return text.substring(0, index).trim()
    }
}

function equal(varName, value) {
    // item 385
    return varName + " === " + value
}

function extractAssignment(build, diagram, item, expression) {
    var work
    // item 538
    if (expression.left.type === "Identifier") {
        // item 2486
        if (isScenario(diagram)) {
            // item 2488
            addItemError(
            	build,
            	diagram,
            	item.id,
            	"BUILD_NO_VAR_SCEN"
            )
        } else {
            // item 2489
            work = diagram.work
            // item 541
            work.assigned[expression.left.name] = true
        }
    }
}

function extractDeclarators(build, diagram, item, statement) {
    var forbidVar, work
    var _sw20130000_ = 0;
    // item 2025
    work = diagram.work
    forbidVar = work.branches.length > 1
    // item 2483
    if (isScenario(diagram)) {
        // item 2485
        addItemError(
        	build,
        	diagram,
        	item.id,
        	"BUILD_NO_VAR_SCEN"
        )
    } else {
        // item 20130000
        _sw20130000_ = statement.kind;
        // item 20130001
        if (_sw20130000_ === "var") {
            // item 2117
            if ((forbidVar) || (globalForbidVar)) {
                // item 2119
                addItemError(
                	build,
                	diagram,
                	item.id,
                	"BUILD_NO_VAR"
                )
            } else {
                // item 5250001
                var _ind525 = 0;
                var _col525 = statement.declarations;
                var _len525 = _col525.length;
                while (true) {
                    // item 5250002
                    if (_ind525 < _len525) {
                        
                    } else {
                        break;
                    }
                    // item 5250004
                    var dec = _col525[_ind525];
                    // item 527
                    if (((dec.type === "VariableDeclarator") && (dec.id)) && (dec.id.name)) {
                        // item 530
                        work.declared[dec.id.name] = true
                    }
                    // item 5250003
                    _ind525++;
                }
            }
        } else {
            // item 20130002
            if (_sw20130000_ === "const") {
                // item 2022
                addItemError(
                	build,
                	diagram,
                	item.id,
                	"BUILD_NO_CONST"
                )
            } else {
                // item 20130003
                if (_sw20130000_ === "let") {
                    // item 2023
                    addItemError(
                    	build,
                    	diagram,
                    	item.id,
                    	"BUILD_NO_LET"
                    )
                } else {
                    // item 2024
                    addItemError(
                    	build,
                    	diagram,
                    	item.id,
                    	"BUILD_BAD_DECLARATION"
                    )
                }
            }
        }
    }
}

function filterLoopLoops(map) {
    var result
    // item 1853
    result = {}
    // item 18470001
    var _ind1847 = 0;
    var _col1847 = map;
    var _keys1847 = Object.keys(_col1847); 
    var _len1847 = _keys1847.length;
    while (true) {
        // item 18470002
        if (_ind1847 < _len1847) {
            
        } else {
            break;
        }
        // item 18470004
        var id = _keys1847[_ind1847]; var item = _col1847[id];
        // item 1849
        if (item.type === "arrow-loop") {
            // item 1852
            result[id] = Object.keys(item.loops).length
        }
        // item 18470003
        _ind1847++;
    }
    // item 1854
    return result
}

function findBlockEnds(prev, item, paths, context) {
    var p2
    var _sw9190000_ = 0;
    // item 936
    Object.freeze(paths)
    // item 907
    if (item) {
        // item 1160
        if (isArrow(prev, item)) {
            // item 1175
            item.adangling = paths.concat(
                item.adangling
            )
            // item 1174
            item.aclosing++
            // item 1176
            if (item.aclosing === item.aprev.length) {
                // item 1177
                completeLoop(
                    item,
                    context
                )
            }
        } else {
            // item 1964
            if (isHierarchyBroken(prev, item)) {
                // item 1963
                countAsExit(
                    prev,
                    context,
                    paths
                )
                // item 2413
                addBroken(prev, item)
                // item 2473
                addDiagramError(
                    context.build,
                    context.diagram,
                    globals.strings.BUILD_EXIT_FROM_NESTED
                )
            }
            // item 916
            item.dangling = paths.concat(
                item.dangling
            )
            // item 915
            item.closing++
            // item 917
            if (item.closing === item.prev.length) {
                // item 918
                buildEnds(
                    item,
                    context
                )
                // item 1208
                p2 = item.dangling
                // item 9190000
                _sw9190000_ = item.type;
                // item 9190001
                if (_sw9190000_ === "question") {
                    // item 9590001
                    var _ind959 = 0;
                    var _col959 = p2;
                    var _len959 = _col959.length;
                    while (true) {
                        // item 9590002
                        if (_ind959 < _len959) {
                            
                        } else {
                            break;
                        }
                        // item 9590004
                        var id = _col959[_ind959];
                        // item 961
                        context.subtrees[id]++
                        // item 9590003
                        _ind959++;
                    }
                    // item 928
                    p2 = pushBack(p2, item.id)
                    // item 930
                    context.subtrees[item.id] = 1
                } else {
                    // item 9190002
                    if (_sw9190000_ === "arrow-loop") {
                        // item 1715
                        p2 = pushBack(p2, item.id)
                        // item 1290
                        context.subtrees[item.id] = 0
                    }
                }
                // item 913
                findBlockEnds(
                    item,
                    item.two,
                    p2,
                    context
                )
                // item 914
                findBlockEnds(
                    item,
                    item.one,
                    p2,
                    context
                )
            }
        }
    }
}

function findBreakouts(work) {
    // item 19280001
    var _ind1928 = 0;
    var _col1928 = work.items;
    var _keys1928 = Object.keys(_col1928); 
    var _len1928 = _keys1928.length;
    while (true) {
        // item 19280002
        if (_ind1928 < _len1928) {
            
        } else {
            break;
        }
        // item 19280004
        var id = _keys1928[_ind1928]; var item = _col1928[id];
        // item 1934
        if ((item.parentLoop) && (!(item.type === "arrow-loop"))) {
            // item 1948
            tryBreakout(item, item.one)
            // item 1949
            tryBreakout(item, item.two)
        }
        // item 19280003
        _ind1928++;
    }
}

function findEnd(node) {
    var count
    var _sw15290000_ = 0;
    // item 1525
    count = 0
    while (true) {
        // item 15290000
        _sw15290000_ = node.type;
        // item 15290001
        if (_sw15290000_ === "loopbegin") {
            // item 1537
            count++
        } else {
            // item 15290002
            if (_sw15290000_ === "loopend") {
                // item 1538
                count--
            }
        }
        // item 1526
        if (count === 0) {
            break;
        }
        // item 1540
        node = node.one
    }
    // item 1528
    return node
}

function findParentLoops(work) {
    var hierarchy, map
    // item 1792
    map = createItemsMap(work)
    // item 1793
    bindItemsToLoops(
        work,
        map
    )
    // item 1889
    hierarchy = filterLoopLoops(map)
    // item 1794
    setClosestParentLoops(
        work,
        map,
        hierarchy
    )
}

function findVariables(build, diagram, item, statements) {
    var _sw23480000_ = 0;
    // item 23450001
    var _ind2345 = 0;
    var _col2345 = statements;
    var _len2345 = _col2345.length;
    while (true) {
        // item 23450002
        if (_ind2345 < _len2345) {
            
        } else {
            break;
        }
        // item 23450004
        var statement = _col2345[_ind2345];
        // item 23480000
        _sw23480000_ = statement.type;
        // item 23480001
        if (_sw23480000_ === "VariableDeclaration") {
            // item 2355
            extractDeclarators(
                build,
                diagram,
                item,
                statement
            )
        } else {
            // item 23480002
            if (_sw23480000_ === "ExpressionStatement") {
                // item 2356
                if (statement.expression.type === "AssignmentExpression") {
                    // item 2358
                    extractAssignment(
                        build,
                        diagram,
                        item,
                        statement.expression
                    )
                }
            } else {
                // item 23480003
                if (_sw23480000_ === "TryStatement") {
                    // item 2362
                    findVariables(
                        build,
                        diagram,
                        item,
                        statement.block.body
                    )
                    // item 2363
                    if ((statement.handler) && (statement.handler.body.body)) {
                        // item 2366
                        findVariables(
                            build,
                            diagram,
                            item,
                            statement.handler.body.body
                        )
                    }
                }
            }
        }
        // item 23450003
        _ind2345++;
    }
}

function getBody(item) {
    // item 1989
    return item.script.body[0].body.body
}

function getBranchById(machine, branchId) {
    // item 29480001
    var _ind2948 = 0;
    var _col2948 = machine.diagram.work.branches;
    var _len2948 = _col2948.length;
    while (true) {
        // item 29480002
        if (_ind2948 < _len2948) {
            
        } else {
            // item 2950
            throw new Error("Branch not found: " + branchId)
        }
        // item 29480004
        var branch = _col2948[_ind2948];
        // item 2951
        if (branch.branchId === branchId) {
            // item 2954
            return branch.item
        }
        // item 29480003
        _ind2948++;
    }
}

function getCreateArray(dict, key) {
    var array
    // item 2815
    if (key in dict) {
        // item 2818
        return dict[key]
    } else {
        // item 2819
        array = []
        dict[key] = array
        // item 2820
        return array
    }
}

function getCurrentLoop(context, loops) {
    var id
    // item 1755
    id = loops[loops.length - 1]
    // item 1756
    if (id) {
        // item 1759
        return context.items[id]
    } else {
        // item 1760
        return undefined
    }
}

function getExported(build) {
    var isExported
    // item 2252
    isExported = function(diagram) {
        return "export" in diagram.output.flags
    }
    // item 2253
    return build.diagrams.filter(isExported)
}

function getLast(array) {
    // item 2169
    return array[array.length - 1]
}

function getOneBroken(item, broken) {
    // item 2432
    if ((broken) || (item.oneBroken)) {
        // item 2435
        return true
    } else {
        // item 2439
        return false
    }
}

function getParentLoop(id, map, hierarchy) {
    var byCount, loops, loopsIds
    // item 1895
    loops = map[id].loops
    // item 1896
    byCount = function(loopId) {
        return hierarchy[loopId]
    }
    // item 1898
    loopsIds = Object.keys(loops)
    // item 1897
    return _.maxBy(loopsIds, byCount)
}

function getSelectVar(item) {
    var varName
    // item 2313
    varName = "_sw_" + item.id
    // item 2314
    return varName
}

function getTwoBroken(item, broken) {
    // item 2445
    if ((broken) || (item.twoBroken)) {
        // item 2448
        return true
    } else {
        // item 2452
        return false
    }
}

function hasReturn(seq) {
    var body, item, last
    // item 1996
    if (seq.items.length === 0) {
        // item 2000
        return false
    } else {
        // item 2006
        item = seq.items[seq.items.length - 1]
        // item 2005
        if (item.script) {
            // item 1995
            body = getBody(item)
            // item 1999
            if (body.length === 0) {
                // item 2000
                return false
            } else {
                // item 2002
                last = body[body.length - 1]
                // item 2003
                if ((last.type === "ReturnStatement") || (last.type === "ThrowStatement")) {
                    // item 2001
                    return true
                } else {
                    // item 2000
                    return false
                }
            }
        } else {
            // item 2000
            return false
        }
    }
}

function init() {
    // item 2294
    globals.strings = createStrings()
}

function insertAfter(work, before, id, type, two) {
    var item, next
    // item 1553
    if (two) {
        // item 1556
        next = before.two
    } else {
        // item 1551
        next = before.one
    }
    // item 1546
    item = createItem(
        work,
        id,
        type,
        ""
    )
    // item 1547
    if (isArrow(before, next)) {
        // item 1550
        next.aprev = _.pull(next.aprev, before)
        next.aprev.push(item)
    } else {
        // item 1552
        next.prev = _.pull(next.prev, before)
        next.prev.push(item)
    }
    // item 1558
    if (two) {
        // item 1561
        before.two = item
    } else {
        // item 1557
        before.one = item
    }
    // item 1562
    item.one = next
    item.prev.push(before)
    // item 1563
    return item
}

function isArrow(before, after) {
    // item 1168
    if (((after) && (after.type == "arrow-loop")) && (_.includes(after.aprev, before))) {
        // item 1172
        return true
    } else {
        // item 1173
        return false
    }
}

function isBefore(before, node) {
    while (true) {
        // item 143
        if (node === before) {
            // item 142
            return true
        }
        // item 146
        if (node.prev.length === 0) {
            // item 147
            return false
        }
        // item 149
        node = node.prev[0]
    }
}

function isHierarchyBroken(prev, next) {
    // item 1967
    if (((prev.type === "arrow-loop") || (prev.parentLoop == next.parentLoop)) || ((prev.parentLoop) && (prev.parentLoop.parentLoop === next.parentLoop))) {
        // item 1919
        return false
    } else {
        // item 1914
        return true
    }
}

function isLoop(context, id) {
    var item
    // item 1296
    item = context.items[id]
    // item 1297
    return item.type === "arrow-loop"
}

function isScenario(diagram) {
    var result
    // item 2490
    if (diagram.work.flags["scenario"]) {
        // item 2494
        result = true
    } else {
        // item 2493
        result = false
    }
    // item 2482
    return result
}

function ln(output, line) {
    // item 1023
    output.push(line)
}

function makeId(diagram) {
    // item 35
    return diagram.space_id + " " +
    	diagram.id
}

function makeIndent(depth) {
    // item 1121
    return _.repeat(INDENT, depth)
}

function normalizeQuestions(work) {
    var tmp
    // item 2520001
    var _ind252 = 0;
    var _col252 = work.items;
    var _keys252 = Object.keys(_col252); 
    var _len252 = _keys252.length;
    while (true) {
        // item 2520002
        if (_ind252 < _len252) {
            
        } else {
            break;
        }
        // item 2520004
        var id = _keys252[_ind252]; var item = _col252[id];
        // item 254
        if ((item.type === "question") && (!(item.flag1))) {
            // item 258
            tmp = item.one
            item.one = item.two
            item.two = tmp
            item.flag1 = 1
        }
        // item 2520003
        _ind252++;
    }
}

function not(value) {
    // item 185
    return "!(" + value + ")"
}

function notEmpty(text) {
    // item 648
    return text.length > 0
}

function or(left, right) {
    // item 179
    return "(" + left + ") || (" +
      right + ")"
}

function parseAction(build, diagram, item) {
    var script, work, wrapped
    // item 502
    work = diagram.work
    // item 499
    if (item.text) {
        // item 550
        wrapped = "async function foo() {" +
        	item.text + "}"
        // item 503
        try {
        	script = esprima.parseScript(
        		wrapped
        	)
        } catch (e) {
        	addItemError(
        		build,
        		diagram,
        		item.id,
        		e.description
        	)
        	return
        }
        // item 1983
        item.script = script
        // item 2359
        findVariables(
            build,
            diagram,
            item,
            getBody(item)
        )
    }
}

function parseForLoop(build, diagram, item, one) {
    var semi1, semi2, text, varName, work
    var _sw8110000_ = 0;
    // item 864
    work = diagram.work
    // item 8110000
    _sw8110000_ = one.type;
    // item 8110001
    if (_sw8110000_ === "VariableDeclaration") {
        // item 818
        varName = one.declarations[0].id.name
        // item 825
        work.declared[varName] = true
        // item 863
        text = item.text
        // item 856
        semi1 = text.indexOf(";")
        // item 857
        if (semi1 === -1) {
            // item 810
            addItemError(
            	build,
            	diagram,
            	item.id,
            	"BUILD_BAD_LOOP"
            )
        } else {
            // item 860
            semi2 = text.indexOf(
                ";",
                semi1 + 1
            )
            // item 862
            if (semi2 === -2) {
                // item 810
                addItemError(
                	build,
                	diagram,
                	item.id,
                	"BUILD_BAD_LOOP"
                )
            } else {
                // item 861
                item.loopInfo = {
                    type : "for",
                    one : text.substring(0, semi1).trim(),
                    two : text.substring(semi1 + 1, semi2).trim(),
                    three : text.substring(semi2 + 1).trim()
                }
            }
        }
    } else {
        // item 8110002
        if (((_sw8110000_ === "ExpressionStatement") && (one.expression.type == "AssignmentExpression")) && (one.expression.left.type == "Identifier")) {
            // item 819
            varName = one.expression.left.name
            // item 824
            work.assigned[varName] = true
            // item 863
            text = item.text
            // item 856
            semi1 = text.indexOf(";")
            // item 857
            if (semi1 === -1) {
                // item 810
                addItemError(
                	build,
                	diagram,
                	item.id,
                	"BUILD_BAD_LOOP"
                )
            } else {
                // item 860
                semi2 = text.indexOf(
                    ";",
                    semi1 + 1
                )
                // item 862
                if (semi2 === -2) {
                    // item 810
                    addItemError(
                    	build,
                    	diagram,
                    	item.id,
                    	"BUILD_BAD_LOOP"
                    )
                } else {
                    // item 861
                    item.loopInfo = {
                        type : "for",
                        one : text.substring(0, semi1).trim(),
                        two : text.substring(semi1 + 1, semi2).trim(),
                        three : text.substring(semi2 + 1).trim()
                    }
                }
            }
        } else {
            // item 810
            addItemError(
            	build,
            	diagram,
            	item.id,
            	"BUILD_BAD_LOOP"
            )
        }
    }
}

function parseForeachLoop(build, diagram, item, it, collection) {
    var exp, exp1, exp2, key, loopInfo, message, semiIndex, value
    var _sw7540000_ = 0;
    // item 749
    if ((it.type === "ExpressionStatement") && (collection.type === "ExpressionStatement")) {
        // item 766
        exp = it.expression
        // item 7540000
        _sw7540000_ = exp.type;
        // item 7540001
        if (_sw7540000_ === "Identifier") {
            // item 743
            key = undefined
            value = it.expression.name
            // item 769
            semiIndex = item.text.indexOf(";")
            // item 770
            if (semiIndex === -1) {
                // item 751
                addItemError(
                	build,
                	diagram,
                	item.id,
                	"BUILD_BAD_LOOP"
                )
            } else {
                // item 849
                if ((key) && (!(registerVarLoop(diagram, key)))) {
                    // item 793
                    message = translate(
                        build,
                        "BUILD_BAD_LOOP_VARIABLE"
                    )
                    // item 792
                    addItemError(
                    	build,
                    	diagram,
                    	item.id,
                    	message + ": " + key
                    )
                } else {
                    // item 853
                    if (registerVarLoop(diagram, value)) {
                        // item 786
                        loopInfo = {
                            type : "foreach",
                            key : key,
                            value : value
                        }
                        // item 785
                        loopInfo.collection = item.text.substring(
                        	semiIndex + 1
                        ).trim()
                        // item 787
                        item.loopInfo = loopInfo
                    } else {
                        // item 789
                        message = translate(
                            build,
                            "BUILD_BAD_LOOP_VARIABLE"
                        )
                        // item 784
                        addItemError(
                        	build,
                        	diagram,
                        	item.id,
                        	message + ": " + value
                        )
                    }
                }
            }
        } else {
            // item 7540002
            if ((_sw7540000_ === "SequenceExpression") && (exp.expressions.length === 2)) {
                // item 765
                exp1 = exp.expressions[0]
                exp2 = exp.expressions[1]
                // item 767
                if ((exp1.type === "Identifier") && (exp2.type === "Identifier")) {
                    // item 764
                    key = exp1.name
                    value = exp2.name
                    // item 769
                    semiIndex = item.text.indexOf(";")
                    // item 770
                    if (semiIndex === -1) {
                        // item 751
                        addItemError(
                        	build,
                        	diagram,
                        	item.id,
                        	"BUILD_BAD_LOOP"
                        )
                    } else {
                        // item 849
                        if ((key) && (!(registerVarLoop(diagram, key)))) {
                            // item 793
                            message = translate(
                                build,
                                "BUILD_BAD_LOOP_VARIABLE"
                            )
                            // item 792
                            addItemError(
                            	build,
                            	diagram,
                            	item.id,
                            	message + ": " + key
                            )
                        } else {
                            // item 853
                            if (registerVarLoop(diagram, value)) {
                                // item 786
                                loopInfo = {
                                    type : "foreach",
                                    key : key,
                                    value : value
                                }
                                // item 785
                                loopInfo.collection = item.text.substring(
                                	semiIndex + 1
                                ).trim()
                                // item 787
                                item.loopInfo = loopInfo
                            } else {
                                // item 789
                                message = translate(
                                    build,
                                    "BUILD_BAD_LOOP_VARIABLE"
                                )
                                // item 784
                                addItemError(
                                	build,
                                	diagram,
                                	item.id,
                                	message + ": " + value
                                )
                            }
                        }
                    }
                } else {
                    // item 751
                    addItemError(
                    	build,
                    	diagram,
                    	item.id,
                    	"BUILD_BAD_LOOP"
                    )
                }
            } else {
                // item 751
                addItemError(
                	build,
                	diagram,
                	item.id,
                	"BUILD_BAD_LOOP"
                )
            }
        }
    } else {
        // item 751
        addItemError(
        	build,
        	diagram,
        	item.id,
        	"BUILD_BAD_LOOP"
        )
    }
}

function parseItems(build, diagram) {
    var work
    var _sw4710000_ = 0;
    // item 470
    work = diagram.work
    work.assigned = {}
    work.declared = {}
    work.loopVars = {}
    // item 2979
    parseParams(
        build,
        diagram
    )
    // item 2978
    rewireSelects(build, diagram)
    // item 4680001
    var _ind468 = 0;
    var _col468 = work.items;
    var _keys468 = Object.keys(_col468); 
    var _len468 = _keys468.length;
    while (true) {
        // item 4680002
        if (_ind468 < _len468) {
            
        } else {
            break;
        }
        // item 4680004
        var id = _keys468[_ind468]; var item = _col468[id];
        // item 4710000
        _sw4710000_ = item.type;
        // item 4710001
        if ((_sw4710000_ === "action") || (_sw4710000_ === "insertion")) {
            // item 481
            parseAction(
                build,
                diagram,
                item
            )
        } else {
            // item 4710003
            if (_sw4710000_ === "question") {
                // item 482
                parseQuestion(
                    build,
                    diagram,
                    item
                )
            }
        }
        // item 4680003
        _ind468++;
    }
    // item 5940001
    var _ind594 = 0;
    var _col594 = work.items;
    var _keys594 = Object.keys(_col594); 
    var _len594 = _keys594.length;
    while (true) {
        // item 5940002
        if (_ind594 < _len594) {
            
        } else {
            break;
        }
        // item 5940004
        var id = _keys594[_ind594]; var item = _col594[id];
        // item 596
        if (item.type === "loopbegin") {
            // item 593
            parseLoop(
                build,
                diagram,
                item
            )
        }
        // item 5940003
        _ind594++;
    }
    // item 14490001
    var _ind1449 = 0;
    var _col1449 = work.items;
    var _keys1449 = Object.keys(_col1449); 
    var _len1449 = _keys1449.length;
    while (true) {
        // item 14490002
        if (_ind1449 < _len1449) {
            
        } else {
            break;
        }
        // item 14490004
        var id = _keys1449[_ind1449]; var item = _col1449[id];
        // item 1451
        if ((item.type === "loopbegin") && (item.loopInfo)) {
            // item 1459
            if (item.loopInfo.type == "foreach") {
                // item 1658
                if (item.loopInfo.key) {
                    // item 1448
                    rewireForeachMap(
                        diagram,
                        item
                    )
                } else {
                    // item 1657
                    rewireForeachArray(
                        diagram,
                        item
                    )
                }
            } else {
                // item 1685
                rewireFor(
                    diagram,
                    item
                )
            }
        }
        // item 14490003
        _ind1449++;
    }
    // item 16900001
    var _ind1690 = 0;
    var _col1690 = work.items;
    var _keys1690 = Object.keys(_col1690); 
    var _len1690 = _keys1690.length;
    while (true) {
        // item 16900002
        if (_ind1690 < _len1690) {
            
        } else {
            break;
        }
        // item 16900004
        var id = _keys1690[_ind1690]; var item = _col1690[id];
        // item 1692
        if (item.type === "arrow-loop") {
            // item 1695
            addFakeLoopEnd(
                diagram,
                item
            )
        }
        // item 16900003
        _ind1690++;
    }
    // item 557
    buildVariableList(work)
}

function parseLoop(build, diagram, item) {
    var text
    var _sw7050000_ = 0;
    // item 697
    text = (item.text || "").trim()
    // item 695
    if (text) {
        // item 701
        var script
        // item 700
        try {
        	script = esprima.parseScript(
        		text
        	)
        } catch (e) {
        	addItemError(
        		build,
        		diagram,
        		item.id,
        		e.description
        	)
        	return
        }
        // item 7050000
        _sw7050000_ = script.body.length;
        // item 7050001
        if (_sw7050000_ === 2) {
            // item 712
            parseForeachLoop(
                build,
                diagram,
                item,
                script.body[0],
                script.body[1]
            )
        } else {
            // item 7050002
            if (_sw7050000_ === 3) {
                // item 713
                parseForLoop(
                    build,
                    diagram,
                    item,
                    script.body[0]
                )
            } else {
                // item 704
                addItemError(
                	build,
                	diagram,
                	item.id,
                	"BUILD_BAD_LOOP"
                )
            }
        }
    } else {
        // item 696
        addItemError(
        	build,
        	diagram,
        	item.id,
        	"BUILD_EXPRESSION_EXPECTED"
        )
    }
}

function parseParamLine(line) {
    var noComment, parts, trimmed
    // item 659
    noComment = cutOffComment(line)
    // item 660
    parts = noComment.split(" ")
    // item 661
    trimmed = parts.map(
    	function(part) {
    		return part.trim()
    	}
    )
    // item 662
    return trimmed.filter(
        notEmpty
    )
}

function parseParams(build, diagram) {
    var allElements, allowed, arg, elements, keywords, lines, params, used, work
    // item 625
    work = diagram.work
    work.flags = {}
    work.args = []
    // item 628
    params = work.params || ""
    keywords = work.keywords || {}
    // item 631
    lines = params.split("\n")
    // item 649
    allElements = lines.map(
        parseParamLine
    )
    // item 650
    elements = allElements.filter(
        notEmpty
    )
    // item 652
    allowed = [
    	"async",
    	"default",
    	"export",
    	"scenario"
    ]
    // item 2367
    used = []
    // item 23680001
    var _ind2368 = 0;
    var _col2368 = allowed;
    var _len2368 = _col2368.length;
    while (true) {
        // item 23680002
        if (_ind2368 < _len2368) {
            
        } else {
            break;
        }
        // item 23680004
        var key = _col2368[_ind2368];
        // item 2370
        if (keywords[key]) {
            // item 2373
            used.push(key)
        }
        // item 23680003
        _ind2368++;
    }
    // item 6900001
    var _ind690 = 0;
    var _col690 = used;
    var _len690 = _col690.length;
    while (true) {
        // item 6900002
        if (_ind690 < _len690) {
            
        } else {
            break;
        }
        // item 6900004
        var key = _col690[_ind690];
        // item 692
        work.flags[key] = true
        // item 6900003
        _ind690++;
    }
    // item 6860001
    var _ind686 = 0;
    var _col686 = elements;
    var _len686 = _col686.length;
    while (true) {
        // item 6860002
        if (_ind686 < _len686) {
            
        } else {
            break;
        }
        // item 6860004
        var element = _col686[_ind686];
        // item 688
        arg = element.join(" ")
        // item 689
        work.args.push(arg)
        work.declared[arg] = true
        // item 6860003
        _ind686++;
    }
}

function parseQuestion(build, diagram, item) {
    var st, text
    // item 566
    text = (item.text || "").trim()
    // item 560
    if (text) {
        // item 567
        var script
        // item 562
        try {
        	script = esprima.parseScript(
        		text
        	)
        } catch (e) {
        	addItemError(
        		build,
        		diagram,
        		item.id,
        		e.description
        	)
        	return
        }
        // item 568
        if (script.body.length > 1) {
            // item 571
            addItemError(
            	build,
            	diagram,
            	item.id,
            	"BUILD_ONE_EXPRESSION_EXPECTED"
            )
        } else {
            // item 572
            st = script.body[0]
            // item 573
            if ((st.type === "ExpressionStatement") && (st.expression.type === "AssignmentExpression")) {
                // item 577
                addItemError(
                	build,
                	diagram,
                	item.id,
                	"BUILD_ASSIGNMENT_NOT_ALLOWED"
                )
            }
        }
    } else {
        // item 565
        addItemError(
        	build,
        	diagram,
        	item.id,
        	"BUILD_EXPRESSION_EXPECTED"
        )
    }
}

function prepareDiagram(build, diagram) {
    var branch, copy, input, visited, work
    var _sw750000_ = 0;
    // item 162
    diagram.work = {
        items : {},
        branches : [],
        params : diagram.params,
        keywords : diagram.keywords,
        nextId : 1
    }
    // item 73
    input = diagram.input
    work = diagram.work
    // item 710001
    var _ind71 = 0;
    var _col71 = input.items;
    var _len71 = _col71.length;
    while (true) {
        // item 710002
        if (_ind71 < _len71) {
            
        } else {
            break;
        }
        // item 710004
        var item = _col71[_ind71];
        // item 74
        copy = copyItem(item)
        // item 750000
        _sw750000_ = copy.type;
        // item 750001
        if (_sw750000_ === "branch") {
            // item 83
            branch = {
                item : copy,
                branchId : copy.branchId,
                uses : 0
            }
            // item 84
            work.branches.push(branch)
        }
        // item 86
        work.items[copy.id] = copy
        // item 710003
        _ind71++;
    }
    // item 87
    work.branches = _.sortBy(
        work.branches,
        "branchId"
    )
    // item 950001
    var _ind95 = 0;
    var _col95 = work.branches;
    var _len95 = _col95.length;
    while (true) {
        // item 950002
        if (_ind95 < _len95) {
            
        } else {
            break;
        }
        // item 950004
        var branch = _col95[_ind95];
        // item 97
        visited = {}
        // item 98
        connectItem(
            work,
            branch.item,
            visited
        )
        // item 950003
        _ind95++;
    }
    // item 579
    parseItems(build, diagram)
    while (true) {
        // item 152
        if (shortCircuit(work)) {
            
        } else {
            break;
        }
    }
    // item 259
    //normalizeQuestions(work)
}

function printBreak(node, depth, output) {
    var indent
    // item 1982
    indent = makeIndent(depth)
    // item 1981
    ln(output, indent + "break;")
}

function printDiagram(build, diagram) {
    // item 1039
    printNode(
        diagram.work.fun,
        0,
        build.lines
    )
}

function printFunction(node, depth, output) {
    var header, indent, keywords
    // item 1015
    indent = makeIndent(depth)
    keywords = ""
    // item 1038
    keywords = addFlag(node, "export", keywords)
    keywords = addFlag(node, "default", keywords)
    keywords = addFlag(node, "async", keywords)
    // item 1017
    header = indent + keywords + "function " +
    	node.name + "(" + node.args.join(", ") +
    	") {"
    // item 1016
    ln(output, header)
    // item 1098
    printSeq(
        node.body,
        depth + 1,
        output
    )
    // item 1024
    ln(output, indent + "}")
    ln(output, "")
}

function printIds(items, prop) {
    var content, getId
    // item 323
    getId = function(item) {
        return item.id
    }
    // item 324
    content = items.map(getId).join(",")
    // item 325
    if (content) {
        // item 328
        return " " + prop + ":" + content
    } else {
        // item 329
        return ""
    }
}

function printIf(node, depth, output) {
    var alt, header, indent, then
    // item 1141
    indent = makeIndent(depth)
    // item 1143
    header = indent + "if (" + node.condition  +
    	") {"
    // item 1142
    ln(output, header)
    // item 1278
    if (node.flag1) {
        // item 1281
        then = node.down
        alt = node.right
    } else {
        // item 1282
        then = node.right
        alt = node.down
    }
    // item 1146
    printSeq(
        then,
        depth + 1,
        output
    )
    // item 1148
    if (alt.items.length === 0) {
        
    } else {
        // item 1151
        ln(output, indent + "} else {")
        // item 1147
        printSeq(
            alt,
            depth + 1,
            output
        )
    }
    // item 1144
    ln(output, indent + "}")
}

function printNode(node, depth, output) {
    // item 1209
    node.print(
        node,
        depth,
        output
    )
}

function printPrepared(build, diagram) {
    var indent, line, work
    // item 335
    work = diagram.work
    indent = "    "
    // item 330
    build.lines.push("/*")
    build.lines.push(diagram.name)
    // item 542
    if (diagram.work.declared) {
        // item 545
        build.lines.push(
        	indent + "declared: " + 
        	Object.keys(work.declared).join(",")
        )
    }
    // item 546
    if (diagram.work.assigned) {
        // item 549
        build.lines.push(
        	indent + "assigned: " + 
        	Object.keys(work.assigned).join(",")
        )
    }
    // item 559
    build.lines.push(
    	indent + "vars: " + work.vars.join(",")
    )
    // item 693
    build.lines.push(
    	indent + "args: " + work.args.join(",")
    )
    // item 694
    build.lines.push(
    	indent + "flags: " + Object.keys(work.flags).join(",")
    )
    // item 331
    if (work.params) {
        // item 334
        build.lines.push(
        	indent + "params: " + zapNewLines(work.params)
        )
    }
    // item 3360001
    var _ind336 = 0;
    var _col336 = work.items;
    var _keys336 = Object.keys(_col336); 
    var _len336 = _keys336.length;
    while (true) {
        // item 3360002
        if (_ind336 < _len336) {
            
        } else {
            break;
        }
        // item 3360004
        var id = _keys336[_ind336]; var item = _col336[id];
        // item 338
        line = indent + item.id + " " +
        	item.type + " " +
        	zapNewLines(item.text) + " "
        // item 340
        if (item.one) {
            // item 343
            line += " one:" + item.one.id
            // item 344
            if (item.two) {
                // item 345
                line += " two:" + item.two.id
            }
        }
        // item 339
        line += printIds(item.prev, "prev")
        line += printIds(item.aprev, "aprev")
        // item 955
        if (item.ends.length > 0) {
            // item 958
            line += " ends: " + item.ends.join(",")
        }
        // item 346
        build.lines.push(line)
        // item 3360003
        _ind336++;
    }
    // item 1040
    build.lines.push("*/")
    build.lines.push("")
}

function printPrim(node, depth, output) {
    var indent, lines
    // item 1157
    if (node.text) {
        // item 1131
        indent = makeIndent(depth)
        // item 1154
        lines = node.text.split("\n")
        // item 11550001
        var _ind1155 = 0;
        var _col1155 = lines;
        var _len1155 = _col1155.length;
        while (true) {
            // item 11550002
            if (_ind1155 < _len1155) {
                
            } else {
                break;
            }
            // item 11550004
            var line = _col1155[_ind1155];
            // item 1135
            ln(output, indent + line)
            // item 11550003
            _ind1155++;
        }
    }
}

function printSeq(node, depth, output) {
    var indent
    // item 1122
    indent = makeIndent(depth)
    // item 11230001
    var _ind1123 = 0;
    var _col1123 = node.items;
    var _len1123 = _col1123.length;
    while (true) {
        // item 11230002
        if (_ind1123 < _len1123) {
            
        } else {
            break;
        }
        // item 11230004
        var step = _col1123[_ind1123];
        // item 1125
        printNode(
            step,
            depth,
            output
        )
        // item 11230003
        _ind1123++;
    }
}

function printSwitch(node, depth, output) {
    var header, i1, i2, indent
    // item 2745
    indent = makeIndent(depth)
    // item 2747
    header = indent + "switch (" + node.condition  +
    	") {"
    // item 2746
    ln(output, header)
    // item 2758
    i1 = makeIndent(depth + 1)
    i2 = makeIndent(depth + 2)
    // item 27540001
    var _ind2754 = 0;
    var _col2754 = node.cases;
    var _len2754 = _col2754.length;
    while (true) {
        // item 27540002
        if (_ind2754 < _len2754) {
            
        } else {
            break;
        }
        // item 27540004
        var caseItem = _col2754[_ind2754];
        // item 2757
        ln(output, i1 + "case \"" +
          caseItem.value + "\":")
        // item 2750
        printSeq(
            caseItem.seq,
            depth + 2,
            output
        )
        // item 2759
        ln(output, i2 + "break;")
        // item 27540003
        _ind2754++;
    }
    // item 2760
    if (node.defReturn) {
        // item 2763
        ln(output, i1 + "default:")
        // item 2764
        ln(output, i2 + "return;")
    }
    // item 2748
    ln(output, indent + "}")
}

function printWhile(node, depth, output) {
    var header, indent
    // item 1220
    indent = makeIndent(depth)
    // item 1222
    header = indent + "while (" + 
      node.condition + ") {"
    // item 1221
    ln(output, header)
    // item 1224
    printSeq(
        node.body,
        depth + 1,
        output
    )
    // item 1225
    ln(output, indent + "}")
}

function processDiagram(build, diagram) {
    // item 151
    prepareDiagram(build, diagram)
    // item 2495
    if (isScenario(diagram)) {
        // item 2512
        buildScenario(build, diagram)
    } else {
        // item 871
        buildBody(build, diagram)
        // item 347
        //printPrepared(build, diagram)
        // item 964
        printDiagram(build, diagram)
    }
    // item 2120
    diagram.work = undefined
}

function pushBack(array, item) {
    // item 1234
    return array.concat([item])
}

function registerVarLoop(diagram, varName) {
    var work
    // item 848
    work = diagram.work
    // item 835
    if (varName in work.loopVars) {
        // item 838
        return true
    } else {
        // item 839
        if (varName in work.declared) {
            // item 842
            return false
        } else {
            // item 843
            if (varName in work.assigned) {
                // item 846
                return false
            } else {
                // item 852
                work.loopVars[varName] = true
                work.assigned[varName] = true
                // item 847
                return true
            }
        }
    }
}

function removeFromPrev(next, prev) {
    // item 400
    next.prev = _.pull(next.prev, prev)
}

function replaceAddresses(diagram) {
    
}

function replaceOne(item) {
    var one, two, victim
    // item 1383
    victim = item.one
    // item 1384
    one = victim.one
    two = victim.two
    // item 1386
    one.prev = _.pull(one.prev, victim)
    one.prev.push(item)
    // item 1387
    item.one = one
    // item 1388
    if (_.includes(two.aprev, victim)) {
        // item 1391
        two.aprev = _.pull(two.aprev, victim)
    } else {
        // item 1392
        two.prev = _.pull(two.prev, victim)
    }
}

function replacePrev(item, oldPrev, newPrev) {
    // item 1569
    if (_.includes(item.prev, oldPrev)) {
        // item 1572
        item.prev = _.pull(item.prev, oldPrev)
        item.prev.push(newPrev)
    } else {
        // item 1573
        item.aprev = _.pull(item.aprev, oldPrev)
        item.aprev.push(newPrev)
    }
}

function replaceTwo(item) {
    var one, two, victim
    // item 1398
    victim = item.two
    // item 1399
    one = victim.one
    two = victim.two
    // item 1400
    one.prev = _.pull(one.prev, victim)
    // item 1401
    item.two = two
    // item 1402
    if (_.includes(two.aprev, victim)) {
        // item 1405
        two.aprev = _.pull(two.aprev, victim)
        two.aprev.push(item)
    } else {
        // item 1406
        two.prev = _.pull(two.prev, victim)
        two.prev.push(item)
    }
}

function rewireAnd(work, item) {
    var left, right, victim
    // item 231
    victim = item.one
    // item 216
    left = item.text
    right = victim.text
    // item 260
    if (item.flag1) {
        // item 263
        if (victim.flag1) {
            
        } else {
            // item 269
            right = not(right)
        }
        // item 271
        item.text = and(left, right)
        item.flag1 = 1
    } else {
        // item 266
        if (victim.flag1) {
            // item 270
            left = not(left)
            // item 271
            item.text = and(left, right)
            item.flag1 = 1
        } else {
            // item 272
            item.text = or(left, right)
            item.flag1 = 0
        }
    }
    // item 1385
    replaceOne(item)
    // item 234
    delete work.items[victim.id]
}

function rewireCase(build, diagram, caseItem, varName) {
    var errorText, newItem, throwId
    // item 430
    if (caseItem.text) {
        // item 425
        caseItem.type = "question"
        caseItem.text = equal(varName, caseItem.text)
        caseItem.flag1 = 1
        // item 431
        if (caseItem.two) {
            // item 426
            return caseItem.two
        } else {
            // item 434
            throwId = "_err_" + caseItem.id
            // item 435
            errorText = switchError(varName)
            // item 432
            newItem = createItem(
                diagram.work,
                throwId,
                "action",
                errorText
            )
            // item 2327
            addToSameTarget(
            	caseItem,
            	newItem
            )
            // item 2328
            caseItem.two = newItem
            newItem.prev.push(caseItem)
            // item 437
            return undefined
        }
    } else {
        // item 429
        if (caseItem.two) {
            // item 450
            addItemError(
                build,
                diagram,
                caseItem.id,
                "BUILD_EMPTY_CASE_NOT_LAST"
            )
        } else {
            // item 453
            caseItem.type = "action"
        }
        // item 437
        return undefined
    }
}

function rewireFor(diagram, item) {
    var loop, texts
    // item 1663
    loop = item.loopInfo
    texts = {}
    // item 1666
    texts.init = loop.one + ";"
    // item 1667
    texts.check = loop.two
    // item 1511
    texts.values = ""
    // item 1669
    texts.increment = loop.three + ";"
    // item 1670
    rewireLoopCore(
        diagram,
        item,
        texts
    )
}

function rewireForeachArray(diagram, item) {
    var col, it, length, loop, text, texts, work
    // item 1679
    loop = item.loopInfo
    work = diagram.work
    texts = {}
    // item 1678
    it = "_" + item.id + "_it"
    col = "_" + item.id + "_col"
    length = "_" + item.id + "_length"
    // item 2530
    if (isScenario(diagram)) {
        // item 2534
        it = "self." + it
        col = "self." + col
        length = "self." + length
        loop.value = "self." + loop.value
    } else {
        // item 2533
        work.assigned[it] = true
        work.assigned[col] = true
        work.assigned[length] = true
    }
    // item 1676
    text = assign(it, "0") + "\n"
    text += assign(col, loop.collection) + "\n"
    text += assign(length, col + ".length")
    // item 1681
    texts.init = text
    // item 1682
    texts.check = it + " < " + length
    // item 1677
    texts.values = assign(loop.value, col + "[" + it + "]")
    // item 1683
    texts.increment = it + "++;"
    // item 1684
    rewireLoopCore(
        diagram,
        item,
        texts
    )
}

function rewireForeachMap(diagram, item) {
    var col, it, keys, length, loop, text, texts, work
    // item 1635
    loop = item.loopInfo
    work = diagram.work
    texts = {}
    // item 2540
    it = "_" + item.id + "_it"
    col = "_" + item.id + "_col"
    length = "_" + item.id + "_length"
    keys = "_" + item.id + "_keys"
    // item 2535
    if (isScenario(diagram)) {
        // item 2539
        it = "self." + it
        col = "self." + col
        length = "self." + length
        keys = "self." + keys
        loop.key = "self." + loop.key
        loop.value = "self." + loop.value
    } else {
        // item 2538
        work.assigned[it] = true
        work.assigned[col] = true
        work.assigned[length] = true
        work.assigned[keys] = true
    }
    // item 1637
    text = assign(it, "0") + "\n"
    text += assign(col, loop.collection) + "\n"
    text += assign(keys, "Object.keys(" + col + ")") + "\n"
    text += assign(length, keys + ".length")
    // item 1638
    texts.init = text
    // item 1645
    texts.check = it + " < " + length
    // item 1654
    texts.values = assign(loop.key, keys + "[" + it + "]") + "\n"
    texts.values += assign(loop.value, col + "[" + loop.key + "]")
    // item 1655
    texts.increment = it + "++;"
    // item 1660
    rewireLoopCore(
        diagram,
        item,
        texts
    )
}

function rewireLoopCore(diagram, item, texts) {
    var arrowLoop, check, end, next, values, work
    // item 1593
    work = diagram.work
    // item 1585
    end = findEnd(item)
    next = end.one
    // item 1586
    item.type = "action"
    // item 1596
    item.text = texts.init
    // item 1601
    arrowLoop = insertAfter(
        work,
        item,
        "_" + item.id + "_loop",
        "arrow-loop"
    )
    // item 1602
    check = insertAfter(
        work,
        arrowLoop,
        "_" + item.id + "_check",
        "question"
    )
    // item 1603
    check.text = texts.check
    // item 1604
    check.two = check.one
    // item 1605
    check.one = next
    replacePrev(next, end, check)
    // item 1606
    values = insertAfter(
        work,
        check,
        "_" + item.id + "_values",
        "action",
        true
    )
    // item 1615
    values.text = texts.values
    // item 1613
    end.type = "action"
    end.text = texts.increment
    // item 1614
    end.one = arrowLoop
    arrowLoop.aprev.push(end)
}

function rewireOr(work, item) {
    var left, right, victim
    // item 280
    victim = item.two
    // item 278
    left = item.text
    right = victim.text
    // item 284
    if (item.flag1) {
        // item 287
        if (victim.flag1) {
            
        } else {
            // item 292
            right = not(right)
        }
        // item 294
        item.text = or(left, right)
        item.flag1 = 1
    } else {
        // item 289
        if (victim.flag1) {
            // item 293
            left = not(left)
            // item 294
            item.text = or(left, right)
            item.flag1 = 1
        } else {
            // item 295
            item.text = and(left, right)
            item.flag1 = 0
        }
    }
    // item 1407
    replaceTwo(item)
    // item 283
    delete work.items[victim.id]
}

function rewireSelect(build, diagram, item) {
    var caseItem, varName
    // item 371
    varName = getSelectVar(item)
    // item 2974
    if (isScenario(diagram)) {
        // item 2977
        varName = "self." + varName
    }
    // item 372
    item.text = assign(varName, item.text)
    // item 379
    item.type = "action"
    // item 386
    caseItem = item.one
    while (true) {
        // item 460
        caseItem = rewireCase(
            build,
            diagram,
            caseItem,
            varName
        )
        // item 389
        if (caseItem) {
            
        } else {
            break;
        }
    }
}

function rewireSelects(build, diagram) {
    // item 3590001
    var _ind359 = 0;
    var _col359 = diagram.work.items;
    var _keys359 = Object.keys(_col359); 
    var _len359 = _keys359.length;
    while (true) {
        // item 3590002
        if (_ind359 < _len359) {
            
        } else {
            break;
        }
        // item 3590004
        var id = _keys359[_ind359]; var item = _col359[id];
        // item 361
        if (item.type === "select") {
            // item 365
            rewireSelect(build, diagram, item)
        }
        // item 3590003
        _ind359++;
    }
}

function runName(diagram) {
    // item 2772
    return diagram.name + "_run"
}

function scanIf(seq, item, loop, broken) {
    var last1, last2, next, step
    // item 1092
    step = createIf(
        item.text,
        item.flag1
    )
    // item 1094
    seq.items.push(step)
    // item 1093
    next = scanSequence(
        step.down,
        item,
        item.one,
        item.id,
        loop,
        getOneBroken(item, broken)
    )
    // item 1095
    scanSequence(
        step.right,
        item,
        item.two,
        item.id,
        loop,
        getTwoBroken(item, broken)
    )
    // item 2170
    last1 = getLast(step.down.items)
    last2 = getLast(step.right.items)
    // item 2154
    if ((((((last1) && (last2)) && (last1.type === last2.type)) && (last1.text === last2.text)) && (!(last1.type === "if"))) && (!(last1.type === "while"))) {
        // item 2162
        step.down.items.pop()
        step.right.items.pop()
        // item 2171
        seq.items.push(last1)
    }
    // item 1096
    return next
}

function scanLoop(seq, item, broken) {
    var next, step
    // item 1265
    step = createWhile()
    // item 1267
    seq.items.push(step)
    // item 1266
    next = scanSequence(
        step.body,
        item,
        item.one,
        item.id,
        item,
        getOneBroken(item, broken)
    )
    // item 1269
    return next
}

function scanSequence(seq, prev, item, finish, loop, broken) {
    var breakOut, step
    var _sw23780000_ = 0;
    while (true) {
        // item 1064
        if (item) {
            
        } else {
            break;
        }
        // item 2453
        if (((item.type === "end") && (broken)) && (!(hasReturn(seq)))) {
            // item 2462
            step = createReturn()
            seq.items.push(step)
            // item 2458
            return undefined
        }
        // item 1067
        if (_.includes(item.ends, finish)) {
            // item 1255
            breakOut = addBreak(
                seq,
                prev,
                item,
                loop
            )
            // item 1723
            if (breakOut) {
                
            } else {
                break;
            }
        }
        // item 2392
        prev = item
        // item 23780000
        _sw23780000_ = item.type;
        // item 23780001
        if (_sw23780000_ === "end") {
            // item 2397
            item = undefined
            break;
        }
        // item 23780002
        if (_sw23780000_ === "address") {
            // item 2396
            addAddress(
                seq,
                item
            )
            // item 2397
            item = undefined
            break;
        }
        // item 23780003
        if (_sw23780000_ === "question") {
            // item 2391
            item = scanIf(
                seq,
                item,
                loop,
                broken
            )
        } else {
            // item 23780004
            if (_sw23780000_ === "arrow-loop") {
                // item 2395
                item = scanLoop(
                    seq,
                    item,
                    broken
                )
            } else {
                // item 2388
                step = createPrim(item.text)
                step.script = item.script
                seq.items.push(step)
                // item 2406
                if (isArrow(item, item.one)) {
                    break;
                }
                // item 2390
                item = item.one
            }
        }
    }
    // item 2401
    return item
}

function setClosestParentLoops(work, map, hierarchy) {
    var parentId
    // item 18860001
    var _ind1886 = 0;
    var _col1886 = work.items;
    var _keys1886 = Object.keys(_col1886); 
    var _len1886 = _keys1886.length;
    while (true) {
        // item 18860002
        if (_ind1886 < _len1886) {
            
        } else {
            break;
        }
        // item 18860004
        var id = _keys1886[_ind1886]; var item = _col1886[id];
        // item 1899
        parentId = getParentLoop(id, map, hierarchy)
        // item 1900
        if (parentId) {
            // item 1888
            item.parentLoop = work.items[parentId]
        } else {
            // item 1903
            item.parentLoop = undefined
        }
        // item 18860003
        _ind1886++;
    }
}

function shortCircuit(work) {
    // item 1630001
    var _ind163 = 0;
    var _col163 = work.items;
    var _keys163 = Object.keys(_col163); 
    var _len163 = _keys163.length;
    while (true) {
        // item 1630002
        if (_ind163 < _len163) {
            
        } else {
            // item 205
            return false
        }
        // item 1630004
        var id = _keys163[_ind163]; var item = _col163[id];
        // item 165
        if (item.type === "question") {
            // item 186
            if ((canShortCircuit(item.one)) && (item.two === item.one.two)) {
                // item 207
                rewireAnd(work, item)
                // item 210
                return true
            }
            // item 229
            if ((canShortCircuit(item.two)) && (item.one === item.two.one)) {
                // item 208
                rewireOr(work, item)
                // item 209
                return true
            }
        }
        // item 1630003
        _ind163++;
    }
}

function startsWithWord(text, word) {
    // item 2668
    if ((_.startsWith(text, word + " ")) || (_.startsWith(text, word + "\t"))) {
        // item 2674
        return true
    } else {
        // item 2675
        return false
    }
}

function switchError(varName) {
    // item 459
    return "throw new Error(\"Unexpected Choice value: \" + " +
    	varName + ");"
}

function translate(build, textId) {
    // item 2295
    if (textId in globals.strings) {
        // item 2298
        return globals.strings[textId]
    } else {
        // item 18
        return textId
    }
}

function waitState(id) {
    // item 2842
    return id + "_wait"
}

function writeBlock(build, name) {
    // item 2191
    if (name in build.props) {
        // item 2194
        build.lines.push(build.props[name])
        build.lines.push("")
    }
}

function zapNewLines(text) {
    // item 310
    text = text || ""
    // item 311
    return text.split("\n").join(" ")
}


init()

module.exports.beginBuild = beginBuild
module.exports.processDiagram = processDiagram
module.exports.completeBuild = completeBuild
