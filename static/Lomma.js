function Lomma(
	render,
	persistence,
	translate,
	userId
) {

var INSERTION = 6
var MaxLineLength = 800
var TabSize = 4
var MaxChars = 40

var CandyColor = "#00ff00"

var MainFont = "14px " + Config.EDITOR_FONT
var HeaderFont = "18px " + Config.EDITOR_FONT
var SmallFont = "12px " + Config.EDITOR_FONT

var tr = translate
var module = this
var RoundedRadius = 8

var MaxLineLength = 800
var MaxLines = 100
var LineHeight = 1.2
var Q_PADDING = 20;

var SpacesInTab = 4

module.storage = null
module.visuals = null
module.render = render
module.persistence = persistence
module.callbacks = {}





// Autogenerated with DRAKON Editor 1.32


function Action_draw(render, item) {
    var format, texId
    // item 2560
    format = getFormatForIcon(
        item.type
    )
    // item 2561
    texId = makeCustomTexture(
        render,
        item.x,
        item.y,
        item.w,
        item.h
    )
    // item 2559
    render.drawShape(
        texId,
        "rectangle",
        item.x,
        item.y,
        [item.w, item.h],
        format
    )
    // item 2550
    drawLeftTextInRect(
        render,
        texId,
        item.tb,
        item
    )
}

function Action_flow(render, item) {
    var tb
    // item 2514
    tb = requestSourceFlow(render, item)
    // item 2515
    item.tb = tb
    item.w = snapSize(tb.width)
    item.h = snapSize(tb.height)
}

function Address_draw(render, item) {
    var format, pos, texId
    // item 8417
    format = getFormatForIcon(
        item.type
    )
    // item 8418
    texId = makeCustomTexture(
        render,
        item.x,
        item.y,
        item.w,
        item.h
    )
    // item 8419
    points = makeAddressPoints(
        item.w,
        item.h
    )
    // item 8416
    render.drawShape(
        texId,
        "poly",
        item.x,
        item.y,
        points,
        format
    )
    // item 8835
    if (item.mark) {
        // item 8838
        var x = 0
        var y = 0
        var w = item.w
        var h = item.h
        var top = y - h
        var middle = top + 2.0 / 3.0 * h
        
        var tx0 = x - w / 2;
        var tx1 = x + w / 2;
        var ty = (top + middle) / 2;
        // item 12873
        if (format.lineColor === "none") {
            // item 12872
            format = makeLineFormat(format)
        }
        // item 8839
        var markFormat = {
        	fillColor: format.lineColor
        }
        // item 8841
        var points = [
         tx0, ty,
         x, top,    
         tx1, ty
        ]
        // item 8840
        render.drawShape(
        	texId,
        	"poly",
        	item.x,
        	item.y,
        	points,
        	markFormat
        );
    }
    // item 8420
    y = item.y + Math.floor(item.h / 3)
    // item 8421
    pos = {
        x : item.x,
        y : y,
        w : item.w,
        h : item.h / 3 * 2
    }
    // item 8415
    drawLeftTextInRect(
        render,
        texId,
        item.tb,
        pos
    )
}

function Branch_draw(render, item) {
    var bottom, format, h, markFormat, middle, points, pos, texId, tx0, tx1, ty, w, x, y
    // item 8403
    format = getFormatForIcon(
        item.type
    )
    // item 8404
    texId = makeCustomTexture(
        render,
        item.x,
        item.y,
        item.w,
        item.h
    )
    // item 8407
    points = makeCasePoints(
        item.w,
        item.h
    )
    // item 8402
    render.drawShape(
        texId,
        "poly",
        item.x,
        item.y,
        points,
        format
    )
    // item 8795
    if (item.mark) {
        // item 8798
        x = 0
        y = 0
        w = item.w
        h = item.h
        bottom = y + h
        middle = bottom - 2.0 / 3.0 * h;
        
        tx0 = x - w / 2;
        tx1 = x + w / 2;
        ty = (bottom + middle) / 2;
        // item 12869
        if (format.lineColor === "none") {
            // item 12868
            format = makeLineFormat(format)
        }
        // item 8800
        markFormat = {
        	fillColor: format.lineColor
        }
        // item 8799
        points = [
         tx0, ty,
         x, bottom,
         tx1, ty
        ]
        // item 8801
        render.drawShape(
        	texId,
        	"poly",
        	item.x,
        	item.y,
        	points,
        	markFormat
        );
    }
    // item 8408
    y = item.y - Math.floor(item.h / 3)
    // item 8409
    pos = {
        x : item.x,
        y : y,
        w : item.w,
        h : item.h / 3 * 2
    }
    // item 8401
    drawLeftTextInRect(
        render,
        texId,
        item.tb,
        pos
    )
}

function Branch_flow(render, item) {
    var tb
    // item 10865
    tb = requestTextFlow(render, item)
    // item 10866
    item.tb = tb
    item.w = snapSize(tb.width)
    item.h = snapSize(tb.height)
    // item 10864
    item.h = item.h * 3.0 / 2.0
}

function Case_draw(render, item) {
    var bottom, format, left, middle, points, pos, right, texId, y
    // item 6349
    format = getFormatForIcon(
        item.type
    )
    // item 6350
    texId = makeCustomTexture(
        render,
        item.x,
        item.y,
        item.w,
        item.h
    )
    // item 6388
    points = makeCasePoints(
        item.w,
        item.h
    )
    // item 6348
    render.drawShape(
        texId,
        "poly",
        item.x,
        item.y,
        points,
        format
    )
    // item 6367
    bottom = item.y + item.h
    middle = bottom - 2.0 / 3.0 * item.h - 1
    left = item.x - item.w
    right = item.x + item.w
    // item 12851
    format = makeLineFormat(format)
    // item 6368
    render.drawShape(
        texId,
        "line",
        left,
        middle,
        [right - 1, middle],
        format
    )
    // item 6389
    y = item.y - Math.floor(item.h / 3)
    // item 6390
    pos = {
        x : item.x,
        y : y,
        w : item.w,
        h : item.h / 3 * 2
    }
    // item 6347
    drawLeftTextInRect(
        render,
        texId,
        item.tb,
        pos
    )
}

function Case_flow(render, item) {
    // item 6362
    Action_flow(render, item)
    // item 6364
    item.h = item.h * 3.0 / 2.0
}

function DoubleQuoter_Created_default(self, msg) {
    // item 1798
    self.state = "Created";
}

function DoubleQuoter_Created_operator(self, msg) {
    // item 1816
    self.chars = [msg]
    // item 1789
    self.state = "Normal";
}

function DoubleQuoter_Escaping_default(self, msg) {
    // item 1919
    addAnyChar(
        self,
        msg
    )
    // item 1815
    self.state = "Normal";
}

function DoubleQuoter_Escaping_operator(self, msg) {
    // item 1918
    addAnyChar(
        self,
        msg
    )
    // item 1809
    self.state = "Normal";
}

function DoubleQuoter_Normal_alpha(self, msg) {
    // item 1899
    addAnyChar(
        self,
        msg
    )
    // item 1806
    self.state = "Normal";
}

function DoubleQuoter_Normal_digit(self, msg) {
    // item 1899
    addAnyChar(
        self,
        msg
    )
    // item 1806
    self.state = "Normal";
}

function DoubleQuoter_Normal_operator(self, msg) {
    var token
    // item 18610001
    if (msg === module.DOUBLE_QUOTE) {
        // item 1875
        addAnyChar(
            self,
            msg
        )
        // item 1870
        token = makeTokenFromChars(
            self,
            "string"
        )
        // item 1871
        self.next.completeToken(
            token
        )
        // item 1800
        self.state = null;
    } else {
        // item 18610002
        if (msg === module.BACK) {
            // item 1917
            addAnyChar(
                self,
                msg
            )
            // item 1874
            self.state = "Escaping";
        } else {
            // item 1872
            addAnyChar(
                self,
                msg
            )
            // item 1873
            self.state = "Normal";
        }
    }
}

function DoubleQuoter_Normal_whitespace(self, msg) {
    // item 1899
    addAnyChar(
        self,
        msg
    )
    // item 1806
    self.state = "Normal";
}

function Edge(id, head, tail, vertical) {
    // item 3814
    this.id = id
    this.head = head
    this.tail = tail
    this.vertical = vertical
    this.skewer = null
    // item 4266
    this.finalTarget = null
    // item 4272
    this.source = null
    this.target = null
    this.role = null
    this.links = []
    // item 4814
    this.box = null
    // item 5866
    this.inner = null
    this.outer = null
}

function Edit(type, table, id, fields) {
    // item 2839
    this.type = type;
    this.table = table;
    this.id = id;
    this.fields = fields || {};
    this.undo = null;
}

function Header_draw(render, item) {
    var box, fontHeight, format, labelColor, scenario, sw, texId
    // item 2681
    format = getFormatForIcon(
        item.type
    )
    // item 13282
    fontHeight = render.getFontHeight()
    // item 2682
    texId = makeCustomTexture(
        render,
        item.x,
        item.y,
        item.w,
        item.h + fontHeight * 2
    )
    // item 2680
    render.drawShape(
        texId,
        "beginend",
        item.x,
        item.y,
        [item.w, item.h],
        format
    )
    // item 2686
    box = {
        x : item.x,
        y : item.y,
        w : item.w - Config.SNAP * 1,
        h : item.h
    }
    // item 2679
    drawCenterTextInRect(
        render,
        texId,
        item.tb,
        box
    )
    // item 13275
    if ((isScenario()) && (item.header)) {
        // item 13285
        render.setDefaultFont(SmallFont)
        // item 13279
        scenario = translate("MES_SCENARIO")
        // item 13278
        sw = render.measureTextWidth(scenario)
        // item 13280
        labelColor = getYesColor()
        // item 13281
        render.drawText(
        	texId,
        	scenario,
        	item.x - Math.floor(sw / 2),
        	item.y - item.h - 3,
        	labelColor,
        	SmallFont
        )
    }
}

function Header_flow(render, item) {
    var tb
    // item 11147
    tb = requestTextFlow(render, item)
    // item 11148
    item.tb = tb
    item.w = snapSize(tb.width)
    item.h = snapSize(tb.height)
    // item 2685
    item.w += Config.SNAP * 1
}

function InnerCrawler_down_default(self, edge) {
    // item 5534
    self.state = "down";
}

function InnerCrawler_down_onEdge(self, edge) {
    var caseNode, left, tail
    // item 5550
    tail = edge.tail
    // item 5551
    if (tail.down) {
        // item 5587
        addInnerEdgeToSub(
            self,
            edge
        )
        // item 6577
        if (tail.type == "select") {
            // item 6579
            caseNode = getDown(
            	getDown(tail)
            )
            // item 6580
            self.state = "down";
            return caseNode.down
        } else {
            // item 5553
            if ((tail.type == "address") || (tail.left)) {
                // item 5584
                self.state = null;
                return null
            } else {
                // item 5525
                self.state = "down";
                return tail.down
            }
        }
    } else {
        // item 5588
        if (tail.left) {
            // item 7729
            left = getLeft(tail)
            // item 7727
            if (left.type == "question") {
                // item 7736
                addInnerEdgeToSub(
                    self,
                    edge
                )
                // item 7730
                self.state = null;
                return null
            } else {
                // item 7732
                if (edge.role == "up") {
                    // item 7735
                    addInnerEdgeToSub(
                        self,
                        edge
                    )
                }
                // item 5590
                self.state = "left";
                return tail.left
            }
        } else {
            // item 5586
            addInnerEdgeToSub(
                self,
                edge
            )
            // item 5570
            self.state = null;
            return null
        }
    }
}

function InnerCrawler_left_default(self, edge) {
    // item 5880
    self.state = "right";
}

function InnerCrawler_left_onEdge(self, edge) {
    // item 5988
    addInnerEdgeToSub(
        self,
        edge
    )
    // item 5874
    self.state = null;
    return null
}

function InnerCrawler_right_default(self, edge) {
    // item 5542
    self.state = "right";
}

function InnerCrawler_right_onEdge(self, edge) {
    var tail
    // item 5574
    tail = edge.tail
    // item 7495
    if (tail.right) {
        // item 7498
        self.state = "right";
        return tail.right
    } else {
        // item 5536
        self.state = "down";
        return tail.down
    }
}

function Input_draw(render, item) {
    var b, borderFormat, format, points, pos, pos2, texId, x2, x4, y3, y4
    // item 13171
    format = getFormatForIcon(
        item.type
    )
    // item 13172
    texId = makeCustomTexture(
        render,
        item.x,
        item.y,
        item.w,
        item.h
    )
    // item 13249
    points = makeComplexInput(item)
    // item 13248
    render.drawShape(
        texId,
        "poly",
        item.x,
        item.y,
        points,
        format
    )
    // item 13267
    x2 = item.x - item.w + Config.INPUT_LEFT * 2
    x4 = item.x + item.w
    y3 = item.y + getCompY3(item)
    y4 = item.y + item.h
    // item 13266
    borderFormat = makeLineFormat(format)
    // item 13265
    render.drawShape(
        texId,
        "line",
        x2,
        y3,
        [x4, y3],
        borderFormat
    )
    // item 13268
    render.drawShape(
        texId,
        "line",
        x2,
        y3,
        [x2, y4],
        borderFormat
    )
    // item 13173
    b = item.h - item.a
    // item 13169
    pos2 = {
        x : item.x + Config.INPUT_LEFT,
        y : item.y - item.h + item.a,
        w : item.w,
        h : item.a
    }
    // item 13168
    drawLeftTextInRect(
        render,
        texId,
        item.tb2,
        pos2
    )
    // item 13175
    pos = {
        x : item.x + Config.INPUT_LEFT * 2,
        y : item.y + item.h - b,
        w : item.w,
        h : b
    }
    // item 13174
    drawLeftTextInRect(
        render,
        texId,
        item.tb,
        pos
    )
}

function Input_flow(render, item) {
    var partWidth, tb, tb2, width
    // item 13110
    partWidth = Config.DEF_ICON_WIDTH - 
    	Config.INPUT_LEFT
    // item 13120
    tb = flowText(
        render,
        item.text || "",
        partWidth
    )
    // item 13121
    tb2 = flowText(
        render,
        item.text2 || "",
        partWidth
    )
    // item 13125
    width = Math.max(
        Config.INPUT_LEFT + tb.width,
        Config.INPUT_LEFT + tb2.width
    )
    // item 13122
    item.tb = tb
    item.tb2 = tb2
    item.w = snapSize(width)
    item.h = snapSize(tb.height) + snapSize(tb2.height)
    item.a = snapSize(tb2.height)
}

function Insertion_draw(render, item) {
    var format, pos, qformat, texId
    // item 12748
    format = getFormatForIcon(
        item.type
    )
    // item 12749
    texId = makeCustomTexture(
        render,
        item.x,
        item.y,
        item.w,
        item.h
    )
    // item 12747
    render.drawShape(
        texId,
        "rectangle",
        item.x,
        item.y,
        [item.w, item.h],
        format
    )
    // item 12752
    var hi = Math.floor(INSERTION / 2)
    // item 12750
    var left = item.x - item.w + hi
    var right = item.x + item.w - hi
    var le2 = left + hi
    var ri2 = right - hi
    var top = item.y - item.h
    var bottom = item.y + item.h
    // item 12754
    qformat = Utils.copyObject(format)
    qformat.fillColor = format.secondaryColor
    // item 12751
    render.drawShape(
    	texId,
    	"rectangle",
    	left,
    	item.y,
    	[hi, item.h],
    	qformat
    );
    // item 12753
    render.drawShape(
    	texId,
    	"rectangle",
    	right,
    	item.y,
    	[hi, item.h],
    	qformat
    );
    // item 12855
    if (format.lineColor === "none") {
        // item 12852
        format = makeLineFormat(format)
        // item 12853
        render.drawShape(
            texId,
            "line",
            le2,
            top,
            [le2, bottom],
            format
        )
        // item 12854
        render.drawShape(
            texId,
            "line",
            ri2,
            top,
            [ri2, bottom],
            format
        )
    }
    // item 12755
    pos = {
        x : item.x + INSERTION,
        y : item.y,
        w : item.w,
        h : item.h
    }
    // item 12746
    drawLeftTextInRect(
        render,
        texId,
        item.tb,
        pos
    )
}

function Insertion_flow(render, item) {
    var tb
    // item 12739
    tb = requestSourceFlow(render, item)
    // item 12740
    item.tb = tb
    item.w = snapSize(tb.width + INSERTION)
    item.h = snapSize(tb.height)
}

function JsLexer_eol(self) {
    // item 1482
    self.next.eol()
    // item 1528
    self.state = "Idle"
}

function JsLexer_finish(self) {
    // item 1646
    self.next.finish()
    // item 1647
    self.state = "Idle"
}

function Link(source, index) {
    // item 4319
    this.source = source
    this.index = index
}

function LoopBegin_draw(render, item) {
    var ADD, format, texId, w
    // item 6081
    ADD = Math.floor(Config.SNAP / 2)
    // item 6073
    w = item.w + ADD
    // item 6079
    format = getFormatForIcon(
        item.type
    )
    // item 6080
    texId = makeCustomTexture(
        render,
        item.x,
        item.y,
        w,
        item.h
    )
    // item 6072
    render.drawShape(
        texId,
        "poly",
        item.x,
        item.y,
        makeLoopBeginPoints(w, item.h),
        format
    )
    // item 6077
    drawLeftTextInRect(
        render,
        texId,
        item.tb,
        item
    )
}

function LoopBegin_flow(render, item) {
    var ADD, tb
    // item 6061
    ADD = Config.SNAP
    // item 6059
    tb = requestSourceFlow(render, item)
    // item 6060
    item.tb = tb
    item.w = snapSize(tb.width + ADD)
    item.h = snapSize(tb.height)
}

function LoopEnd_draw(render, item) {
    var ADD, format, texId, w
    // item 6106
    ADD = Math.floor(Config.SNAP / 2)
    // item 6101
    w = item.w + ADD
    // item 6104
    format = getFormatForIcon(
        item.type
    )
    // item 6105
    texId = makeCustomTexture(
        render,
        item.x,
        item.y,
        w,
        item.h
    )
    // item 6100
    render.drawShape(
        texId,
        "poly",
        item.x,
        item.y,
        makeLoopEndPoints(w, item.h),
        format
    )
    // item 6103
    drawLeftTextInRect(
        render,
        texId,
        item.tb,
        item
    )
}

function MTable(name, keys) {
    // item 3322
    this.name = name
    this.rows = {}
    this.count = 0
    this.keys = keys
    // item 3326
    this.insert = MTable_insert
    // item 3327
    this.get = MTable_get
}

function MTable_get() {
    var current, i, keyPart, keys, table
    // item 3254
    table = this
    // item 3233
    current = table.rows
    keys = table.keys
    // item 32310001
    i = 0;
    while (true) {
        // item 32310002
        if (i < keys.length) {
            
        } else {
            // item 3253
            return current
        }
        // item 3237
        keyPart = arguments[i]
        // item 3234
        if (keyPart) {
            
        } else {
            // item 4019
            return current
        }
        // item 3238
        current = current[keyPart]
        // item 3241
        if (current) {
            
        } else {
            // item 3245
            return null
        }
        // item 32310003
        i++;
    }
}

function MTable_insert(row) {
    var bucket, i, keyName, keyPart, keys, lastKey, message, rows, table
    // item 3265
    table = this
    // item 3194
    rows = table.rows
    keys = table.keys
    lastKey = keys.length - 1
    // item 31920001
    i = 0;
    while (true) {
        // item 31920002
        if (i < lastKey) {
            
        } else {
            // item 3219
            keyName = keys[lastKey]
            keyPart = row[keyName]
            // item 3220
            if (keyPart) {
                // item 3221
                if (keyPart in rows) {
                    // item 3224
                    message = table.name + 
                     " insert: id not unique. id=" +
                     keyToString(table, row)
                    // item 3201
                    throw Error(message)
                } else {
                    // item 3206
                    rows[keyPart] = row
                    // item 3225
                    table.count++
                }
            } else {
                // item 3200
                message = table.name + 
                 " insert: id part is empty. name=" +
                 keyName
                // item 3201
                throw Error(message)
            }
            break;
        }
        // item 3198
        keyName = keys[i]
        keyPart = row[keyName]
        // item 3195
        if (keyPart) {
            
        } else {
            // item 3200
            message = table.name + 
             " insert: id part is empty. name=" +
             keyName
            // item 3201
            throw Error(message)
        }
        // item 3199
        bucket = rows[keyPart]
        // item 3202
        if (bucket) {
            
        } else {
            // item 3217
            bucket = {}
            rows[keyPart] = bucket
        }
        // item 3205
        rows = bucket
        // item 31920003
        i++;
    }
}

function MachineStack(machines) {
    var prev
    // item 1235
    this.first = {
        prev : null,
        next : null
    }
    // item 1236
    this.top = function() { return this.first.next }
    // item 1240
    prev = this.first
    // item 12370001
    var _ind1237 = 0;
    var _col1237 = machines;
    var _len1237 = _col1237.length;
    while (true) {
        // item 12370002
        if (_ind1237 < _len1237) {
            
        } else {
            break;
        }
        // item 12370004
        var machine = _col1237[_ind1237];
        // item 1239
        machine.prev = prev
        prev.next = machine
        // item 1261
        prev = machine
        // item 12370003
        _ind1237++;
    }
}

function Node(id, itemId, type, text) {
    // item 3748
    this.id = id
    this.itemId = itemId
    // item 3746
    this.type = type
    this.text = text
    this.text2 = null
    // item 3747
    this.x = 0
    this.y = 0
    this.w = 0
    this.h = 0
    this.flag1 = 0
    this.a = 0
    // item 3750
    this.next = []
    this.prev = []
    this.aprev = []
    // item 3749
    this.left = null
    this.up = null
    this.right = null
    this.down = null
    // item 3751
    this.mountUp = null
    this.mountRight = null
    this.skewer = null
    this.level = null
    // item 4273
    this.finalTarget = null
    // item 4274
    this.sources = []
    this.targets = []
    this.role = null
    // item 4815
    this.box = null
    // item 6214
    this.loops = {}
}

function OneToMany(one, many, oneField, manyField) {
    // item 3271
    this.one = one
    this.many = many
    this.oneField = oneField
    this.manyField = manyField
    // item 3272
    this.link = OneToMany_link
    this.unlink = OneToMany_unlink
}

function OneToMany_link(manyRow) {
    var bucket, id, oneRow, self
    // item 3283
    self = this
    // item 3278
    id = manyRow[self.manyField]
    // item 3279
    if (id) {
        // item 3282
        oneRow = self.one.get(id)
        // item 3284
        bucket = oneRow[self.oneField]
        // item 3285
        if (bucket) {
            
        } else {
            // item 3288
            bucket = []
            oneRow[self.oneField] = bucket
        }
        // item 3289
        bucket.push(manyRow)
    }
}

function OneToMany_unlink(manyRow) {
    var bucket, id, oneRow, self
    // item 3300
    self = this
    // item 3295
    id = manyRow[self.manyField]
    // item 3296
    if (id) {
        // item 3299
        oneRow = self.one.get(id)
        // item 3301
        bucket = oneRow[self.oneField]
        // item 3302
        if (bucket) {
            // item 3306
            remove(bucket, manyRow)
        }
    }
}

function OperBuilder_Idle_eol(self, token) {
    // item 11064
    self.next.eol()
    // item 11038
    self.state = "Idle";
}

function OperBuilder_Idle_onToken(self, token) {
    // item 11062
    if ((token.type == "operator") && (longOp1(token.text))) {
        // item 11075
        addOp(self, token)
        // item 11073
        self.state = "One";
    } else {
        // item 11069
        self.next.onToken(token)
        // item 11029
        self.state = "Idle";
    }
}

function OperBuilder_One_eol(self, token) {
    // item 11065
    mergeOps(self)
    // item 11066
    self.next.eol()
    // item 11046
    self.state = "Idle";
}

function OperBuilder_One_onToken(self, token) {
    // item 11113
    if ((token.type == "operator") && (longOp2(
self.tokens[0].text,
token.text))) {
        // item 11120
        addOp(self, token)
        // item 11118
        self.state = "Two";
    } else {
        // item 11121
        mergeOps(self)
        // item 11115
        self.next.onToken(token)
        // item 11040
        self.state = "Idle";
    }
}

function OperBuilder_Two_eol(self, token) {
    // item 11081
    mergeOps(self)
    // item 11068
    self.next.eol()
    // item 11049
    self.state = "Idle";
}

function OperBuilder_Two_onToken(self, token) {
    // item 11122
    if ((token.type == "operator") && (longOp3(
self.tokens[0].text,
self.tokens[1].text,
token.text))) {
        // item 11128
        addOp(self, token)
        // item 11130
        mergeOps(self)
    } else {
        // item 11129
        mergeOps(self)
        // item 11124
        self.next.onToken(token)
    }
    // item 11049
    self.state = "Idle";
}

function OperatorBuilder_Idle_default(self, msg) {
    // item 1653
    self.state = "Idle";
}

function OperatorBuilder_Idle_operator(self, msg) {
    // item 1652
    self.chars = [msg]
    // item 1604
    self.state = "One";
}

function OperatorBuilder_One_default(self, msg) {
    // item 1753
    self.state = "One";
}

function OperatorBuilder_One_operator(self, msg) {
    var text, token
    // item 1700
    text = makeChar2Text(
        self,
        msg
    )
    // item 1721
    if ((text == "!=") || (text == "==")) {
        // item 1724
        self.chars.push(msg)
        // item 1725
        self.state = "Two";
    } else {
        // item 1701
        if (text in module.longOps) {
            // item 1703
            token = new Token("operator")
            token.text = text
            // item 1704
            self.next.completeToken(
                token
            )
            // item 1705
            self.state = "Idle";
        } else {
            // item 1706
            sendChars(self)
            // item 1751
            self.chars = [msg]
            // item 1708
            self.state = "One";
        }
    }
}

function OperatorBuilder_Two_default(self, msg) {
    // item 1772
    self.state = "Two";
}

function OperatorBuilder_Two_operator(self, msg) {
    // item 1766
    if (msg == module.EQUALS) {
        // item 1769
        self.chars.push(msg)
        // item 1777
        completeChars(self)
        // item 1770
        self.state = "Idle";
    } else {
        // item 1778
        sendChars(self)
        // item 1780
        self.chars = [msg]
        // item 1779
        self.state = "One";
    }
}

function OuterCrawler_downLoop_default(self, edge) {
    // item 7379
    self.state = "downLoop";
}

function OuterCrawler_downLoop_onEdge(self, edge) {
    var tail
    // item 7400
    tail = edge.tail
    // item 7401
    if (tail.down) {
        // item 7378
        self.state = "downLoop";
        return tail.down
    } else {
        // item 7405
        self.state = "leftLoop";
        return tail.left
    }
}

function OuterCrawler_down_default(self, edge) {
    // item 5435
    self.state = "down";
}

function OuterCrawler_down_onEdge(self, edge) {
    var next, tail
    var _sw85920000_ = 0;
    // item 7691
    addArrowPad(
        self.sub,
        edge
    )
    // item 5453
    tail = edge.tail
    // item 6598
    if (tail.type == "select") {
        // item 6612
        addEdgeToSub(
            self,
            edge
        )
        // item 6600
        next = crawlSelect(
            tail
        )
        // item 6601
        self.state = "down";
        return next.down
    } else {
        // item 5456
        if (tail.right) {
            // item 85920000
            _sw85920000_ = tail.type;
            // item 85920001
            if (_sw85920000_ === "arrow-loop") {
                // item 8604
                addEdgeToSub(
                    self,
                    edge
                )
                // item 8607
                planSpace(self, tail)
                // item 8605
                self.state = "rightLoop";
                return tail.right
            } else {
                // item 85920002
                if (_sw85920000_ === "question") {
                    // item 8602
                    addEdgeToSub(
                        self,
                        edge
                    )
                    // item 8600
                    planSpace(self, tail)
                    // item 8603
                    self.state = "right";
                    return tail.right
                } else {
                    // item 8612
                    self.state = null;
                    return null
                }
            }
        } else {
            // item 5454
            if (tail.down) {
                // item 5990
                addEdgeToSub(
                    self,
                    edge
                )
                // item 8625
                if (tail.type == "address") {
                    // item 8619
                    markFloor(
                        self,
                        tail
                    )
                    // item 8627
                    self.state = null;
                    return null
                } else {
                    // item 5426
                    self.state = "down";
                    return tail.down
                }
            } else {
                // item 5991
                addEdgeToSub(
                    self,
                    edge
                )
                // item 5500
                if (tail.left) {
                    // item 5506
                    addLowerCorner(
                        self,
                        tail
                    )
                    // item 5502
                    self.state = "left";
                    return tail.left
                } else {
                    // item 5504
                    self.state = null;
                    return null
                }
            }
        }
    }
}

function OuterCrawler_leftLoop_default(self, edge) {
    // item 7388
    self.state = "leftLoop";
}

function OuterCrawler_leftLoop_onEdge(self, edge) {
    var head
    // item 7406
    head = edge.head
    // item 7407
    if (head.left) {
        // item 7387
        self.state = "leftLoop";
        return head.left
    } else {
        // item 7412
        if (head.down) {
            // item 7425
            head.zoned = true
            edge.inner = self.sub
            // item 7411
            self.state = "down";
            return head.down
        } else {
            // item 7415
            self.state = "down";
            return markInnerSide(
            	self,
            	head
            )
        }
    }
}

function OuterCrawler_left_default(self, edge) {
    // item 5452
    self.state = "left";
}

function OuterCrawler_left_onEdge(self, edge) {
    var head
    // item 5515
    head = edge.head
    // item 5983
    if (head.down) {
        // item 5446
        self.state = "down";
        return head.down
    } else {
        // item 5985
        self.state = "left";
        return head.left
    }
}

function OuterCrawler_rightLoop_default(self, edge) {
    // item 7371
    self.state = "rightLoop";
}

function OuterCrawler_rightLoop_onEdge(self, edge) {
    // item 7370
    self.state = "downLoop";
    return edge.tail.down
}

function OuterCrawler_right_default(self, edge) {
    // item 5443
    self.state = "right";
}

function OuterCrawler_right_onEdge(self, edge) {
    var tail
    // item 5508
    tail = edge.tail
    // item 5727
    if (tail.up) {
        // item 5729
        self.state = null;
        return null
    } else {
        // item 5510
        addUpperCorner(
            self,
            tail
        )
        // item 5437
        self.state = "down";
        return tail.down
    }
}

function Params_draw(render, item) {
    var format, left, padding, texId, y
    // item 13012
    padding = Config.ICON_PADDING
    // item 12994
    format = getFormatForIcon(
        item.type
    )
    // item 12995
    texId = makeCustomTexture(
        render,
        item.x,
        item.y,
        item.w,
        item.h
    )
    // item 12993
    render.drawShape(
        texId,
        "rectangle",
        item.x,
        item.y,
        [item.w, item.h],
        format
    )
    // item 13015
    if (item.keyTb) {
        // item 13023
        left = item.x - item.w + padding
        y = item.y - item.h + padding
        // item 13030
        drawTextLeft(
            render,
            texId,
            item.keyTb.tokens,
            left,
            y
        )
        // item 13025
        if (item.tb) {
            // item 13022
            y += padding + item.keyTb.height
            // item 13024
            drawTextLeft(
                render,
                texId,
                item.tb.tokens,
                left,
                y
            )
        }
    } else {
        // item 13027
        if (item.tb) {
            // item 13029
            drawLeftTextInRect(
                render,
                texId,
                item.tb,
                item
            )
        }
    }
}

function Params_flow(render, item) {
    var height, keyTb, tb, width
    // item 12997
    width = 0
    height = 0
    // item 12998
    if (item.keyText) {
        // item 12996
        keyTb = flowText(
            render,
            item.keyText,
            Config.DEF_ICON_WIDTH
        )
        // item 13046
        keyTb.tokens.forEach(
            setKeywordColor
        )
        // item 13001
        width = keyTb.width
        height = keyTb.height
    }
    // item 13003
    if (item.text) {
        // item 13006
        if (height > 0) {
            // item 13002
            height += Config.ICON_PADDING
        }
        // item 12401
        tb = requestTextFlow(render, item)
        // item 13009
        width = Math.max(width, tb.width)
        height += tb.height
    }
    // item 12400
    item.tb = tb
    item.keyTb = keyTb
    item.w = snapSize(width)
    item.h = snapSize(height)
}

function Pause_draw(render, item) {
    var format, points, texId
    // item 13331
    format = getFormatForIcon(
        "loopbegin"
    )
    // item 13320
    points = makePausePoints(item.w, item.h)
    // item 13322
    texId = makeCustomTexture(
        render,
        item.x,
        item.y,
        item.w,
        item.h
    )
    // item 13321
    render.drawShape(
        texId,
        "poly",
        item.x,
        item.y,
        points,
        format
    )
    // item 13332
    drawCenterTextInRect(
        render,
        texId,
        item.tb,
        item
    )
}

function Pause_flow(render, item) {
    // item 13316
    Select_flow(render, item)
}

function Question_draw(render, item) {
    var ADD, box, diaWidth, fontHeight, format, labelColor, leftText, leftWidth, leftX, leftY, rightText, rightWidth, rightX, rightY, shape, texId, wn, wy
    // item 2628
    ADD = Config.SNAP
    // item 2629
    diaWidth = item.w + ADD
    // item 2613
    wy = yesWidth(render) * 1.2
    wn = noWidth(render)
    fontHeight = render.getFontHeight()
    // item 2624
    texId = render.createTexture(
    	item.x,
    	item.y,
    	- diaWidth,
    	- item.h,
    	diaWidth * 2 + Math.floor(1.5 * Math.max(wy, wn)),
    	item.h * 2 + fontHeight * 2,
    	"icons"
    )
    // item 2632
    shape = makeQuestionPoints(
    	item.w + 2,
    	item.h
    )
    // item 2667
    format = getFormatForIcon(item.type)
    // item 2631
    render.drawShape(
    	texId,
    	"poly",
    	item.x,
    	item.y,
    	shape,
    	format
    )
    // item 2677
    box = {
        x : item.x + Config.SNAP * 1,
        y : item.y,
        w : item.w,
        h : item.h
    }
    // item 2674
    drawLeftTextInRect(
        render,
        texId,
        item.tb,
        box
    )
    // item 2614
    if (item.flag1) {
        // item 2619
        leftWidth = wy
        rightWidth = wn
        leftText = yes()
        rightText = no()
    } else {
        // item 2618
        leftWidth = wn
        rightWidth = wy
        leftText = no()
        rightText = yes()
    }
    // item 2620
    leftX = -leftWidth - Math.floor(fontHeight / 4)
    leftY = item.h + Math.floor(fontHeight * 1.2)
    rightX = item.w + Math.floor(fontHeight * 0.6)
    rightY = -Math.floor(fontHeight * 0.3)
    // item 2623
    labelColor = getYesColor()
    // item 2626
    render.drawText(
    	texId,
    	leftText,
    	leftX + item.x,
    	leftY + item.y,
    	labelColor
    )
    // item 2627
    render.drawText(
    	texId,
    	rightText,
    	rightX + item.x,
    	rightY + item.y,
    	labelColor
    )
}

function Question_flow(render, item) {
    // item 2598
    Action_flow(
        render,
        item
    )
    // item 2599
    item.w += Config.SNAP * 1
}

function Select_draw(render, item) {
    var ADD, format, points, pos, texId
    // item 6394
    ADD = Config.SNAP / 2
    // item 6333
    format = getFormatForIcon(
        item.type
    )
    // item 6334
    texId = makeCustomTexture(
        render,
        item.x,
        item.y,
        item.w,
        item.h
    )
    // item 6361
    points = makeSelectPoints(
        item.w,
        item.h
    )
    // item 6332
    render.drawShape(
        texId,
        "poly",
        item.x,
        item.y,
        points,
        format
    )
    // item 6393
    pos = {
        x : item.x + ADD,
        y : item.y,
        w : item.w,
        h : item.h
    }
    // item 6331
    drawLeftTextInRect(
        render,
        texId,
        item.tb,
        pos
    )
}

function Select_flow(render, item) {
    // item 6340
    LoopBegin_flow(render, item)
}

function Selection() {
    // item 4603
    this.prims = {}
}

function SingleQuoter_Created_default(self, msg) {
    // item 1937
    self.state = "Created";
}

function SingleQuoter_Created_operator(self, msg) {
    // item 1953
    self.chars = [msg]
    // item 1928
    self.state = "Normal";
}

function SingleQuoter_Escaping_default(self, msg) {
    // item 1977
    addAnyChar(
        self,
        msg
    )
    // item 1952
    self.state = "Normal";
}

function SingleQuoter_Escaping_operator(self, msg) {
    // item 1976
    addAnyChar(
        self,
        msg
    )
    // item 1946
    self.state = "Normal";
}

function SingleQuoter_Normal_alpha(self, msg) {
    // item 1974
    addAnyChar(
        self,
        msg
    )
    // item 1944
    self.state = "Normal";
}

function SingleQuoter_Normal_digit(self, msg) {
    // item 1974
    addAnyChar(
        self,
        msg
    )
    // item 1944
    self.state = "Normal";
}

function SingleQuoter_Normal_operator(self, msg) {
    var token
    // item 19560001
    if (msg === module.SINGLE_QUOTE) {
        // item 1968
        addAnyChar(
            self,
            msg
        )
        // item 1963
        token = makeTokenFromChars(
            self,
            "string"
        )
        // item 1964
        self.next.completeToken(
            token
        )
        // item 1939
        self.state = null;
    } else {
        // item 19560002
        if (msg === module.BACK) {
            // item 1975
            addAnyChar(
                self,
                msg
            )
            // item 1967
            self.state = "Escaping";
        } else {
            // item 1965
            addAnyChar(
                self,
                msg
            )
            // item 1966
            self.state = "Normal";
        }
    }
}

function SingleQuoter_Normal_whitespace(self, msg) {
    // item 1974
    addAnyChar(
        self,
        msg
    )
    // item 1944
    self.state = "Normal";
}

function Skewer(vertical) {
    // item 3831
    this.id = ""
    this.nodes = []
    this.edges = []
    this.coord = -1
    this.boundary = 0
    this.vertical = vertical
}

function SkewerLink(low, high) {
    // item 4018
    this.low = low
    this.high = high
    this.distance = 0
}

function Socket(x, y, op, type) {
    // item 4480
    this.id = ""
    this.x = x
    this.y = y
    this.type = type
    this.op = op
    this.on = false
    // item 4495
    this.edge = null
    this.node = null
    this.links = []
    this.finalTarget = null
    // item 4535
    this.box = Utils.boxFromPoint(
        x,
        y,
        Config.SOCKET_TOUCH_RADIUS,
        Config.SOCKET_TOUCH_RADIUS
    )
}

function SourceFlower_Created_default(self, msg) {
    // item 2032
    self.state = "Created";
}

function SourceFlower_Created_init(self, msg) {
    // item 2050
    self.render = msg
    self.tokens = []
    self.widths = []
    self.lines = 0
    // item 2051
    self.fontHeight = self.render.getFontHeight()
    self.lineHeight = Math.floor(self.fontHeight *
      LineHeight)
    // item 2551
    self.height = self.fontHeight
    // item 2052
    self.y = self.fontHeight
    self.x = 0
    // item 2023
    self.state = "Normal";
}

function SourceFlower_Normal_eol(self, msg) {
    // item 2162
    if (self.lines > MaxLines) {
        // item 2586
        self.state = null;
    } else {
        // item 2082
        addLine(self)
        // item 2040
        self.state = "Normal";
    }
}

function SourceFlower_Normal_onToken(self, msg) {
    // item 2078
    if (msg.type == "whitespace") {
        // item 2159
        advanceOnWhitespace(
            self,
            msg
        )
    } else {
        // item 2183
        placeToken(
            self,
            msg
        )
    }
    // item 2034
    self.state = "Normal";
}

function Storage(type, name, version) {
    // item 2855
    this.type = type
    this.name = name
    this.nextId = 1
    this.items = {}
    this.version = version
    this.keywords = {}
    this.params = ""
}

function Sub() {
    // item 3403
    this.id = ""
    this.color = makeRandomColor()
    this.outer = {}
    this.inner = {}
    this.outerArrPads = {}
}

function Table(name) {
    var self
    // item 3148
    this.name = name
    this.nextId = 1
    this.rows = {}
    this.count = 0
    // item 3262
    self = this
    // item 3149
    this.insert = function(row) {
        return Table_insert(self, row)
    }
    // item 3162
    this.get = function(id) {
        return Table_get(self, id)
    }
    // item 3524
    this.remove = function(id) {
        return Table_remove(self, id)
    }
    // item 5976
    this.clear = function() {
        return Table_clear(self)
    }
}

function Table_clear(table) {
    // item 5982
    table.nextId = 1
    table.rows = {}
    table.count = 0
}

function Table_get(table, id) {
    var message, row
    // item 3172
    if (id) {
        // item 3171
        row = table.rows[id]
        // item 3168
        if (row) {
            // item 3180
            return row
        } else {
            // item 3177
            message = table.name + 
             " get: row not found. id=" +
             id
            // item 3178
            throw Error(message)
        }
    } else {
        // item 3175
        message = table.name + 
         " get: id is null or empty"
        // item 3178
        throw Error(message)
    }
}

function Table_insert(table, row) {
    var id, message
    // item 3159
    id = row.id
    // item 3155
    if (id) {
        
    } else {
        // item 3160
        id = table.nextId.toString()
        table.nextId++
        row.id = id
    }
    // item 3182
    if (id in table.rows) {
        // item 3184
        message = table.name + 
         " insert: id not unique. id=" +
         id
        // item 3186
        throw Error(message)
    } else {
        // item 3158
        table.rows[id] = row
        // item 3181
        table.count++
        // item 3161
        return id
    }
}

function Table_remove(table, id) {
    var row
    // item 3521
    row = table.rows[id]
    // item 3517
    if (row) {
        // item 3514
        delete table.rows[id]
        // item 3516
        table.count--
        // item 3523
        return row
    } else {
        // item 3522
        return null
    }
}

function TextLexer_Identifier_default(self, msg) {
    // item 2332
    self.next.addChar(msg)
    // item 2331
    self.state = "Identifier";
}

function TextLexer_Identifier_whitespace(self, msg) {
    // item 2371
    sendWhitespace(
        self,
        msg
    )
    // item 2323
    self.state = "Idle";
}

function TextLexer_Idle_alpha(self, msg) {
    // item 2309
    self.next.identifier(
        msg
    )
    // item 2285
    self.state = "Identifier";
}

function TextLexer_Idle_digit(self, msg) {
    // item 2309
    self.next.identifier(
        msg
    )
    // item 2285
    self.state = "Identifier";
}

function TextLexer_Idle_operator(self, msg) {
    // item 2309
    self.next.identifier(
        msg
    )
    // item 2285
    self.state = "Identifier";
}

function TextLexer_Idle_whitespace(self, msg) {
    // item 2311
    sendWhitespace(
        self,
        msg
    )
    // item 2294
    self.state = "Idle";
}

function Token(type) {
    // item 1552
    this.type = type
    this.text = null
}

function TokenBuilder_Building_addChar(self, msg) {
    // item 1590
    self.chars.push(
        msg
    )
    // item 1573
    self.state = "Building";
}

function TokenBuilder_Building_endToken(self, msg) {
    // item 1594
    endToken(self)
    // item 1582
    self.state = "Empty";
}

function TokenBuilder_Building_eol(self, msg) {
    // item 1595
    endToken(self)
    // item 1589
    self.next.eol()
    // item 1585
    self.state = "Empty";
}

function TokenBuilder_Building_finish(self, msg) {
    // item 1594
    endToken(self)
    // item 1582
    self.state = "Empty";
}

function TokenBuilder_Building_identifier(self, msg) {
    // item 1591
    endToken(self)
    // item 1586
    startToken(
        self,
        "identifier",
        msg
    )
    // item 1567
    self.state = "Building";
}

function TokenBuilder_Building_number(self, msg) {
    // item 1592
    endToken(self)
    // item 1587
    startToken(
        self,
        "number",
        msg
    )
    // item 1576
    self.state = "Building";
}

function TokenBuilder_Building_sendToken(self, msg) {
    // item 1593
    endToken(self)
    // item 1588
    self.next.onToken(
        msg
    )
    // item 1579
    self.state = "Empty";
}

function TokenBuilder_Empty_addChar(self, msg) {
    // item 1566
    console.error(
    	"unexpected addChar in state" +
    	self.state
    )
    // item 1510
    self.state = "Empty";
}

function TokenBuilder_Empty_eol(self, msg) {
    // item 1565
    self.next.eol()
    // item 1541
    self.state = "Empty";
}

function TokenBuilder_Empty_identifier(self, msg) {
    // item 1562
    startToken(
        self,
        "identifier",
        msg
    )
    // item 1501
    self.state = "Building";
}

function TokenBuilder_Empty_number(self, msg) {
    // item 1563
    startToken(
        self,
        "number",
        msg
    )
    // item 1532
    self.state = "Building";
}

function TokenBuilder_Empty_sendToken(self, msg) {
    // item 1564
    self.next.onToken(
        msg
    )
    // item 1535
    self.state = "Empty";
}

function TraverseStep(node1, node2) {
    // item 3531
    this.node1 = node1
    this.node2 = node2
    this.down = true
    this.back = false
}

function Undo() {
    // item 5152
    this.next = 0
    this.steps = []
}

function Visuals() {
    // item 2964
    this.header = null
    this.end = null
    this.params = null
    this.branches = []
    this.nextId = 1
    this.itemsToNodes = {}
    this.tempEdges = []
    // item 3352
    this.nodes = new Table("nodes")
    this.edges = new Table("edges")
    this.skewers = new Table("skewers")
    this.levels = new Table("levels")
    this.sockets = new Table("sockets")
    this.subs = new Table("subs")
    // item 7502
    this.byType = {}
    // item 3999
    this.skewerLinks = new MTable(
        "skewerLinks",
        ["low", "high"]
    )
    // item 4006
    this.levelLinks = new MTable(
        "levelLinks",
        ["low", "high"]
    )
}

function addAnyChar(self, ch) {
    // item 1852
    self.chars.push(ch)
}

function addArrowPad(sub, edge) {
    var targetId
    // item 7697
    if (edge.role == "down") {
        // item 7708
        targetId = edge.finalTarget.itemId
        // item 7700
        sub.outerArrPads[targetId] = edge
    }
}

function addBText(lines, id, type, text, one, two) {
    var btext, line, sep
    // item 10911
    sep = "|"
    // item 10918
    btext = bEncode(text)
    // item 10907
    line = id + sep +
    	type + sep +
    	btext
    // item 10908
    if (one) {
        // item 10912
        line += (sep + one)
    }
    // item 10913
    if (two) {
        // item 10916
        line += (sep + two)
    }
    // item 10917
    lines.push(line)
}

function addBranch(visuals, node) {
    var info
    // item 8260
    info = {
        node : node,
        addresses : [],
        topNode : null,
        bottomNode : null
    }
    // item 8259
    visuals.branches.push(info)
}

function addBranchToSearch(node, items, visited) {
    var visuals
    // item 12375
    visuals = module.visuals
    while (true) {
        // item 12356
        if ((node.type == "end") || (node.type == "address")) {
            break;
        }
        // item 12386
        if (node.itemId) {
            // item 12352
            if (node.itemId in visited) {
                break;
            }
            // item 12361
            addNodeToSearch(
                node,
                items,
                visited
            )
        }
        // item 123900001
        var _ind12390 = 0;
        var _col12390 = node.next;
        var _len12390 = _col12390.length;
        while (true) {
            // item 123900002
            if (_ind12390 < _len12390) {
                
            } else {
                break;
            }
            // item 123900004
            var next = _col12390[_ind12390];
            // item 12385
            addBranchToSearch(
                next,
                items,
                visited
            )
            // item 123900003
            _ind12390++;
        }
    }
}

function addCandy(x, y, result) {
    var handle
    // item 4761
    handle = {
        x : x,
        y : y
    }
    // item 4762
    result.push(handle)
}

function addChar(self, code) {
    // item 10650
    self.chars.push(code)
}

function addCharHandler(self, name) {
    // item 1860
    self[name] = function(ch) {
        addAnyChar(self, ch)
    }
}

function addCompleteResend(self, name) {
    var method
    // item 1743
    method = function(msg) {
        completeResend(self, name, msg)
    }
    // item 1744
    self[name] = method
}

function addEdgeSubRecord(records, edge) {
    var record, targetId
    // item 5893
    targetId = edge.finalTarget.itemId
    // item 5894
    record = {
        type : "edge",
        element : edge,
        targetId : targetId,
        id : edge.id
    }
    // item 5895
    records[targetId] = record
}

function addEdgeToSub(crawler, edge) {
    var existing, sub, targetId, visuals
    // item 5644
    visuals = module.visuals
    sub = crawler.sub
    targetId = edge.finalTarget.itemId
    // item 5607
    existing = sub.outer[targetId]
    // item 5601
    if ((existing) && (!(existing.type == "edge"))) {
        
    } else {
        // item 5904
        addEdgeSubRecord(
            sub.outer,
            edge
        )
    }
}

function addIfToBText(lines, item) {
    var btext, line, sep
    // item 12803
    sep = "|"
    // item 12810
    btext = bEncode(item.text)
    // item 12799
    line = item.id + sep +
    	item.type + sep +
    	btext + sep
    // item 12800
    if (item.flag1) {
        // item 12811
        line += "down"
    } else {
        // item 12812
        line += "right"
    }
    // item 12804
    line += (sep + item.one)
    // item 12808
    line += (sep + item.two)
    // item 12809
    lines.push(line)
}

function addInnerEdgeToSub(crawler, edge) {
    var sub
    // item 5642
    sub = crawler.sub
    // item 5905
    addEdgeSubRecord(
        sub.inner,
        edge
    )
}

function addItem(parentBlock, item) {
    var text
    // item 11333
    parentBlock.statement.items.push(item)
    // item 11334
    parentBlock.prev = item.type
    // item 11335
    text = item.text || ""
    // item 11336
    parentBlock.seqStart = isSeqStart(item)
}

function addItemWithLength(statement, item) {
    // item 11470
    statement.items.push(item)
    statement.length += item.length
}

function addKeyword(keywords, name, output) {
    // item 12935
    if (keywords[name]) {
        // item 12938
        output.push(name)
    }
}

function addLine(self) {
    // item 2275
    self.widths.push(
        self.x
    )
    // item 2182
    self.y += self.lineHeight
    self.x = 0
    self.height += self.lineHeight
    self.lines ++
}

function addLongOp(op) {
    var first, longs, second
    var _sw109640000_ = 0;
    // item 10985
    longs = module.longOps
    // item 109640000
    _sw109640000_ = op.length;
    // item 109640001
    if (_sw109640000_ === 2) {
        // item 10983
        first = getCreateObj(
            longs,
            op[0]
        )
        // item 10988
        getCreateObj(
            first,
            op[1]
        )
    } else {
        // item 109640002
        if (_sw109640000_ === 3) {
            
        } else {
            // item 109640003
            throw "Unexpected switch value: " + _sw109640000_;
        }
        // item 10986
        first = getCreateObj(
            longs,
            op[0]
        )
        // item 10987
        second = getCreateObj(
            first,
            op[1]
        )
        // item 10989
        second.three = true
        // item 10990
        getCreateObj(
            second,
            op[2]
        )
    }
}

function addLowerCorner(crawler, node) {
    var existing, oldNode, sub, targetId, visuals
    // item 5646
    visuals = module.visuals
    sub = crawler.sub
    targetId = node.finalTarget.itemId
    // item 5645
    existing = sub.outer[targetId]
    // item 5621
    if ((existing) && (!(existing.type == "edge"))) {
        // item 5629
        oldNode = existing.element
        // item 5630
        if (oldNode.down) {
            
        } else {
            // item 5906
            addNodeSubRecord(
                sub.outer,
                node
            )
        }
    } else {
        // item 5906
        addNodeSubRecord(
            sub.outer,
            node
        )
    }
}

function addNoWs(self, token) {
    // item 11194
    if ((token.type == "whitespace") || (token.type == "eol")) {
        
    } else {
        // item 11198
        if (token.type == "identifier") {
            // item 11203
            if (token.text in module.keyOps) {
                // item 11204
                token.type = "operator"
            } else {
                // item 11201
                if (token.text in module.keywords) {
                    // item 11202
                    token.type = "keyword"
                }
            }
        }
        // item 11193
        self.tokens.push(token)
    }
}

function addNodeSubRecord(records, node) {
    var record, targetId
    // item 5901
    targetId = node.finalTarget.itemId
    // item 5902
    record = {
        type : "node",
        element : node,
        targetId : targetId,
        id : node.id
    }
    // item 5903
    records[targetId] = record
}

function addNodeToSearch(node, items, visited) {
    var item, text, tokens
    // item 12367
    if (node) {
        // item 12370
        visited[node.itemId] = true
        // item 12411
        if (node.text) {
            // item 12371
            text = node.text
            tokens = lexSearch(text)
            // item 12372
            item = {
                id : node.itemId,
                type : node.type,
                tokens : tokens.tokens,
                tokensLow : tokens.tokensLow,
                text : text,
                textLow : text.toLowerCase(),
                occurences : []
            }
            // item 12373
            items.push(item)
        }
    }
}

function addOccurence(item, begin, end) {
    var occurence, ordinal, search
    // item 12493
    search = module.search
    ordinal = item.occurences.length
    // item 12492
    occurence = {
        item : item,
        id : item.id,
        begin : begin,
        end : end,
        before : "",
        match : "",
        after : "",
        active : true,
        ordinal : ordinal
    }
    // item 12494
    search.occurences.push(
        occurence
    )
    // item 12495
    item.occurences.push(
        occurence
    )
    // item 12496
    updateOccurence(
        occurence
    )
}

function addOne(headNode, node) {
    var selection
    // item 9937
    selection = module.selection
    // item 9938
    if (node.id in selection.prims) {
        // item 9932
        return headNode
    } else {
        // item 9928
        selection.prims[node.id] = "node"
        // item 9929
        if ((headNode) && (!(node.y < headNode.y))) {
            // item 9932
            return headNode
        } else {
            // item 9931
            return node
        }
    }
}

function addOp(self, token) {
    // item 11090
    self.tokens.push(token)
}

function addParameters() {
    var edits
    // item 6321
    if (module.visuals.params) {
        
    } else {
        // item 6318
        edits = addParamsEdits()
        // item 6317
        editAndSave(edits)
    }
}

function addParamsEdits() {
    var edits
    // item 6275
    edits = []
    // item 6277
    createItem(
        edits,
        {type: "params"}
    )
    // item 6276
    return edits
}

function addParamsSocket() {
    var header, socket, visuals
    // item 6264
    visuals = module.visuals
    header = visuals.header
    // item 6265
    if (visuals.params) {
        
    } else {
        // item 6262
        socket = new Socket(
            header.x + header.w,
            header.y,
            "params"
        )
        // item 6263
        visuals.sockets.insert(
            socket
        )
    }
}

function addParamsToSearch(node, items) {
    var item, text, tokens
    // item 12975
    if ((node) && (node.params)) {
        // item 12979
        text = node.params
        tokens = lexSearch(text)
        // item 12980
        item = {
            id : node.itemId,
            type : node.type,
            tokens : tokens.tokens,
            tokensLow : tokens.tokensLow,
            text : text,
            textLow : text.toLowerCase(),
            occurences : []
        }
        // item 12981
        items.push(item)
    }
}

function addPropertiesItem(node, menu) {
    var _sw128990000_ = 0;
    // item 128990000
    _sw128990000_ = node.type;
    // item 128990001
    if ((_sw128990000_ === "params") || (_sw128990000_ === "header")) {
        // item 12908
        pushSeparator(menu)
        // item 12909
        pushMenuItem(
            menu,
            "MES_PROPERTIES",
            null,
            changeDiagramProperties
        )
    }
}

function addRange(from, to) {
    // item 6009
    if (from) {
        // item 60120001
        var _ind6012 = 0;
        var _col6012 = from;
        var _len6012 = _col6012.length;
        while (true) {
            // item 60120002
            if (_ind6012 < _len6012) {
                
            } else {
                break;
            }
            // item 60120004
            var item = _col6012[_ind6012];
            // item 6014
            to.push(item)
            // item 60120003
            _ind6012++;
        }
    }
}

function addReplaceCommand(edits, id, type, newText) {
    // item 13039
    if (type == "params") {
        // item 13042
        updateDiagram(
            edits,
            {params: newText}
        )
    } else {
        // item 13041
        updateItem(
            edits,
            id,
            {text:newText}
        )
    }
}

function addSearchToken(self, token) {
    var tokenLow
    // item 12331
    tokenLow = {
        pos : token.pos,
        text : token.text.toLowerCase()
    }
    // item 12332
    self.tokens.push(token)
    self.tokensLow.push(tokenLow)
}

function addSelectToBText(lines, item) {
    var btext, caseIcon, items, line, sep
    // item 12787
    items = module.storage.items
    // item 12783
    sep = "|"
    // item 12785
    btext = bEncode(item.text)
    // item 12782
    line = item.id + sep +
    	item.type + sep +
    	btext
    // item 12788
    caseIcon = items[item.one]
    while (true) {
        // item 12789
        line += (sep + caseIcon.one + sep +
        	bEncode(caseIcon.text))
        // item 12790
        if (caseIcon.two) {
            
        } else {
            break;
        }
        // item 12791
        caseIcon = items[caseIcon.two]
    }
    // item 12784
    lines.push(line)
}

function addSingleItem(parentBlock, item) {
    // item 11314
    if (isSeparator(item)) {
        // item 11322
        addItem(
            parentBlock,
            item
        )
        // item 11323
        startStatement(
            parentBlock
        )
    } else {
        // item 11320
        if (isNewStart(parentBlock.prev, item)) {
            // item 11324
            startStatement(
                parentBlock
            )
            // item 11325
            addItem(
                parentBlock,
                item
            )
        } else {
            // item 11326
            addItem(
                parentBlock,
                item
            )
            // item 11316
            if (isSingleComment(item)) {
                // item 11319
                addItem(
                    parentBlock,
                    createEol()
                )
            }
        }
    }
}

function addSpaces(block) {
    var block2, statement2
    // item 11357
    block2 = createBlock2(block.seq)
    // item 113590001
    var _ind11359 = 0;
    var _col11359 = block.statements;
    var _len11359 = _col11359.length;
    while (true) {
        // item 113590002
        if (_ind11359 < _len11359) {
            
        } else {
            break;
        }
        // item 113590004
        var statement = _col11359[_ind11359];
        // item 11361
        statement2 = addSpacesToStatement(
            statement
        )
        // item 11364
        block2.statements.push(statement2)
        // item 11362
        block2.length += statement2.length
        // item 113590003
        _ind11359++;
    }
    // item 11363
    block2.length += (block2.statements.length - 1)
    // item 11358
    return block2
}

function addSpacesToStatement(statement) {
    var item2, result, state
    var _sw114000000_ = 0;
    var _sw128220000_ = 0;
    var _sw114360000_ = 0;
    // item 11395
    result = createStatement()
    // item 11399
    state = "operator"
    // item 113970001
    var _ind11397 = 0;
    var _col11397 = statement.items;
    var _len11397 = _col11397.length;
    while (true) {
        // item 113970002
        if (_ind11397 < _len11397) {
            
        } else {
            break;
        }
        // item 113970004
        var item = _col11397[_ind11397];
        // item 114000000
        _sw114000000_ = item.type;
        // item 114000001
        if (_sw114000000_ === "operator") {
            // item 11409
            item.length = item.text.length
            // item 11406
            if (item.text in module.noSpaces) {
                // item 11410
                addItemWithLength(
                    result,
                    item
                )
                // item 11429
                state = "identifier"
            } else {
                // item 128220000
                _sw128220000_ = item.text;
                // item 128220001
                if (_sw128220000_ === ":") {
                    // item 11414
                    addItemWithLength(
                        result,
                        item
                    )
                    // item 11415
                    addItemWithLength(
                        result,
                        createSpace()
                    )
                } else {
                    // item 128220002
                    if (_sw128220000_ === ".") {
                        // item 11420
                        addItemWithLength(
                            result,
                            createBreak()
                        )
                        // item 11419
                        addItemWithLength(
                            result,
                            item
                        )
                    } else {
                        // item 128220003
                        if ((_sw128220000_ === "++") || (_sw128220000_ === "--")) {
                            // item 12820
                            addItemWithLength(
                                result,
                                item
                            )
                        } else {
                            // item 128220005
                            if (((_sw128220000_ === "-") && (item.text == "-")) && ((state == "operator") || (state == "keyword"))) {
                                // item 11425
                                addItemWithLength(
                                    result,
                                    item
                                )
                            } else {
                                // item 11428
                                addItemWithLength(
                                    result,
                                    createSpace()
                                )
                                // item 11426
                                addItemWithLength(
                                    result,
                                    item
                                )
                                // item 11427
                                addItemWithLength(
                                    result,
                                    createSpace()
                                )
                            }
                        }
                    }
                }
                // item 11405
                state = item.type
            }
        } else {
            // item 114000002
            if (_sw114000000_ === "keyword") {
                // item 11435
                item.length = item.text.length
                // item 114360000
                _sw114360000_ = item.text;
                // item 114360001
                if (((_sw114360000_ === "else") || (_sw114360000_ === "finally")) || (_sw114360000_ === "catch")) {
                    // item 11454
                    addItemWithLength(
                        result,
                        createSpace()
                    )
                    // item 11452
                    addItemWithLength(
                        result,
                        item
                    )
                    // item 11750
                    addItemWithLength(
                        result,
                        createSpace()
                    )
                } else {
                    // item 114360004
                    if (_sw114360000_ === "try") {
                        // item 11730
                        addItemWithLength(
                            result,
                            item
                        )
                        // item 11749
                        addItemWithLength(
                            result,
                            createSpace()
                        )
                    } else {
                        // item 114360005
                        if ((_sw114360000_ === "this") || (_sw114360000_ === "super")) {
                            // item 11834
                            addItemWithLength(
                                result,
                                item
                            )
                        } else {
                            // item 11456
                            addItemWithLength(
                                result,
                                item
                            )
                            // item 11457
                            addItemWithLength(
                                result,
                                createSpace()
                            )
                        }
                    }
                }
            } else {
                // item 11430
                item2 = computeLength(item)
                // item 11431
                addItemWithLength(
                    result,
                    item2
                )
            }
            // item 11405
            state = item.type
        }
        // item 113970003
        _ind11397++;
    }
    // item 11396
    return result
}

function addToList(newItem, existing) {
    var prev
    // item 1246
    prev = existing.prev
    // item 1247
    prev.next = newItem
    newItem.prev = prev
    // item 1248
    newItem.next = existing
    existing.prev = newItem
}

function addToSelection(node) {
    var head, selection, wayDown, wayUp
    // item 9817
    selection = module.selection
    // item 9899
    if (selection.head) {
        // item 9905
        head = getNode(selection.head)
    } else {
        // item 9914
        head = null
    }
    // item 9820
    wayUp = findWayUp(
        node,
        head
    )
    // item 9821
    if (wayUp.length) {
        // item 9824
        selectPath(wayUp, head)
        // item 9816
        redrawCanvas()
        // item 9801
        return true
    } else {
        // item 9825
        wayDown = findWayUp(
            head,
            node
        )
        // item 9826
        if (wayDown.length) {
            // item 9841
            selectPath(wayDown, head)
            // item 9816
            redrawCanvas()
            // item 9801
            return true
        } else {
            // item 9831
            return false
        }
    }
}

function addToUndoCore(undo, before, commands, after) {
    var newSteps, step
    // item 5137
    newSteps = undo.steps.slice(
        0,
        undo.next
    )
    // item 5140
    step = {
        before : before,
        commands : commands,
        after : after,
        info : CallTrace.peek()
    }
    // item 5138
    newSteps.push(step)
    // item 5139
    undo.steps = newSteps
    undo.next = newSteps.length
}

function addTrace(name, args) {
    // item 1083
    CallTrace.add(name, args)
}

function addUpperCorner(crawler, node) {
    var sub
    // item 5648
    sub = crawler.sub
    // item 5907
    addNodeSubRecord(
        sub.outer,
        node
    )
}

function addressDestinations(node, menu) {
    var makeItem, notCurrent, selected
    // item 8684
    notCurrent = function(branch) {
        return branch.node != node.branch
    }
    // item 8685
    selected = module.visuals.branches.filter(
        notCurrent
    )
    // item 8705
    makeItem = function(branch) {
        makePointToItem(node, branch, menu)
    }
    // item 8704
    selected.forEach(
        makeItem
    )
}

function adjacentToAddress(record, source) {
    // item 8670
    if ((record.element.noBranch) && (source.tail.type == "address")) {
        // item 8674
        return true
    } else {
        // item 8675
        return false
    }
}

function advanceOnWhitespace(self, msg) {
    var x, x2
    // item 2160
    x = self.x
    // item 2154
    if (msg.text == "\t") {
        // item 2157
        x2 = getTabPosition(
            self,
            x
        )
    } else {
        // item 2158
        x2 = getSpaceWidth(self) + x
    }
    // item 2161
    self.x = x2
}

function arrayFrom(array) {
    var result
    // item 12726
    result = []
    // item 12723
    if (array) {
        // item 127280001
        var _ind12728 = 0;
        var _col12728 = array;
        var _len12728 = _col12728.length;
        while (true) {
            // item 127280002
            if (_ind12728 < _len12728) {
                
            } else {
                break;
            }
            // item 127280004
            var item = _col12728[_ind12728];
            // item 12730
            result.push(item)
            // item 127280003
            _ind12728++;
        }
    }
    // item 12727
    return result
}

function arrayToSet(array) {
    var result
    // item 13096
    result = {}
    // item 130940001
    var _ind13094 = 0;
    var _col13094 = array;
    var _len13094 = _col13094.length;
    while (true) {
        // item 130940002
        if (_ind13094 < _len13094) {
            
        } else {
            break;
        }
        // item 130940004
        var key = _col13094[_ind13094];
        // item 13098
        result[key] = true
        // item 130940003
        _ind13094++;
    }
    // item 13097
    return result
}

function arrowDown(ctrl, shift, visibleBox) {
    var first, node, nodes
    // item 11917
    nodes = getNodesFromSelection()
    // item 11918
    if (nodes.length == 0) {
        
    } else {
        // item 11922
        first = nodes[0]
        // item 11923
        if (first.down) {
            // item 11921
            node = getDown(first)
            // item 11924
            selectNode(node)
        } else {
            // item 11949
            node = findClosestNode(function(n) {
            	return n.y > first.y
            }, first, true)
            // item 11952
            if (node) {
                // item 11924
                selectNode(node)
            }
        }
    }
}

function arrowLeft(ctrl, shift, visibleBox) {
    var first, node, nodes
    // item 11925
    nodes = getNodesFromSelection()
    // item 11926
    if (nodes.length == 0) {
        
    } else {
        // item 11930
        first = nodes[0]
        // item 11931
        if (first.left) {
            // item 11929
            node = getLeft(first)
            // item 11932
            selectNode(node)
        } else {
            // item 11945
            node = findClosestNode(function(n) {
            	return n.x < first.x
            }, first, false)
            // item 11948
            if (node) {
                // item 11932
                selectNode(node)
            }
        }
    }
}

function arrowRight(ctrl, shift, visibleBox) {
    var first, node, nodes
    // item 11933
    nodes = getNodesFromSelection()
    // item 11934
    if (nodes.length == 0) {
        
    } else {
        // item 11938
        first = nodes[0]
        // item 11939
        if (first.right) {
            // item 11937
            node = getRight(first)
            // item 11940
            selectNode(node)
        } else {
            // item 11941
            node = findClosestNode(function(n) {
            	return n.x > first.x
            }, first, false)
            // item 11944
            if (node) {
                // item 11940
                selectNode(node)
            }
        }
    }
}

function arrowUp(ctrl, shift, visibleBox) {
    var first, node, nodes
    // item 11898
    nodes = getNodesFromSelection()
    // item 11899
    if (nodes.length == 0) {
        
    } else {
        // item 11914
        first = nodes[0]
        // item 11915
        if (first.up) {
            // item 11905
            node = getUp(first)
            // item 11916
            selectNode(node)
        } else {
            // item 11953
            node = findClosestNode(function(n) {
            	return n.y < first.y
            }, first, true)
            // item 11956
            if (node) {
                // item 11916
                selectNode(node)
            }
        }
    }
}

function autoFormat(type, text) {
    var tokens
    // item 11694
    if ((shouldAutoformat(type)) && (!(isHuman()))) {
        // item 11719
        tokens = lexSource(text)
        // item 11717
        tokens = prettify(tokens, type)
        // item 11701
        return printTokens(tokens)
    } else {
        // item 11699
        return text
    }
}

function autoSizeIcons() {
    
}

function bEncode(text) {
    var c, i, result
    // item 10931
    text = text || ""
    // item 10952
    result = ""
    // item 109530001
    i = 0;
    while (true) {
        // item 109530002
        if (i < text.length) {
            
        } else {
            break;
        }
        // item 10958
        c = text[i]
        // item 10955
        if (c == "\n") {
            // item 10959
            result += "\\n"
        } else {
            // item 10961
            if (c == "|") {
                // item 10960
                result += "\\|"
            } else {
                // item 10963
                result += c
            }
        }
        // item 109530003
        i++;
    }
    // item 10924
    return result
}

function beginBlockSelect() {
    // item 9764
    unselectEdges()
}

function blockSelect(box) {
    var changed, visuals
    // item 9784
    visuals = module.visuals
    changed = false
    // item 97760001
    var _ind9776 = 0;
    var _col9776 = visuals.nodes.rows;
    var _keys9776 = Object.keys(_col9776); 
    var _len9776 = _keys9776.length;
    while (true) {
        // item 97760002
        if (_ind9776 < _len9776) {
            
        } else {
            break;
        }
        // item 97760004
        var id = _keys9776[_ind9776]; var node = _col9776[id];
        // item 9783
        if ((((isSelected(id)) || (!(canSelectNode(node)))) || (!(Utils.boxesIntersect(node.box, box)))) || (!(addToSelection(node)))) {
            
        } else {
            // item 9794
            changed = true
        }
        // item 97760003
        _ind9776++;
    }
    // item 918
    return changed
}

function branchInsert(socket) {
    var branchId
    // item 9600
    branchId = getSocketBranchId(socket)
    // item 8955
    return branchInsertAt(branchId)
}

function branchInsertAt(branchId) {
    var edits, fields, name, targetId
    // item 8961
    edits = moveBranchIdsRight(
        branchId
    )
    // item 8964
    targetId = getBranchItemId(
        branchId
    )
    // item 8973
    name = nextBranchName()
    // item 8971
    fields = {
        type : "branch",
        branchId : branchId,
        text : name,
        one : targetId
    }
    // item 8966
    createItem(
        edits,
        fields
    )
    // item 8967
    return edits
}

function branchInsertEnd() {
    var branchId, branches, edits, endId, fields, name
    // item 9101
    branches = module.visuals.branches
    edits = []
    // item 9099
    branchId = branches.length + 1
    // item 9111
    endId = createItem(
        edits,
        {type: "end"}
    )
    // item 9110
    name = nextBranchName()
    // item 9109
    fields = {
        type : "branch",
        branchId : branchId,
        text : name,
        one : endId
    }
    // item 9104
    createItem(
        edits,
        fields
    )
    // item 9105
    return edits
}

function branchInsertL(node) {
    var branchId
    // item 9087
    branchId = node.branchId
    // item 9086
    return branchInsertAt(branchId)
}

function branchInsertR(node) {
    var branchId
    // item 9080
    branchId = node.branchId + 1
    // item 9079
    return branchInsertAt(branchId)
}

function branchLabel() {
    // item 10869
    return translate("DIA_BRANCH")
}

function branchMenu(node, menu) {
    var isLast, lowest
    // item 9067
    isLast = module.visuals.branches.length == node.branchId
    // item 9073
    pushMenuItem(
        menu,
        "MES_INSERT_BRANCH_LEFT",
        "branch.png",
        brutal(branchInsertL, node)
    )
    // item 9068
    if (isLast) {
        // item 9088
        lowest = goDown(node)
        // item 9090
        if (lowest.type == "end") {
            
        } else {
            // item 9071
            pushMenuItem(
                menu,
                "MES_INSERT_BRANCH_RIGHT",
                "branch.png",
                brutal(branchInsertR, node)
            )
            // item 9089
            pushMenuItem(
                menu,
                "MES_INSERT_END_BRANCH",
                "end.png",
                brutal(branchInsertEnd, null)
            )
        }
    } else {
        // item 9093
        pushMenuItem(
            menu,
            "MES_INSERT_BRANCH_RIGHT",
            "branch.png",
            brutal(branchInsertR, node)
        )
    }
}

function brutal(action, node) {
    // item 7958
    return function() {
    	var edits = action(node)
    	brutalChange(edits)
    }
}

function brutalChange(edits) {
    // item 7904
    if (edits.length) {
        // item 7908
        deselectAll()
        // item 7907
        editAndSave(edits)
    }
}

function buildArrowUp(visuals, loop) {
    var arrow, next1, top
    // item 7072
    top = createJunction(
        visuals,
        loop
    )
    // item 7086
    arrow = createEdge(
        visuals,
        loop,
        top,
        false
    )
    // item 7087
    arrow.role = "arrow"
    // item 7090
    next1 = loop.next[0]
    // item 7089
    makeDownEdge(
        visuals,
        loop,
        next1,
        next1
    )
    // item 7091
    return next1
}

function buildBackgroundMenu() {
    var menu, type
    // item 10296
    menu = []
    // item 10756
    if (module.readonly) {
        
    } else {
        // item 10289
        type = getClipboardType()
        // item 10290
        if ((type) && (!(type == "text"))) {
            // item 10294
            pushMenuItem(
                menu,
                "MES_PASTE",
                null,
                paste
            )
        }
    }
    // item 10295
    return menu
}

function buildBlockMenu() {
    // item 888
    var menu = [];
    // item 10271
    pushMenuItem(
        menu,
        "MES_COPY",
        null,
        easy(copy, null)
    )
    // item 10759
    if (module.readonly) {
        
    } else {
        // item 10272
        pushMenuItem(
            menu,
            "MES_CUT",
            null,
            easy(cut, null)
        )
        // item 10274
        pushSeparator(menu)
        // item 10273
        pushMenuItem(
            menu,
            "MES_DELETE",
            null,
            easy(deleteSelection, null)
        )
    }
    // item 891
    return menu;
}

function buildBoxes(visuals) {
    var bottom, edges, left, nodes, right, top, tr
    // item 4817
    tr = Config.SOCKET_TOUCH_RADIUS
    // item 4801
    nodes = visuals.nodes
    // item 47990001
    var _ind4799 = 0;
    var _col4799 = nodes.rows;
    var _keys4799 = Object.keys(_col4799); 
    var _len4799 = _keys4799.length;
    while (true) {
        // item 47990002
        if (_ind4799 < _len4799) {
            
        } else {
            break;
        }
        // item 47990004
        var id = _keys4799[_ind4799]; var node = _col4799[id];
        // item 4860
        if (isDrawableNode(node)) {
            // item 4802
            node.x = getX(node)
            node.y = getY(node)
            // item 4804
            if ((node.type == "junction") || (node.type == "arrow-loop")) {
                // item 4803
                node.box = Utils.boxFromPoint(
                    node.x,
                    node.y,
                    tr,
                    tr
                )
            } else {
                // item 4807
                node.box = Utils.boxFromPoint(
                    node.x,
                    node.y,
                    node.w,
                    node.h
                )
            }
        }
        // item 47990003
        _ind4799++;
    }
    // item 4808
    edges = visuals.edges
    // item 48090001
    var _ind4809 = 0;
    var _col4809 = edges.rows;
    var _keys4809 = Object.keys(_col4809); 
    var _len4809 = _keys4809.length;
    while (true) {
        // item 48090002
        if (_ind4809 < _len4809) {
            
        } else {
            break;
        }
        // item 48090004
        var id = _keys4809[_ind4809]; var edge = _col4809[id];
        // item 4811
        if (edge.vertical) {
            // item 4818
            left = edge.head.x - tr
            top = edge.head.y
            right = edge.head.x + tr
            bottom = edge.tail.y
        } else {
            // item 4816
            left = edge.head.x
            top = edge.head.y - tr
            right = edge.tail.x
            bottom = edge.head.y + tr
        }
        // item 4819
        edge.box = new Utils.Box(
            left,
            top,
            right,
            bottom
        )
        // item 48090003
        _ind4809++;
    }
}

function buildDoubleQuoter() {
    var machine
    // item 1844
    machine = new DoubleQuoter()
    // item 1845
    machine.eol = function() {
        errorOnEol(machine)
    }
    // item 1853
    machine.finish = function() {
        errorOnFinish(machine)
    }
    // item 1846
    return machine
}

function buildDrnCandies(item) {
    var bottom, candies, left, right, top
    // item 4765
    candies = []
    // item 4755
    left = item.x - item.w
    right = item.x + item.w
    top = item.y - item.h
    bottom = item.y + item.h
    // item 4749
    addCandy(
        left,
        top,
        candies
    )
    // item 4750
    addCandy(
        left,
        item.y,
        candies
    )
    // item 4751
    addCandy(
        left,
        bottom,
        candies
    )
    // item 4752
    addCandy(
        right,
        top,
        candies
    )
    // item 4753
    addCandy(
        right,
        item.y,
        candies
    )
    // item 4754
    addCandy(
        right,
        bottom,
        candies
    )
    // item 4763
    addCandy(
        item.x,
        top,
        candies
    )
    // item 4764
    addCandy(
        item.x,
        bottom,
        candies
    )
    // item 4766
    return candies
}

function buildManhattan(visuals, startNode) {
    var bottom, jun2, jun3, mountRight, mountUp, node1, node2, stack, step, top
    // item 3525
    stack = []
    // item 7165
    planNextSteps(
        visuals,
        stack,
        startNode
    )
    while (true) {
        // item 3685
        if (stack.length == 0) {
            break;
        }
        // item 3547
        step = stack.pop()
        // item 3558
        node1 = step.node1
        node2 = step.node2
        // item 7095
        if (step.back) {
            // item 7097
            if (step.down) {
                // item 7324
                if (node2.rightEdge) {
                    // item 7327
                    jun2 = splitRight(
                        visuals,
                        node2.rightEdge
                    )
                    // item 7328
                    makeDownEdge(
                        visuals,
                        node1,
                        jun2,
                        node2
                    )
                } else {
                    // item 7323
                    turn180up(
                        visuals,
                        node1,
                        node2
                    )
                }
            } else {
                // item 7170
                top = getRight(node2)
                // item 7296
                if (node2.upEdge) {
                    // item 7310
                    bottom = splitVerticalUp(
                        visuals,
                        node2.upEdge
                    )
                } else {
                    // item 7171
                    bottom = createJunction(
                        visuals,
                        node2
                    )
                    // item 7172
                    makeUpEdge(
                        visuals,
                        top,
                        bottom,
                        node2
                    )
                }
                // item 7174
                node2.rightEdge = makeRightEdge(
                    visuals,
                    node1,
                    bottom,
                    node2
                )
            }
        } else {
            // item 7166
            if (step.down) {
                
            } else {
                // item 7169
                node1 = turnDown(
                    visuals,
                    node1,
                    node2
                )
            }
            // item 3551
            if ((node2.prev.length == 1) || (!(node2.up))) {
                // item 3554
                makeDownEdge(
                    visuals,
                    node1,
                    node2,
                    node2
                )
                // item 3610
                planNextSteps(
                    visuals,
                    stack,
                    node2
                )
            } else {
                // item 3657
                mountUp = node2.mountUp
                mountRight = node2.mountRight
                // item 3593
                if (mountUp) {
                    // item 4305
                    makeDownEdge(
                        visuals,
                        node1,
                        mountUp,
                        node2
                    )
                    // item 3658
                    if (mountUp == node2.mountUp) {
                        // item 3596
                        node2.mountUp = null
                    }
                } else {
                    // item 3598
                    jun2 = createLeftUp(
                        visuals,
                        node2,
                        node2
                    )
                    // item 4307
                    makeDownEdge(
                        visuals,
                        node1,
                        jun2,
                        node2
                    )
                    // item 3600
                    if (mountRight) {
                        // item 4308
                        makeLeftEdge(
                            visuals,
                            mountRight,
                            jun2,
                            node2
                        )
                    } else {
                        // item 3606
                        jun3 = splitVertical(
                            visuals,
                            node2
                        )
                        // item 4309
                        makeLeftEdge(
                            visuals,
                            jun3,
                            jun2,
                            node2
                        )
                    }
                }
            }
        }
    }
}

function buildMenuAt(x, y) {
    var draggable, item, menu, node, nodes
    // item 853
    menu = []
    item = null
    // item 7832
    draggable = findVisualItem(
        x,
        y
    )
    // item 7834
    if (draggable) {
        // item 7838
        if (draggable.elType == "node") {
            // item 7837
            node = getNode(draggable.id)
            // item 9563
            if ((node.type == "end") || (node.type == "junction")) {
                
            } else {
                // item 10283
                nodes = getNodesFromSelection()
                // item 10280
                if (nodes.length > 1) {
                    // item 10279
                    menu = buildBlockMenu()
                } else {
                    // item 10762
                    if (module.readonly) {
                        // item 10764
                        menu = buildMenuByTypeRo(node)
                    } else {
                        // item 7959
                        menu = buildMenuByType(node)
                    }
                }
                // item 7833
                item = {
                    type : node.type,
                    id : node.itemId,
                    text : node.text
                }
                // item 12699
                item.tokens = getNodeTokens(node)
                // item 12713
                if (item.tokens) {
                    
                } else {
                    // item 12715
                    item.lines = getNodeLines(node)
                }
            }
        }
    } else {
        // item 10298
        menu = buildBackgroundMenu()
    }
    // item 849
    return {
        menu : menu,
        item : item
    }
}

function buildMenuByType(node) {
    var cf, left, menu
    var _sw78450000_ = 0;
    // item 7853
    menu = []
    // item 7857
    if (canEditNodeText(node)) {
        // item 13165
        if (node.type == "input") {
            // item 13164
            pushMenuItem(
                menu,
                "MES_CHANGE_UPPER",
                null,
                function() {startEditUpperText(node.id)}
            )
        }
        // item 7872
        pushMenuItem(
            menu,
            "MES_CHANGE_TEXT",
            null,
            function() {startEditText(node.id)}
        )
        // item 7865
        pushSeparator(menu)
    }
    // item 9173
    cf = getCopyFunction(node)
    // item 9226
    if (cf) {
        // item 9176
        pushMenuItem(
            menu,
            "MES_COPY",
            null,
            easy(copy, null)
        )
        // item 9558
        if (canDelete(node)) {
            // item 9557
            pushMenuItem(
                menu,
                "MES_CUT",
                null,
                easy(cutOneItem, node)
            )
        }
    }
    // item 9743
    pushSeparator(menu)
    // item 9744
    if (canEditNodeText(node)) {
        // item 9749
        pushMenuItem(
            menu,
            "MES_COPY_TEXT",
            null,
            easy(copyText, node)
        )
    }
    // item 9717
    if (getClipboardType() == "text") {
        // item 9720
        pushMenuItem(
            menu,
            "MES_PASTE_TEXT",
            null,
            easy(pasteText, node)
        )
    }
    // item 9177
    pushSeparator(menu)
    // item 78450000
    _sw78450000_ = node.type;
    // item 78450001
    if (_sw78450000_ === "header") {
        
    } else {
        // item 78450002
        if (_sw78450000_ === "question") {
            // item 7912
            pushMenuItem(
                menu,
                "MES_SWAP_YES_NO",
                null,
                mild(swapYesNo, node)
            )
        } else {
            // item 78450003
            if (_sw78450000_ === "case") {
                // item 7988
                left = getLeftCase(node)
                // item 7966
                pushMenuItem(
                    menu,
                    "MES_INSERT_CASE_RIGHT",
                    "case.png",
                    brutal(caseInsertCore, node)
                )
                // item 7925
                if (left == null) {
                    // item 7967
                    pushMenuItem(
                        menu,
                        "MES_INSERT_CASE_LEFT",
                        "case.png",
                        brutal(firstCaseInsertCore, node)
                    )
                } else {
                    // item 7989
                    pushMenuItem(
                        menu,
                        "MES_INSERT_CASE_LEFT",
                        "case.png",
                        brutal(caseInsertCore, left)
                    )
                }
            } else {
                // item 78450004
                if (_sw78450000_ === "address") {
                    // item 8678
                    addressDestinations(
                        node,
                        menu
                    )
                } else {
                    // item 78450005
                    if (_sw78450000_ === "branch") {
                        // item 9061
                        branchMenu(
                            node,
                            menu
                        )
                    }
                }
            }
        }
    }
    // item 7882
    if (canDelete(node)) {
        // item 7893
        pushSeparator(menu)
        // item 7887
        pushMenuItem(
            menu,
            "MES_DELETE",
            null,
            brutal(deleteOne, node)
        )
    }
    // item 12910
    addPropertiesItem(node, menu)
    // item 7854
    return menu
}

function buildMenuByTypeRo(node) {
    var copy, menu
    // item 10778
    menu = []
    // item 10782
    if (canEditNodeText(node)) {
        // item 10786
        pushMenuItem(
            menu,
            "MES_CHANGE_TEXT",
            null,
            function() {startEditText(node.id)}
        )
        // item 10785
        pushSeparator(menu)
    }
    // item 10808
    copy = getCopyFunction(node)
    // item 10811
    if (copy) {
        // item 10809
        pushMenuItem(
            menu,
            "MES_COPY",
            null,
            easy(copy, node)
        )
    }
    // item 10822
    pushSeparator(menu)
    // item 10823
    if (canEditNodeText(node)) {
        // item 10826
        pushMenuItem(
            menu,
            "MES_COPY_TEXT",
            null,
            easy(copyText, node)
        )
    }
    // item 12898
    addPropertiesItem(node, menu)
    // item 10779
    return menu
}

function buildSingleQuoter() {
    var machine
    // item 1981
    machine = new SingleQuoter()
    // item 1982
    machine.eol = function() {
        errorOnEol(machine)
    }
    // item 1984
    machine.finish = function() {
        errorOnFinish(machine)
    }
    // item 1983
    return machine
}

function buildSkewers(visuals) {
    // item 38610001
    var _ind3861 = 0;
    var _col3861 = visuals.nodes.rows;
    var _keys3861 = Object.keys(_col3861); 
    var _len3861 = _keys3861.length;
    while (true) {
        // item 38610002
        if (_ind3861 < _len3861) {
            
        } else {
            break;
        }
        // item 38610004
        var id = _keys3861[_ind3861]; var node = _col3861[id];
        // item 3863
        if (((node.up) || (!(node.down))) || (node.skewer)) {
            
        } else {
            // item 3867
            traceSkewer(
                visuals,
                node
            )
        }
        // item 38610003
        _ind3861++;
    }
    // item 39450001
    var _ind3945 = 0;
    var _col3945 = visuals.nodes.rows;
    var _keys3945 = Object.keys(_col3945); 
    var _len3945 = _keys3945.length;
    while (true) {
        // item 39450002
        if (_ind3945 < _len3945) {
            
        } else {
            break;
        }
        // item 39450004
        var id = _keys3945[_ind3945]; var node = _col3945[id];
        // item 3947
        if (node.left) {
            
        } else {
            // item 3951
            traceLevel(
                visuals,
                node
            )
        }
        // item 39450003
        _ind3945++;
    }
}

function buildSubspaces() {
    var visuals
    // item 5339
    visuals = module.visuals
    // item 8584
    if (visuals.branches.length == 1) {
        // item 8587
        crawlSubdiagram(
            visuals.header.down
        )
    } else {
        // item 85880001
        var _ind8588 = 0;
        var _col8588 = visuals.branches;
        var _len8588 = _col8588.length;
        while (true) {
            // item 85880002
            if (_ind8588 < _len8588) {
                
            } else {
                break;
            }
            // item 85880004
            var branch = _col8588[_ind8588];
            // item 8590
            crawlSubdiagram(
                branch.node.down
            )
            // item 85880003
            _ind8588++;
        }
    }
}

function buildTextBoxes() {
    
}

function buildTextLexer() {
    var self
    // item 2377
    self = new TextLexer()
    // item 2378
    self.eol = function() {
        JsLexer_eol(self)
    }
    // item 2380
    self.finish = function() {
        JsLexer_finish(self)
    }
    // item 2379
    return self
}

function buildVisuals() {
    var byBranchId, context, node, render, storage, visuals
    var _sw36740000_ = 0;
    // item 3000
    storage = module.storage
    render = module.render
    // item 2979
    visuals = new Visuals()
    // item 2999
    visuals.header = createNode(
        visuals,
        null,
        "header",
        storage.name,
        "header"
    )
    // item 13284
    visuals.header.header = true
    // item 3023
    flowIcon(render, visuals.header)
    // item 6279
    visuals.params = createParamsNode(
        storage,
        visuals
    )
    // item 30080001
    var _ind3008 = 0;
    var _col3008 = storage.items;
    var _keys3008 = Object.keys(_col3008); 
    var _len3008 = _keys3008.length;
    while (true) {
        // item 30080002
        if (_ind3008 < _len3008) {
            
        } else {
            break;
        }
        // item 30080004
        var id = _keys3008[_ind3008]; var item = _col3008[id];
        // item 3020
        node = nodeFromItem(
            visuals,
            item
        )
        // item 3024
        flowIcon(render, node)
        // item 36740000
        _sw36740000_ = item.type;
        // item 36740001
        if (_sw36740000_ === "branch") {
            // item 3022
            addBranch(visuals, node)
        } else {
            // item 36740002
            if (_sw36740000_ === "end") {
                // item 3697
                visuals.end = node
            }
        }
        // item 30080003
        _ind3008++;
    }
    // item 3027
    byBranchId = function(branch) {
        return branch.node.branchId
    }
    // item 3028
    Utils.sort(
        visuals.branches,
        byBranchId
    )
    // item 30320001
    var _ind3032 = 0;
    var _col3032 = visuals.branches;
    var _len3032 = _col3032.length;
    while (true) {
        // item 30320002
        if (_ind3032 < _len3032) {
            
        } else {
            break;
        }
        // item 30320004
        var branch = _col3032[_ind3032];
        // item 8363
        context = {
            visuals : visuals,
            addresses : []
        }
        // item 3043
        linkNodeToChildren(
            context,
            branch.node.itemId
        )
        // item 8364
        branch.addresses = context.addresses
        // item 30320003
        _ind3032++;
    }
    // item 8305
    if (visuals.branches.length > 1) {
        // item 8309
        layoutSilhouette(visuals)
    } else {
        // item 8308
        layoutPrimitive(visuals)
    }
    // item 3921
    buildSkewers(
        visuals
    )
    // item 39220001
    var _ind3922 = 0;
    var _col3922 = visuals.skewers.rows;
    var _keys3922 = Object.keys(_col3922); 
    var _len3922 = _keys3922.length;
    while (true) {
        // item 39220002
        if (_ind3922 < _len3922) {
            
        } else {
            break;
        }
        // item 39220004
        var id = _keys3922[_ind3922]; var skewer = _col3922[id];
        // item 3924
        setSameWidth(skewer)
        // item 39220003
        _ind3922++;
    }
    // item 6631
    setSameHeight(visuals)
    // item 3971
    positionSkewers(
        visuals
    )
    // item 4140
    positionLevels(
        visuals
    )
    // item 6282
    drawParams(
        visuals
    )
    // item 7293
    removeTempEdges(
        visuals
    )
    // item 6299
    buildBoxes(
        visuals
    )
    // item 8842
    forType(
        visuals,
        "address",
        putCycleMark
    )
    // item 2980
    return visuals
}

function buildVisualsForEdit() {
    var visuals
    // item 5467
    visuals = buildVisuals()
    // item 5463
    module.visuals = visuals
    // item 5464
    precacheEdgesLinks(
        visuals
    )
    // item 5466
    buildSubspaces()
    // item 6180
    connectLoops()
    // item 6252
    traceLoops()
    // item 7525
    forType(
        visuals,
        "arrow-loop",
        markArrow
    )
}

function builderOperatorBuilder() {
    var machine
    // item 1737
    machine = new OperatorBuilder()
    // item 1748
    addCompleteResend(machine, "alpha")
    addCompleteResend(machine, "digit")
    addCompleteResend(machine, "whitespace")
    addCompleteResend(machine, "eol")
    addCompleteResend(machine, "finish")
    // item 1749
    return machine
}

function calculateCommandUndo(storage, command) {
    var items, old, undo
    var _sw51020000_ = 0;
    // item 5084
    if (command.type === "insert") {
        
    } else {
        // item 5082
        items = storage.items
        // item 51020000
        _sw51020000_ = command.table;
        // item 51020001
        if (_sw51020000_ === "items") {
            // item 5080
            old = items[command.id]
            // item 5087
            if (command.type === "update") {
                // item 5114
                undo = takeOldValues(
                    command.fields,
                    old
                )
            } else {
                // item 5143
                undo = Utils.copyObject(old)
            }
        } else {
            // item 51020002
            if (_sw51020000_ === "diagrams") {
                
            } else {
                // item 51020003
                throw "Unexpected switch value: " + _sw51020000_;
            }
            // item 5115
            undo = takeOldValues(
                command.fields,
                storage
            )
        }
        // item 5083
        command.undo = undo
    }
}

function calculateSkewerPos(skewers, links, skewer, pos) {
    var closest, next, nextPos
    // item 4126
    if (skewer.coord < pos) {
        // item 4125
        skewer.coord = pos
        // item 4129
        closest = links.get(skewer.id)
        // item 4130
        if (closest) {
            // item 41330001
            var _ind4133 = 0;
            var _col4133 = closest;
            var _keys4133 = Object.keys(_col4133); 
            var _len4133 = _keys4133.length;
            while (true) {
                // item 41330002
                if (_ind4133 < _len4133) {
                    
                } else {
                    break;
                }
                // item 41330004
                var _ = _keys4133[_ind4133]; var link = _col4133[_];
                // item 4135
                nextPos = pos + link.distance
                // item 4137
                next = skewers.get(
                    link.high
                )
                // item 4138
                calculateSkewerPos(
                    skewers,
                    links,
                    next,
                    nextPos
                )
                // item 41330003
                _ind4133++;
            }
        }
    }
}

function calculateUndo(edits) {
    var storage
    // item 5142
    storage = module.storage
    // item 50700001
    var _ind5070 = 0;
    var _col5070 = edits;
    var _len5070 = _col5070.length;
    while (true) {
        // item 50700002
        if (_ind5070 < _len5070) {
            
        } else {
            break;
        }
        // item 50700004
        var command = _col5070[_ind5070];
        // item 5072
        calculateCommandUndo(
            storage,
            command
        )
        // item 50700003
        _ind5070++;
    }
}

function callEditMethod(name, method, args) {
    // item 10730
    if (module.readonly) {
        // item 10734
        return undefined
    } else {
        // item 10729
        addTrace(name, args)
        // item 10733
        return method.apply(
            undefined,
            args
        )
    }
}

function callMethod(self, methodName, argArray) {
    var method
    // item 1280
    method = self[methodName]
    // item 1281
    if (method) {
        // item 1284
        return method.apply(
            self,
            argArray
        )
    } else {
        // item 1285
        return null
    }
}

function canComeBackTo(src, loops) {
    var context
    // item 8064
    context = {
        visited : {},
        finished : false,
        success : false,
        loops : loops
    }
    // item 8066
    canComeBackToStep(
        context,
        src
    )
    // item 8065
    return context.success
}

function canComeBackToStep(context, node) {
    var loops, visited
    // item 8067
    loops = context.loops
    visited = context.visited
    // item 8037
    if (context.finished) {
        
    } else {
        // item 8034
        if (node.itemId in loops) {
            // item 8040
            context.finished = true
        } else {
            // item 8041
            if (node.id in visited) {
                
            } else {
                // item 8043
                visited[node.id] = true
                // item 8044
                if (isSubset(node.loops, loops)) {
                    // item 8045
                    context.finished = true
                    context.success = true
                } else {
                    // item 80610001
                    var _ind8061 = 0;
                    var _col8061 = node.prev;
                    var _len8061 = _col8061.length;
                    while (true) {
                        // item 80610002
                        if (_ind8061 < _len8061) {
                            
                        } else {
                            break;
                        }
                        // item 80610004
                        var prev = _col8061[_ind8061];
                        // item 8063
                        canComeBackToStep(
                            context,
                            prev
                        )
                        // item 80610003
                        _ind8061++;
                    }
                }
            }
        }
    }
}

function canDelete(node) {
    var _sw48990000_ = 0;
    // item 48990000
    _sw48990000_ = node.type;
    // item 48990001
    if (((((_sw48990000_ === "junction") || (_sw48990000_ === "header")) || (_sw48990000_ === "arrow-loop")) || (_sw48990000_ === "address")) || (_sw48990000_ === "end")) {
        // item 4909
        return false
    } else {
        // item 48990006
        if (_sw48990000_ === "branch") {
            // item 9010
            return canDeleteBranch()
        } else {
            // item 48990007
            if (_sw48990000_ === "case") {
                // item 6776
                return canDeleteCase(node)
            } else {
                // item 4910
                return true
            }
        }
    }
}

function canDeleteBranch() {
    // item 9015
    return module.visuals.branches.length > 2
}

function canDeleteCase(caseNode) {
    var select
    // item 7820
    select = caseNode.select
    // item 7816
    if ((select.cases.length > 2) && (!(select.cases[0] == caseNode))) {
        // item 7815
        return true
    } else {
        // item 7819
        return false
    }
}

function canEditNodeText(node) {
    var noText
    // item 5245
    noText = {
        junction : true,
        end : true,
        "arrow-loop" : true,
        address : true
    }
    // item 5242
    if (node.type in noText) {
        // item 5246
        return false
    } else {
        // item 5241
        return true
    }
}

function canEditText(x, y) {
    var node, prim
    // item 5297
    prim = findVisualItem(
        x,
        y
    )
    // item 5298
    if (((prim) && (prim.id)) && (prim.elType == "node")) {
        // item 5301
        node = getNode(prim.id)
        // item 5302
        if (canEditNodeText(node)) {
            // item 5305
            return prim.id
        } else {
            // item 405
            return null
        }
    } else {
        // item 405
        return null
    }
}

function canOuterToInner(record, source) {
    var sourceBottom, sourceStop, targetNode, targetStop, targetTop
    // item 7610
    if (record.type == "node") {
        // item 7613
        targetNode = record.element
        // item 7620
        targetTop = goUp(targetNode)
        // item 7657
        if (targetTop.y <= source.head.y) {
            // item 7662
            targetStop = goDown(targetNode)
            sourceBottom = goDown(source.head)
            sourceStop = goLeft(sourceBottom)
            // item 7663
            if (sourceStop == targetStop) {
                // item 7661
                return false
            } else {
                // item 7660
                return true
            }
        } else {
            // item 7661
            return false
        }
    } else {
        // item 7716
        if (record.element.vertical) {
            // item 7614
            targetNode = record.element.tail
            // item 7620
            targetTop = goUp(targetNode)
            // item 7657
            if (targetTop.y <= source.head.y) {
                // item 7662
                targetStop = goDown(targetNode)
                sourceBottom = goDown(source.head)
                sourceStop = goLeft(sourceBottom)
                // item 7663
                if (sourceStop == targetStop) {
                    // item 7661
                    return false
                } else {
                    // item 7660
                    return true
                }
            } else {
                // item 7661
                return false
            }
        } else {
            // item 7719
            return true
        }
    }
}

function canSelectNode(node) {
    // item 9791
    return node.type in module.selectable
}

function canStartRegex(self) {
    // item 11797
    if ((self.prev) && (((((((self.prev.type == "number") || (self.prev.type == "string")) || (self.prev.type == "identifier")) || (self.prev.type == "regex")) || (self.prev.text == ")")) || (self.prev.text == "]")) || (self.prev.text == "}"))) {
        // item 11802
        return false
    } else {
        // item 11800
        return true
    }
}

function canTransplant(targetId, source) {
    // item 6942
    if ((source.finalTarget.itemId == targetId) || (!(sameLoop(source.links, targetId)))) {
        // item 6946
        return false
    } else {
        // item 6945
        return true
    }
}

function caseInsert(socket) {
    var existing
    // item 6755
    existing = socket.node
    // item 6727
    return caseInsertCore(existing)
}

function caseInsertCore(existing, item) {
    var caseId, edits, fields, right, targetId
    // item 9510
    edits = []
    // item 7945
    targetId = existing.next[0].itemId
    // item 7943
    item = item || {}
    fields = Utils.copyObject(item)
    fields.one = targetId
    fields.type = "case"
    // item 7946
    if (existing.next.length == 2) {
        // item 7950
        right = existing.next[1]
        // item 9509
        fields.two = right.itemId
    } else {
        // item 9508
        fields.two = null
    }
    // item 9507
    caseId = createItem(
        edits,
        fields
    )
    // item 7952
    updateItem(
        edits,
        existing.itemId,
        {two:caseId}
    )
    // item 7944
    return edits
}

function changeDiagramProperties() {
    var hide, machine, name, props, ro, set, show, storage
    // item 12882
    show = module.callbacks.showChangeDiaProps
    hide = module.callbacks.hideCentral
    // item 12877
    if ((show) && (hide)) {
        // item 12967
        set = function(props) {
        	module.callbacks.hideCentral()
        	setProperties(props)
        }
        // item 12962
        machine = {
            onData : set,
            cancel : hide
        }
        // item 12965
        storage = module.storage
        // item 12964
        ro = module.readonly
        name = storage.name
        // item 12966
        props = {
            keywords : storage.keywords,
            params : storage.params
        }
        // item 12963
        show(
            machine,
            name,
            props,
            ro
        )
    } else {
        // item 12881
        return null;
    }
}

function changeSearch(input) {
    var search
    // item 12135
    search = module.search
    // item 12112
    search.input = Utils.copyObject(input)
    // item 12117
    performSearch()
    // item 12114
    if (search.occurences.length == 0) {
        // item 12119
        search.output.current = -1
    } else {
        // item 12118
        search.output.current = 0
    }
    // item 12120
    updateSearchOutput()
    // item 12121
    return getSearchState()
}

function checkInputText(text) {
    // item 5278
    if (module.readonly) {
        // item 5281
        return "ERR_READONLY"
    } else {
        // item 5270
        if ((text) && (text.length > Config.MAX_TEXT)) {
            // item 5276
            return "ERR_TEXT_TOO_LONG"
        } else {
            // item 5277
            return null
        }
    }
}

function classifyChar(code) {
    // item 1449
    if (code == 10) {
        // item 1452
        return "eol"
    } else {
        // item 1218
        if (isDigit(code)) {
            // item 1221
            return "digit"
        } else {
            // item 1222
            if (isOperator(code)) {
                // item 1225
                return "operator"
            } else {
                // item 1226
                if (isWhitespace(code)) {
                    // item 1228
                    return "whitespace"
                } else {
                    // item 1229
                    return "alpha"
                }
            }
        }
    }
}

function clearFormat(ids, format) {
    
}

function clearSockets() {
    // item 5973
    module.visuals.sockets.clear()
}

function clearUndo() {
    // item 560
    module.undo = new Undo()
    // item 12081
    rebuildSearchState()
}

function clickArrowSocket(socket) {
    var edits, item, newId
    // item 6971
    edits = []
    // item 7587
    item = {
        type : "arrow-loop",
        one : socket.target
    }
    // item 7586
    newId = createItem(
        edits,
        item
    )
    // item 7588
    redirectUpperItems(
        edits,
        socket.links,
        newId
    )
    // item 7589
    redirectUpperItems(
        edits,
        socket.edge.links,
        newId
    )
    // item 6970
    return edits
}

function clickLianaSocket(socket) {
    var edits
    // item 6002
    edits = []
    // item 6018
    redirectUpperItems(
        edits,
        socket.links,
        socket.target
    )
    // item 7622
    if (socket.arrow) {
        // item 7638
        popFromSkewer(
            edits,
            socket.arrow.finalTarget
        )
    }
    // item 6001
    return edits
}

function clickSocket(socketId) {
    var action, edits, socket
    var _sw43680000_ = 0;
    // item 4541
    socket = module.visuals.sockets.get(
        socketId
    )
    // item 43680000
    _sw43680000_ = socket.op;
    // item 43680001
    if (_sw43680000_ === "insert") {
        // item 4376
        action = getActionForInsert(
            socket.type
        )
        // item 4377
        edits = action(socket)
        // item 4386
        brutalChange(edits)
    } else {
        // item 43680002
        if (_sw43680000_ === "paste") {
            // item 9315
            edits = pasteInSocket(socket)
            // item 4386
            brutalChange(edits)
        } else {
            // item 43680003
            if (_sw43680000_ === "arrow") {
                // item 6964
                edits = clickArrowSocket(socket)
                // item 4386
                brutalChange(edits)
            } else {
                // item 43680004
                if (_sw43680000_ === "liana") {
                    // item 4387
                    edits = clickLianaSocket(socket)
                    // item 4386
                    brutalChange(edits)
                } else {
                    // item 43680005
                    if (_sw43680000_ === "params") {
                        
                    } else {
                        // item 43680006
                        throw "Unexpected switch value: " + _sw43680000_;
                    }
                    // item 13083
                    clearSockets()
                    // item 13081
                    redrawCanvas()
                    // item 13079
                    changeDiagramProperties()
                }
            }
        }
    }
}

function clusterComplete(context) {
    // item 10103
    if ((context.arrows == 0) && (context.paths == 0)) {
        // item 10108
        return true
    } else {
        // item 10107
        return false
    }
}

function collectLevels(visuals, branch) {
    var getLevel, levelIds, node, visited
    // item 8539
    visited = {}
    visited[branch.node.id] = true
    // item 8540
    scanManhattan(
        visited,
        getDown(branch.node)
    )
    // item 8541
    delete visited[branch.node.id]
    // item 8542
    levelIds = {}
    // item 85440001
    var _ind8544 = 0;
    var _col8544 = visited;
    var _keys8544 = Object.keys(_col8544); 
    var _len8544 = _keys8544.length;
    while (true) {
        // item 85440002
        if (_ind8544 < _len8544) {
            
        } else {
            break;
        }
        // item 85440004
        var nodeId = _keys8544[_ind8544]; var _ = _col8544[nodeId];
        // item 8547
        node = visuals.nodes.get(nodeId)
        levelIds[node.level.id] = true
        // item 85440003
        _ind8544++;
    }
    // item 8543
    getLevel = function(levelId) {
        return visuals.levels.get(levelId)
    }
    // item 8548
    return Object.keys(levelIds).map(
        getLevel
    )
}

function completeChars(self) {
    var token
    // item 1684
    token = makeTokenFromChars(
        self,
        "operator"
    )
    // item 1685
    self.next.completeToken(
        token
    )
}

function completeResend(self, name, msg) {
    var next
    // item 1747
    next = self.next
    // item 1745
    completeChars(self)
    // item 1746
    callMethod(next, name, [msg])
}

function computeLength(item) {
    var length, text
    var _sw113700000_ = 0;
    // item 113700000
    _sw113700000_ = item.type;
    // item 113700001
    if (_sw113700000_ === "block") {
        // item 11380
        return addSpaces(item)
    } else {
        // item 113700002
        if (_sw113700000_ === "eol") {
            // item 11379
            length = 1
        } else {
            // item 11378
            text = item.text || ""
            length = text.length
        }
        // item 11382
        item.length = length
        // item 11383
        return item
    }
}

function connectBranch(visuals, branch, upper, lower) {
    var branchLower, floor
    // item 8383
    branch.topNode = createJunction(
        visuals,
        null
    )
    // item 8385
    createEdge(
        visuals,
        upper,
        branch.topNode,
        false
    )
    // item 8386
    createEdge(
        visuals,
        branch.topNode,
        branch.node,
        true
    )
    // item 8431
    if (branch.addresses.length) {
        // item 83870001
        var _ind8387 = 0;
        var _col8387 = branch.addresses;
        var _len8387 = _col8387.length;
        while (true) {
            // item 83870002
            if (_ind8387 < _len8387) {
                
            } else {
                break;
            }
            // item 83870004
            var address = _col8387[_ind8387];
            // item 8384
            branchLower = createJunction(
                visuals,
                null
            )
            // item 8389
            floor = createEdge(
                visuals,
                lower,
                branchLower,
                false
            )
            // item 8393
            floor.role = "floor"
            // item 8391
            createEdge(
                visuals,
                address,
                branchLower,
                true
            )
            // item 8390
            lower = branchLower
            // item 83870003
            _ind8387++;
        }
    } else {
        // item 8437
        createEdge(
            visuals,
            lower,
            visuals.end,
            false
        )
    }
    // item 8392
    branch.bottomNode = lower
}

function connectLoops() {
    var visuals
    // item 6185
    visuals = module.visuals
    // item 61860001
    var _ind6186 = 0;
    var _col6186 = visuals.nodes.rows;
    var _keys6186 = Object.keys(_col6186); 
    var _len6186 = _keys6186.length;
    while (true) {
        // item 61860002
        if (_ind6186 < _len6186) {
            
        } else {
            break;
        }
        // item 61860004
        var id = _keys6186[_ind6186]; var node = _col6186[id];
        // item 6189
        if (node.type == "loopend") {
            // item 6188
            findLoopStart(node)
        }
        // item 61860003
        _ind6186++;
    }
}

function contains(list, item) {
    var index
    // item 4642
    if (list) {
        // item 4646
        index = list.indexOf(item)
        // item 4648
        if (index == -1) {
            // item 4645
            return false
        } else {
            // item 4647
            return true
        }
    } else {
        // item 4645
        return false
    }
}

function copy() {
    var copyType
    // item 9238
    copyType = copyCore()
    // item 10238
    if (copyType) {
        // item 10235
        showPasteSockets(
            copyType
        )
    }
}

function copyBlock(startId, items) {
    var block
    // item 9281
    block = {
        start : startId,
        items : items
    }
    // item 9282
    copyToClipboard(
        "block",
        block
    )
    // item 9284
    return "block"
}

function copyBranch(node) {
    var block, branchNodes, end, items, targets
    // item 9672
    branchNodes = {}
    // item 9671
    scanBranchItems(
        node,
        branchNodes
    )
    // item 9696
    end = module.visuals.end
    // item 9692
    if (end) {
        // item 9695
        delete branchNodes[end.itemId]
    }
    // item 9673
    items = []
    targets = {}
    // item 96740001
    var _ind9674 = 0;
    var _col9674 = branchNodes;
    var _keys9674 = Object.keys(_col9674); 
    var _len9674 = _keys9674.length;
    while (true) {
        // item 96740002
        if (_ind9674 < _len9674) {
            
        } else {
            break;
        }
        // item 96740004
        var itemId = _keys9674[_ind9674]; var bnode = _col9674[itemId];
        // item 96760001
        var _ind9676 = 0;
        var _col9676 = bnode.next;
        var _len9676 = _col9676.length;
        while (true) {
            // item 96760002
            if (_ind9676 < _len9676) {
                
            } else {
                break;
            }
            // item 96760004
            var next = _col9676[_ind9676];
            // item 9678
            if (next.itemId in branchNodes) {
                
            } else {
                // item 9681
                targets[next.itemId] = next.text
            }
            // item 96760003
            _ind9676++;
        }
        // item 9682
        items.push(copyItem(itemId))
        // item 96740003
        _ind9674++;
    }
    // item 9668
    block = {
        start : node.itemId,
        items : items,
        targets : targets
    }
    // item 9669
    copyToClipboard(
        "branch",
        block
    )
    // item 9670
    return "branch"
}

function copyCase(node) {
    var block, copy
    // item 9497
    copy = copyItem(node.itemId)
    // item 9498
    copy.one = "finish"
    copy.two = null
    // item 9499
    block = {
        start : node.itemId,
        items : [copy]
    }
    // item 9500
    copyToClipboard(
        "case",
        block
    )
    // item 9501
    return "case"
}

function copyCore() {
    var copyType, nodes
    var _sw102440000_ = 0;
    // item 10252
    nodes = getNodesFromSelection()
    // item 102440000
    _sw102440000_ = nodes.length;
    // item 102440001
    if (_sw102440000_ === 0) {
        // item 10260
        copyType = null
    } else {
        // item 102440002
        if (_sw102440000_ === 1) {
            // item 10253
            copyType = copyOneItem(nodes[0])
        } else {
            // item 10254
            copyType = copyManyItems(nodes)
        }
    }
    // item 10261
    return copyType
}

function copyEdgeLinks(socket) {
    var edge
    // item 4494
    edge = socket.edge
    // item 4493
    socket.target = edge.finalTarget.itemId
    // item 6015
    addRange(
        edge.links,
        socket.links
    )
}

function copyItem(itemId) {
    var copy, item
    // item 9451
    item = module.storage.items[itemId]
    // item 9452
    copy = Utils.copyObject(item)
    // item 9453
    return copy
}

function copyItems() {
    var items, storage
    // item 2880
    storage = module.storage
    items = []
    // item 28830001
    var _ind2883 = 0;
    var _col2883 = storage.items;
    var _keys2883 = Object.keys(_col2883); 
    var _len2883 = _keys2883.length;
    while (true) {
        // item 28830002
        if (_ind2883 < _len2883) {
            
        } else {
            break;
        }
        // item 28830004
        var id = _keys2883[_ind2883]; var item = _col2883[id];
        // item 2882
        items.push(
            Utils.copyObject(item)
        )
        // item 28830003
        _ind2883++;
    }
    // item 2881
    return items
}

function copyLoop(node) {
    var end, loop
    // item 9457
    loop = copyItem(node.itemId)
    // item 9459
    loop.one = node.loopEnd.itemId
    // item 9460
    end = copyItem(node.loopEnd.itemId)
    end.one = "finish"
    // item 9458
    return copyBlock(
        node.itemId,
        [ loop, end ]
    )
}

function copyLoopEnd(node) {
    // item 9275
    return copyLoop(node.loopStart)
}

function copyManyItems(nodes) {
    var items
    // item 10233
    items = nodes.map(
        copySelectedItem
    )
    // item 10234
    return copyBlock(
        module.selection.head,
        items
    )
}

function copyOneItem(node) {
    var copy
    // item 9542
    copy = getCopyFunction(node)
    // item 9544
    if (copy) {
        // item 9543
        return copy(node)
    } else {
        // item 10237
        return null
    }
}

function copyQuestion(node) {
    var copy
    // item 9454
    copy = copyItem(node.itemId)
    // item 9456
    copy.one = "finish"
    copy.two = "finish"
    // item 9455
    return copyBlock(
        node.itemId,
        [ copy ]
    )
}

function copySelect(node) {
    var caseItem, items
    // item 9465
    items = []
    // item 9461
    items.push(copyItem(node.itemId))
    // item 94660001
    var _ind9466 = 0;
    var _col9466 = node.cases;
    var _len9466 = _col9466.length;
    while (true) {
        // item 94660002
        if (_ind9466 < _len9466) {
            
        } else {
            break;
        }
        // item 94660004
        var caseNode = _col9466[_ind9466];
        // item 9468
        caseItem = copyItem(caseNode.itemId)
        caseItem.one = "finish"
        // item 9469
        items.push(caseItem)
        // item 94660003
        _ind9466++;
    }
    // item 9462
    return copyBlock(
        node.itemId,
        items
    )
}

function copySelectedItem(node) {
    var item
    // item 10213
    item = copyItem(node.itemId)
    // item 10231
    item.one = getCopyTarget(node, 0)
    item.two = getCopyTarget(node, 1)
    // item 10232
    return item
}

function copySimple(node) {
    var copy
    // item 9166
    copy = copyItem(node.itemId)
    // item 9283
    copy.one = "finish"
    // item 9171
    return copyBlock(
        node.itemId,
        [ copy ]
    )
}

function copyText(node) {
    // item 9738
    if (node.text) {
        // item 9726
        copyToClipboard(
            "text",
            node.text
        )
    }
}

function copyToClipboard(type, subgraph) {
    // item 9165
    var fun = module.callbacks.copyToClipboard
    // item 9160
    if (fun) {
        // item 9163
        fun(type, subgraph);
    }
}

function crawl(crawler, startEdge) {
    var edge
    // item 5359
    edge = startEdge
    while (true) {
        // item 5865
        edge[crawler.side] = crawler.sub
        // item 5457
        edge = crawler.onEdge(edge)
        // item 5417
        if (edge) {
            
        } else {
            break;
        }
    }
    // item 74750001
    var _ind7475 = 0;
    var _col7475 = crawler.plan;
    var _len7475 = _col7475.length;
    while (true) {
        // item 74750002
        if (_ind7475 < _len7475) {
            
        } else {
            break;
        }
        // item 74750004
        var node = _col7475[_ind7475];
        // item 7477
        createQSubspace(
            crawler,
            node
        )
        // item 74750003
        _ind7475++;
    }
}

function crawlNode(crawler, node) {
    // item 5392
    if (node.right) {
        // item 5398
        if (node.down) {
            // item 5397
            crawler.rt(node)
        } else {
            // item 5400
            crawler.ut(node)
        }
        // item 5415
        return crawler.nextNode
    } else {
        // item 5395
        if (node.left) {
            // item 5401
            if (node.down) {
                // item 5402
                if (node.up) {
                    // item 5403
                    crawler.lt(node)
                } else {
                    // item 5404
                    crawler.ld(node)
                }
            } else {
                // item 5406
                if (node.up) {
                    // item 5408
                    crawler.lu(node)
                } else {
                    // item 5410
                    throw new Error(
                        "Unexpected node: left only"
                    )
                }
            }
            // item 5415
            return crawler.nextNode
        } else {
            // item 5411
            if (node.down) {
                // item 5414
                crawler.dd(node)
                // item 5415
                return crawler.nextNode
            } else {
                // item 5413
                return false
            }
        }
    }
}

function crawlSelect(select) {
    var cases, i, inner, jun, left, outer, right, sub
    // item 6610
    cases = select.cases
    // item 66080001
    i = 0;
    while (true) {
        // item 66080002
        if (i < cases.length - 1) {
            
        } else {
            break;
        }
        // item 6611
        left = cases[i]
        right = cases[i + 1]
        // item 7416
        jun = getUp(left)
        // item 7417
        if (jun.zoned) {
            
        } else {
            // item 6613
            sub = createSubspace()
            outer = createOuter("down", sub)
            inner = createInner("down", sub)
            // item 6614
            crawl(outer, left.down)
            crawl(inner, right.down)
        }
        // item 66080003
        i++;
    }
    // item 6615
    return cases[cases.length - 1]
}

function crawlSubdiagram(startEdge) {
    var innerCrawler, innerSub, outerCrawler, outerSub
    // item 8583
    outerSub = createSubspace()
    innerSub = createSubspace()
    // item 8578
    outerCrawler = createOuter("down", outerSub)
    // item 8579
    innerCrawler = createInner("down", innerSub)
    // item 8580
    crawl(
        outerCrawler,
        startEdge
    )
    // item 8581
    crawl(
        innerCrawler,
        startEdge
    )
}

function createArrowSocket(element, source) {
    var socket, srcLoops, targetId, targetLoops
    // item 7707
    targetId = element.finalTarget.itemId
    // item 7803
    if ((((isArrowLoop(element.head)) || (isArrowLoop(element.tail))) || (!(canTransplant(targetId, source)))) || (!(element.tail.x < source.tail.x))) {
        
    } else {
        // item 7009
        targetLoops = element.finalTarget.loops
        srcLoops = source.finalTarget.loops
        // item 7008
        if ((withinSameLoop(source, element, 0)) && (!(hasOtherEntries(source, element.tail)))) {
            // item 6960
            socket = createSocketFromEdge(
                element,
                "arrow",
                null
            )
            // item 6961
            addRange(
                source.links,
                socket.links
            )
        }
    }
}

function createBlock(seq) {
    // item 11227
    return {
        type : "block",
        statements : [],
        prev : "operator",
        statement : createStatement(),
        length : 0,
        seq : seq,
        seqStart : false
    }
}

function createBlock2(seq) {
    // item 11387
    return {
        type : "block",
        statements : [],
        length : 0,
        seq : seq
    }
}

function createBreak() {
    var token
    // item 11474
    token = createToken(
        "break",
        ""
    )
    // item 11475
    token.length = 0
    // item 11476
    return token
}

function createDiagram(diagram) {
    var edit, edit1, edit3, edits, emptyBranch, storage
    // item 10833
    addTrace(
        "createDiagram",
        [diagram.type, diagram.name]
    )
    // item 348
    storage = createStorage(
        diagram,
        Config.DIAGRAM_VERSION
    )
    // item 333
    edits = []
    // item 5329
    edit1 = new Edit(
        "insert",
        "items",
        "1",
        {type: "end"}
    )
    // item 5330
    edits.push(
        edit1
    )
    // item 5332
    edit3 = new Edit(
        "insert",
        "items",
        "3",
        {type: "action", one: "1"}
    )
    // item 5333
    edits.push(
        edit3
    )
    // item 2870
    emptyBranch = {
        type : "branch",
        branchId : 0,
        one : "3"
    }
    // item 5327
    edit = new Edit(
        "insert",
        "items",
        "2",
        emptyBranch
    )
    // item 5328
    edits.push(
        edit
    )
    // item 2955
    performLocalChange(
        edits,
        false
    )
    // item 2956
    persistChanges(
        edits,
        false
    )
    // item 5331
    recalculateNextId()
    // item 4354
    buildVisualsForEdit()
    // item 7995
    clearUndo()
}

function createEdge(visuals, head, tail, vertical) {
    var edge, id
    // item 3787
    id = "e" + getNextId(visuals)
    // item 3788
    edge = new Edge(
        id,
        head,
        tail,
        vertical
    )
    // item 3791
    if (vertical) {
        // item 3801
        if (head.down) {
            // item 3806
            throw Error("head.down is busy")
        } else {
            // item 3804
            if (tail.up) {
                // item 3807
                throw Error("tail.up is busy")
            } else {
                // item 3808
                head.down = edge
                tail.up = edge
            }
        }
    } else {
        // item 3794
        if (head.right) {
            // item 3798
            throw Error("head.right is busy")
        } else {
            // item 3796
            if (tail.left) {
                // item 3799
                throw Error("tail.left is busy")
            } else {
                // item 3800
                head.right = edge
                tail.left = edge
            }
        }
    }
    // item 3789
    visuals.edges.insert(edge)
    // item 3790
    return edge
}

function createEol() {
    // item 11544
    return createToken("eol", "")
}

function createInner(state, sub) {
    var crawler
    // item 5480
    crawler = new InnerCrawler()
    crawler.sub = sub
    crawler.state = state
    crawler.side = "inner"
    crawler.plan = []
    // item 5483
    return crawler
}

function createItem(edits, fields) {
    var edit, id
    // item 9429
    id = getNextStorageId()
    // item 2845
    edit = new Edit(
        "insert",
        "items",
        id,
        fields
    )
    // item 2849
    edits.push(
        edit
    )
    // item 2848
    return id
}

function createJunction(visuals, finalTarget) {
    var node
    // item 3451
    node = createNode(
        visuals,
        null,
        "junction",
        ""
    )
    // item 5581
    node.finalTarget = finalTarget
    // item 5582
    return node
}

function createKeywordsText(storage) {
    var keyText, keywords
    // item 13071
    keywords = []
    // item 13072
    addKeyword(storage.keywords, "export", keywords)
    // item 13073
    addKeyword(storage.keywords, "async", keywords)
    // item 13058
    if (keywords.length == 0) {
        // item 13062
        keyText = ""
    } else {
        // item 13061
        keyText = keywords.join(" ")
    }
    // item 13063
    return keyText
}

function createLeftDown(visuals, finalTarget) {
    var result
    // item 3644
    result = createJunction(
        visuals,
        finalTarget
    )
    // item 3646
    return result
}

function createLeftUp(visuals, node2, finalTarget) {
    var result
    // item 3636
    result = createJunction(
        visuals,
        finalTarget
    )
    // item 3648
    node2.mountRight = result
    // item 3638
    return result
}

function createLevel(visuals) {
    var skewer
    // item 3933
    skewer = new Skewer(false)
    // item 3934
    visuals.levels.insert(
        skewer
    )
    // item 3935
    return skewer
}

function createLianaSocket(record, source) {
    var socket
    // item 5939
    if ((canTransplant(record.targetId, source)) && (!(adjacentToAddress(record, source)))) {
        // item 5942
        if (record.type == "node") {
            // item 5944
            socket = createNodeSocket(
                record.element,
                source
            )
        } else {
            // item 5946
            socket = createSocketFromEdge(
                record.element,
                "liana",
                null
            )
        }
        // item 7641
        socket.arrow = source.arrow
        // item 6016
        addRange(
            source.links,
            socket.links
        )
    }
}

function createNode(visuals, itemId, type, text, id) {
    var node, sameType
    // item 3738
    if (id) {
        
    } else {
        // item 3730
        id = "n" + getNextId(visuals)
    }
    // item 3731
    node = new Node(
        id,
        itemId,
        type,
        text
    )
    // item 3732
    visuals.nodes.insert(node)
    // item 3735
    if (itemId) {
        // item 3734
        visuals.itemsToNodes[itemId] = node
    }
    // item 7514
    sameType = getCreateList(
        visuals.byType,
        type
    )
    // item 7515
    sameType.push(node)
    // item 3733
    return node
}

function createNodeSocket(node, source) {
    var socket
    // item 5952
    socket = new Socket(
        node.x,
        node.y,
        "liana",
        null
    )
    // item 5955
    socket.node = node
    socket.target = node.finalTarget.itemId
    // item 5953
    module.visuals.sockets.insert(
        socket
    )
    // item 5954
    return socket
}

function createOuter(state, sub) {
    var crawler
    // item 5472
    crawler = new OuterCrawler()
    crawler.sub = sub
    crawler.state = state
    crawler.side = "outer"
    crawler.plan = []
    // item 5475
    return crawler
}

function createParamsNode(storage, visuals) {
    var keyText, node, text
    // item 12928
    keyText = createKeywordsText(storage)
    // item 12929
    text = storage.params
    // item 12941
    if ((text) || (keyText)) {
        // item 12922
        node = createNode(
            visuals,
            "params",
            "params",
            text,
            "params"
        )
        // item 12986
        node.keyText = keyText
        // item 12945
        flowIcon(render, node)
        // item 12969
        node.params = storage.params
        // item 12946
        return node
    } else {
        // item 12944
        return null
    }
}

function createParsingState(tokens) {
    var state
    // item 11174
    state = {
        tokens : tokens,
        index : 0,
        current : tokens[0]
    }
    // item 11175
    return state
}

function createPastedItem(edits, item) {
    var edit
    // item 9436
    edit = new Edit(
        "insert",
        "items",
        item.id,
        item
    )
    // item 9438
    edits.push(
        edit
    )
    // item 9437
    return item.id
}

function createQSubspace(self, question) {
    var inner, outer, sub
    // item 7420
    if (question.zoned) {
        
    } else {
        // item 5852
        sub = createSubspace()
        outer = createOuter("down", sub)
        inner = createInner("right", sub)
        // item 5853
        crawl(outer, question.down)
        crawl(inner, question.right)
    }
}

function createRawFlower() {
    // item 11589
    return {
        tokens : [],
        max : MaxChars,
        current : 0
    }
}

function createSearchLexer() {
    var handlers, result
    // item 12209
    handlers = {
        idle : handleIdle,
        building : handleBuilding
    }
    // item 12210
    result = {
        handlers : handlers,
        top : "idle",
        chars : []
    }
    // item 12211
    result.onChar = function(op, cat, code, pos) {
        onLexChar(result, op, cat, code, pos)
    }
    // item 12212
    return result
}

function createSearchTokens() {
    var self
    // item 12323
    self = {
        tokens : [],
        tokensLow : []
    }
    // item 12325
    self.onToken = function(token) {
        addSearchToken(self, token)
    }
    // item 12324
    return self
}

function createSkewer(visuals) {
    var skewer
    // item 3721
    skewer = new Skewer(true)
    // item 3722
    visuals.skewers.insert(
        skewer
    )
    // item 3723
    return skewer
}

function createSocketFromEdge(edge, op, type) {
    var Min, head, hh, hw, socket, tail, th, tw, x, x1, x2, y, y1, y2
    // item 4485
    head = edge.head
    tail = edge.tail
    // item 4572
    Min = 10
    // item 4571
    hw = Math.max(Min, head.w)
    hh = Math.max(Min, head.h)
    tw = Math.max(Min, tail.w)
    th = Math.max(Min, tail.h)
    // item 4470
    if (edge.vertical) {
        // item 4473
        x1 = getX(head)
        y1 = getY(head) + hh
        x2 = x1
        y2 = getY(tail) - th
    } else {
        // item 4469
        x1 = getX(head) + hw
        y1 = getY(head)
        x2 = getX(tail) - tw
        y2 = y1
    }
    // item 4482
    x = (x1 + x2) / 2
    y = (y1 + y2) / 2
    // item 4474
    socket = new Socket(
        x,
        y,
        op,
        type
    )
    // item 4496
    socket.edge = edge
    socket.target = edge.finalTarget.itemId
    // item 4483
    module.visuals.sockets.insert(
        socket
    )
    // item 4484
    return socket
}

function createSourceFlower(render, source) {
    var flower
    // item 11707
    flower = new SourceFlower()
    flower.maxLength = MaxLineLength
    flower.init(render)
    flower.source = source
    // item 11708
    return flower
}

function createSpace() {
    var token
    // item 11462
    token = createToken(
        "whitespace",
        " "
    )
    // item 11463
    token.length = token.text.length
    // item 11464
    return token
}

function createStatement() {
    // item 11351
    return {
        type : "statement",
        items : [],
        length : 0
    }
}

function createStorage(diagram, version) {
    // item 9756
    module.storage = new Storage(
        diagram.type,
        diagram.name,
        version
    )
    // item 13045
    module.storage.keywords = diagram.keywords || {}
    module.storage.params = diagram.params || ""
    // item 9755
    module.language = diagram.language
    // item 11849
    resetSelection()
    // item 9757
    return module.storage
}

function createSubspace() {
    var sub, visuals
    // item 5345
    visuals = module.visuals
    // item 5346
    sub = new Sub()
    // item 5347
    visuals.subs.insert(sub)
    // item 5348
    return sub
}

function createTempEdge(visuals, node, leftBottom) {
    var edge, leftTop, parNext, parTop, tmpJun
    // item 7230
    leftTop = goUp(node)
    parTop = getLeft(leftTop)
    parNext = getDown(parTop)
    // item 7233
    if (parNext.type == "case") {
        // item 7237
        parNext = getDown(parNext)
    }
    // item 7232
    tmpJun = splitVertical(
        visuals,
        parNext
    )
    // item 7231
    edge = createEdge(
        visuals,
        tmpJun,
        leftBottom,
        false
    )
    // item 7236
    visuals.tempEdges.push(edge)
}

function createToken(type, text) {
    // item 11246
    return {
        type : type,
        text : text
    }
}

function createTokenCollection() {
    var self
    // item 11152
    self = {
        tokens : []
    }
    // item 11154
    self.onToken = function(token) {
    	addNoWs(self, token)
    }
    // item 11155
    self.eol = function() {
    
    }
    // item 11153
    return self
}

function createTreeLexer() {
    var handlers, result
    // item 10321
    handlers = {
        normal : handleNormal,
        choose : handleChoose,
        single : handleSingle,
        quote : handleQuote,
        backtick : handleBacktick,
        one : handleOne,
        multi : handleMulti,
        regex : handleRegex
    }
    // item 10322
    result = {
        handlers : handlers,
        top : "",
        tt : "",
        escaping : false,
        part : 0,
        chars : [],
        prev : undefined
    }
    // item 10336
    result.onChar = function(op, cat, code, pos) {
        onChar(result, op, cat, code)
    }
    // item 10569
    setTop(result, "normal")
    // item 10337
    return result
}

function createUpDown(visuals, node2, finalTarget) {
    var result
    // item 3654
    result = createJunction(
        visuals,
        finalTarget
    )
    // item 3656
    node2.mountRight = result
    // item 3655
    return result
}

function cut() {
    var copyType, nodes
    // item 10262
    copyType = copyCore()
    // item 10264
    if (copyType) {
        // item 9492
        nodes = getNodesFromSelection()
        // item 9493
        deleteSelectionCore(nodes)
        // item 10263
        showPasteSockets(
            copyType
        )
    }
}

function cutOneItem(node) {
    var edits
    // item 9553
    copyOneItem(node)
    // item 9554
    edits = deleteOne(node)
    // item 9562
    brutalChange(edits)
    // item 9555
    paste()
}

function darkenSocket(socketId) {
    var socket
    // item 4365
    socket = module.visuals.sockets.get(
        socketId
    )
    // item 4366
    socket.on = false
    // item 4543
    redrawCanvas()
}

function defineIcon(type, draw, flow) {
    var icon
    // item 2465
    icon = {}
    // item 2466
    module.icons[type] = icon
    // item 2467
    icon.draw = function(render, item) {
        draw(render, item)
    }
    // item 2468
    icon.flow = function(render, item) {
        flow(render, item)
    }
}

function deleteBlock(nodes) {
    var addDeletion, bottomId, edits, head, selection
    // item 10198
    selection = module.selection
    // item 10195
    bottomId = findSelectionBottom()
    head = getNode(selection.head)
    // item 10200
    edits = []
    // item 10199
    redirectUpperItems(
        edits,
        head.up.links,
        bottomId
    )
    // item 10196
    addDeletion = function(node) {
        deleteItem(edits, node.itemId)
    }
    // item 10197
    nodes.forEach(
        addDeletion
    )
    // item 10201
    return edits
}

function deleteBranch(node) {
    var ditch, edits, next, remaining, toDelete
    // item 9031
    edits = moveBranchIdsLeft(
        node.branchId
    )
    // item 9032
    next = getBranchById(
        node.branchId + 1
    )
    // item 9033
    if (next) {
        
    } else {
        // item 9036
        next = getBranchById(1)
    }
    // item 9038
    toDelete = {}
    // item 9037
    scanBranchItems(
        node,
        toDelete
    )
    // item 9039
    remaining = subtract(
        module.storage.items,
        toDelete
    )
    // item 9042
    redirectBranch(
        remaining,
        toDelete,
        next.node.itemId,
        edits
    )
    // item 9040
    ditch = function(itemId) {
        deleteItem(edits, itemId)
    }
    // item 9041
    Object.keys(toDelete).forEach(
        ditch
    )
    // item 8860
    return edits
}

function deleteCase(node) {
    var below, edits, left, right, toKeep
    // item 6795
    edits = []
    // item 6835
    left = node.prev[0]
    // item 6863
    if (left == node.select) {
        // item 6867
        right = node.next[1]
        // item 6866
        updateItem(
            edits,
            left.itemId,
            {one:right.itemId}
        )
    } else {
        // item 6832
        if (node.next.length == 2) {
            // item 6837
            right = node.next[1]
            // item 6836
            updateItem(
                edits,
                left.itemId,
                {two:right.itemId}
            )
        } else {
            // item 6838
            updateItem(
                edits,
                left.itemId,
                {two:null}
            )
        }
    }
    // item 6872
    deleteItem(
        edits,
        node.itemId
    )
    // item 6844
    toKeep = markOtherCasesToStay(node)
    // item 6873
    below = node.next[0]
    // item 6874
    toKeep[node.itemId] = true
    // item 6849
    markToDelete(
        toKeep,
        node,
        below.itemId,
        edits
    )
    // item 6796
    return edits
}

function deleteItem(edits, id) {
    var edit
    // item 4972
    edit = new Edit(
        "delete",
        "items",
        id,
        null
    )
    // item 4973
    edits.push(
        edit
    )
}

function deleteLoop(node) {
    var beforeEnd, beginItem, edgeUp, edgeUp2, edits, end, endItem, items
    // item 6166
    edits = []
    // item 6163
    edgeUp = node.up
    // item 6165
    end = node.loopEnd
    items = module.storage.items
    // item 6176
    beginItem = items[node.itemId]
    endItem = items[end.itemId]
    // item 6174
    beforeEnd = getUp(end)
    // item 6169
    if (beforeEnd == node) {
        // item 6164
        redirectUpperItems(
            edits,
            edgeUp.links,
            endItem.one
        )
    } else {
        // item 6177
        redirectUpperItems(
            edits,
            edgeUp.links,
            beginItem.one
        )
        // item 6178
        edgeUp2 = end.up
        // item 6179
        redirectUpperItems(
            edits,
            edgeUp2.links,
            endItem.one
        )
    }
    // item 6160
    deleteItem(
        edits,
        node.itemId
    )
    // item 6168
    deleteItem(
        edits,
        end.itemId
    )
    // item 6167
    return edits
}

function deleteOne(node) {
    var _sw49150000_ = 0;
    // item 4912
    if (canDelete(node)) {
        // item 49150000
        _sw49150000_ = node.type;
        // item 49150001
        if (_sw49150000_ === "question") {
            // item 4923
            return deleteQuestion(node)
        } else {
            // item 49150002
            if (_sw49150000_ === "loopbegin") {
                // item 6141
                return deleteLoop(node)
            } else {
                // item 49150003
                if (_sw49150000_ === "loopend") {
                    // item 6144
                    return deleteLoop(node.loopStart)
                } else {
                    // item 49150004
                    if (_sw49150000_ === "params") {
                        // item 6308
                        return deleteParams()
                    } else {
                        // item 49150005
                        if (_sw49150000_ === "case") {
                            // item 6779
                            return deleteCase(node)
                        } else {
                            // item 49150006
                            if (_sw49150000_ === "select") {
                                // item 6877
                                return deleteSelect(node)
                            } else {
                                // item 49150007
                                if (_sw49150000_ === "branch") {
                                    // item 8854
                                    return deleteBranch(node)
                                } else {
                                    // item 4922
                                    return deleteSimple(node)
                                }
                            }
                        }
                    }
                }
            }
        }
    } else {
        // item 4952
        return []
    }
}

function deleteParams() {
    var edits, visuals
    // item 6316
    visuals = module.visuals
    // item 6313
    edits = []
    // item 12947
    updateDiagram(
        edits,
        {params: "", keywords: {}}
    )
    // item 6315
    return edits
}

function deleteQuestion(node) {
    var edits, one, toKeep, two
    // item 5001
    edits = []
    // item 5000
    popFromSkewer(
        edits,
        node
    )
    // item 6839
    toKeep = {}
    toKeep[node.itemId] = true
    // item 6829
    one = node.next[0]
    // item 5004
    markToStay(
        node,
        one.itemId,
        toKeep
    )
    // item 6830
    two = node.next[1]
    // item 6828
    markToDelete(
        toKeep,
        node,
        two.itemId,
        edits
    )
    // item 5002
    return edits
}

function deleteSelect(node) {
    var below, edgeUp, edits, first, toKeep
    // item 6892
    edits = []
    // item 6899
    first = firstCase(node)
    below = first.next[0]
    // item 6913
    edgeUp = node.up
    // item 6914
    redirectUpperItems(
        edits,
        edgeUp.links,
        below.itemId
    )
    // item 6917
    deleteItem(
        edits,
        node.itemId
    )
    // item 6915
    toKeep = {}
    // item 6916
    markToStay(
        null,
        below.itemId,
        toKeep
    )
    // item 6912
    toKeep[node.itemId] = true
    // item 6904
    markToDelete(
        toKeep,
        node,
        first.itemId,
        edits
    )
    // item 6893
    return edits
}

function deleteSelection() {
    var nodes
    // item 4874
    nodes = getNodesFromSelection()
    // item 9491
    deleteSelectionCore(nodes)
}

function deleteSelectionCore(nodes) {
    var edits
    var _sw94760000_ = 0;
    // item 94760000
    _sw94760000_ = nodes.length;
    // item 94760001
    if (_sw94760000_ === 0) {
        // item 9486
        edits = []
    } else {
        // item 94760002
        if (_sw94760000_ === 1) {
            // item 9485
            edits = deleteOne(nodes[0])
        } else {
            // item 9487
            edits = deleteBlock(nodes)
        }
    }
    // item 9488
    brutalChange(edits)
}

function deleteSimple(node) {
    var edits
    // item 4945
    edits = []
    // item 4929
    popFromSkewer(
        edits,
        node
    )
    // item 4954
    return edits
}

function deselect() {
    
}

function deselectAll() {
    // item 5987
    clearSockets()
    // item 11850
    resetSelection()
}

function diagramToJson() {
    var sane, storage
    // item 10299
    storage = module.storage
    // item 298
    sane = {
        name : storage.name,
        type : storage.type,
        keywords : storage.keywords,
        params : storage.params,
        nodes : {}
    }
    // item 103000001
    var _ind10300 = 0;
    var _col10300 = storage.items;
    var _keys10300 = Object.keys(_col10300); 
    var _len10300 = _keys10300.length;
    while (true) {
        // item 103000002
        if (_ind10300 < _len10300) {
            
        } else {
            break;
        }
        // item 103000004
        var id = _keys10300[_ind10300]; var item = _col10300[id];
        // item 10302
        sane.nodes[item.id] = Utils.copyObject(
            item
        )
        // item 103000003
        _ind10300++;
    }
    // item 297
    return JSON.stringify(sane, null, 2)
}

function doReplace(newNeedle) {
    var edits, newText, occ, output, search
    // item 12580
    search = module.search
    output = search.output
    // item 12579
    occ = search.occurences[output.current]
    // item 12581
    newText = replaceOccurence(occ, newNeedle)
    // item 12582
    edits = []
    // item 12583
    addReplaceCommand(
        edits,
        occ.id,
        occ.item.type,
        newText
    )
    // item 12584
    editAndSave(
        edits,
        true
    )
}

function doReplaceAll(newNeedle) {
    var count, edits, search
    // item 12647
    search = module.search
    // item 12649
    edits = []
    count = 0
    // item 126520001
    var _ind12652 = 0;
    var _col12652 = search.items;
    var _len12652 = _col12652.length;
    while (true) {
        // item 126520002
        if (_ind12652 < _len12652) {
            
        } else {
            break;
        }
        // item 126520004
        var item = _col12652[_ind12652];
        // item 12657
        count += replaceAllInItem(
            item,
            newNeedle,
            edits
        )
        // item 126520003
        _ind12652++;
    }
    // item 12651
    editAndSave(
        edits,
        false
    )
    // item 12687
    return count
}

function drawCandies(visuals, render) {
    // item 45180001
    var _ind4518 = 0;
    var _col4518 = visuals.sockets.rows;
    var _keys4518 = Object.keys(_col4518); 
    var _len4518 = _keys4518.length;
    while (true) {
        // item 45180002
        if (_ind4518 < _len4518) {
            
        } else {
            break;
        }
        // item 45180004
        var id = _keys4518[_ind4518]; var socket = _col4518[id];
        // item 4517
        drawSocket(
            socket,
            render
        )
        // item 45180003
        _ind4518++;
    }
    // item 46710001
    var _ind4671 = 0;
    var _col4671 = module.selection.prims;
    var _keys4671 = Object.keys(_col4671); 
    var _len4671 = _keys4671.length;
    while (true) {
        // item 46710002
        if (_ind4671 < _len4671) {
            
        } else {
            break;
        }
        // item 46710004
        var id = _keys4671[_ind4671]; var type = _col4671[id];
        // item 4772
        drawCandy(
            visuals,
            id,
            type,
            render
        )
        // item 46710003
        _ind4671++;
    }
}

function drawCandy(visuals, id, type, render) {
    var edge, node
    // item 4730
    if (type == "node") {
        // item 4733
        node = visuals.nodes.get(id)
        // item 4741
        if ((node.type == "junction") || (node.type == "arrow-loop")) {
            // item 4743
            juncCandy(
                node,
                render
            )
        } else {
            // item 4740
            standardCandy(
                node,
                render
            )
        }
    } else {
        // item 4734
        edge = visuals.edges.get(id)
        // item 4735
        if (edge.vertical) {
            // item 4738
            verticalCandy(
                edge,
                render
            )
        } else {
            // item 4739
            horizontalCandy(
                edge,
                render
            )
        }
    }
}

function drawCenterTextInRect(render, texId, tb, box) {
    var left, padding, top
    // item 2758
    padding = Config.ICON_PADDING
    // item 2756
    left = Math.floor(box.x - tb.width / 2)
    // item 2759
    top = Math.floor(box.y - tb.height / 2)
    // item 2757
    drawTextLeft(
        render,
        texId,
        tb.tokens,
        left,
        top
    )
}

function drawEdge(render, edge) {
    var format, h, w, x1, x2, y1, y2
    // item 4223
    x1 = getX(edge.head)
    y1 = getY(edge.head)
    // item 4224
    x2 = getX(edge.tail)
    y2 = getY(edge.tail)
    // item 4238
    format = getDiaLineFormat(
        edge
    )
    // item 4225
    if (edge.vertical) {
        // item 7826
        if (edge.head.skewer.main) {
            // item 7829
            format.lineThickness += 1
        }
        // item 4228
        h = y2 - y1
        // item 4222
        render.createVertical(
            x1,
            y1,
            h,
            null,
            format,
            "lines"
        )
    } else {
        // item 4229
        w = x2 - x1
        // item 4239
        render.createHorizontal(
            x1,
            y1,
            w,
            edge.role,
            format,
            "lines"
        )
    }
}

function drawHorizontalSubEdge(edge, shift, render, color) {
    var format
    // item 5724
    format = {
    	fillColor: color
    }
    // item 5723
    render.createRectangle(
        edge.head.x,
        edge.head.y + shift,
        edge.tail.x - edge.head.x,
        5,
        format,
        "guides"
    )
}

function drawIcon(render, item) {
    var engine
    // item 2568
    engine = getIconEngine(
        item.type
    )
    // item 4243
    if (engine) {
        // item 2746
        setFontFromIcon(
            render,
            item
        )
        // item 2511
        engine.draw(
            render,
            item
        )
    }
}

function drawInnerSubItem(record, render, color) {
    var edge
    // item 5680
    if (record.type == "node") {
        
    } else {
        // item 5689
        edge = record.element
        // item 5686
        if (edge.vertical) {
            // item 5685
            drawVerticalSubEdge(
                edge,
                -10,
                render,
                color
            )
        } else {
            // item 5995
            drawHorizontalSubEdge(
                edge,
                -10,
                render,
                color
            )
        }
    }
}

function drawLeftTextInRect(render, texId, tb, box) {
    var left, padding, top
    // item 2552
    padding = Config.ICON_PADDING
    // item 2548
    left = box.x - box.w + padding
    // item 2575
    top = Math.floor(box.y - tb.height / 2)
    // item 2549
    drawTextLeft(
        render,
        texId,
        tb.tokens,
        left,
        top
    )
    // item 13010
    return top + tb.height
}

function drawOuterSubItem(record, render, color) {
    var edge
    // item 5696
    if (record.type == "node") {
        // item 5699
        drawSubNode(
            record.element,
            render,
            color
        )
    } else {
        // item 5704
        edge = record.element
        // item 5701
        if (edge.vertical) {
            // item 5700
            drawVerticalSubEdge(
                edge,
                10,
                render,
                color
            )
        } else {
            // item 5705
            drawHorizontalSubEdge(
                edge,
                -10,
                render,
                color
            )
        }
    }
}

function drawParams(visuals) {
    var delta, header, hx, hy, level, params, skewer, x, y
    // item 6289
    if (visuals.params) {
        // item 6288
        skewer = createSkewer(visuals)
        // item 6292
        header = visuals.header
        params = visuals.params
        level = header.level
        hx = getX(header)
        hy = getY(header)
        // item 6293
        x = hx + header.w + Config.METRE +
        	params.w
        // item 6294
        if (params.h > header.h) {
            // item 6297
            delta = params.h - header.h
            y = hy - delta
        } else {
            // item 6298
            y = header.y
        }
        // item 6300
        level.coord = y
        skewer.coord = x
        // item 6301
        params.level = level
        params.skewer = skewer
        // item 6302
        createEdge(
            visuals,
            header,
            params,
            false
        )
    }
}

function drawSocket(socket, render) {
    // item 4525
    render.addSocket(
        socket.x,
        socket.y,
        socket.on
    )
}

function drawSubNode(node, render, color) {
    var format
    // item 5726
    format = {
    	fillColor: color
    }
    // item 5725
    render.createRectangle(
        node.x - 5,
        node.y - 5,
        10,
        10,
        format,
        "guides"
    )
}

function drawSubspaces(visuals, render) {
    // item 56670001
    var _ind5667 = 0;
    var _col5667 = visuals.subs.rows;
    var _keys5667 = Object.keys(_col5667); 
    var _len5667 = _keys5667.length;
    while (true) {
        // item 56670002
        if (_ind5667 < _len5667) {
            
        } else {
            break;
        }
        // item 56670004
        var id = _keys5667[_ind5667]; var sub = _col5667[id];
        // item 56690001
        var _ind5669 = 0;
        var _col5669 = sub.inner;
        var _keys5669 = Object.keys(_col5669); 
        var _len5669 = _keys5669.length;
        while (true) {
            // item 56690002
            if (_ind5669 < _len5669) {
                
            } else {
                break;
            }
            // item 56690004
            var itemId = _keys5669[_ind5669]; var record = _col5669[itemId];
            // item 5671
            drawInnerSubItem(
                record,
                render,
                sub.color
            )
            // item 56690003
            _ind5669++;
        }
        // item 56720001
        var _ind5672 = 0;
        var _col5672 = sub.outer;
        var _keys5672 = Object.keys(_col5672); 
        var _len5672 = _keys5672.length;
        while (true) {
            // item 56720002
            if (_ind5672 < _len5672) {
                
            } else {
                break;
            }
            // item 56720004
            var itemId = _keys5672[_ind5672]; var record = _col5672[itemId];
            // item 5674
            drawOuterSubItem(
                record,
                render,
                sub.color
            )
            // item 56720003
            _ind5672++;
        }
        // item 56670003
        _ind5667++;
    }
}

function drawTextLeft(render, texId, tokens, left, top) {
    // item 25400001
    var _ind2540 = 0;
    var _col2540 = tokens;
    var _len2540 = _col2540.length;
    while (true) {
        // item 25400002
        if (_ind2540 < _len2540) {
            
        } else {
            break;
        }
        // item 25400004
        var prim = _col2540[_ind2540];
        // item 2542
        render.drawText(
            texId,
            prim.text,
            prim.x + left,
            prim.y + top,
            prim.color
        )
        // item 25400003
        _ind2540++;
    }
}

function drawToOtherRender(render) {
    
}

function drawVerticalSubEdge(edge, shift, render, color) {
    var format
    // item 5722
    format = {
    	fillColor: color
    }
    // item 5721
    render.createRectangle(
        edge.head.x + shift,
        edge.head.y,
        5,
        edge.tail.y - edge.head.y,
        format,
        "guides"
    )
}

function drawVisuals(visuals, render) {
    // item 42400001
    var _ind4240 = 0;
    var _col4240 = visuals.edges.rows;
    var _keys4240 = Object.keys(_col4240); 
    var _len4240 = _keys4240.length;
    while (true) {
        // item 42400002
        if (_ind4240 < _len4240) {
            
        } else {
            break;
        }
        // item 42400004
        var id = _keys4240[_ind4240]; var edge = _col4240[id];
        // item 4242
        drawEdge(
            render,
            edge
        )
        // item 42400003
        _ind4240++;
    }
    // item 42070001
    var _ind4207 = 0;
    var _col4207 = visuals.nodes.rows;
    var _keys4207 = Object.keys(_col4207); 
    var _len4207 = _keys4207.length;
    while (true) {
        // item 42070002
        if (_ind4207 < _len4207) {
            
        } else {
            break;
        }
        // item 42070004
        var id = _keys4207[_ind4207]; var node = _col4207[id];
        // item 4213
        if (isDrawableNode(node)) {
            // item 4212
            drawIcon(
                render,
                node
            )
        }
        // item 42070003
        _ind4207++;
    }
}

function easy(action, node) {
    // item 9125
    return function() {
    	action(node)
    }
}

function editAndSave(edits, keepSearch) {
    // item 5130
    calculateUndo(edits)
    // item 5141
    addToUndoCore(
        module.undo,
        null,
        edits,
        null
    )
    // item 5131
    editAndSaveCore(edits, false, keepSearch)
}

function editAndSaveCore(edits, isUndo, keepSearch) {
    // item 5061
    performLocalChange(
        edits,
        isUndo
    )
    // item 5633
    buildVisualsForEdit()
    // item 5064
    redrawCanvas()
    // item 5062
    persistChanges(
        edits,
        isUndo
    )
    // item 12136
    if (keepSearch) {
        
    } else {
        // item 12140
        rebuildSearchState()
    }
}

function editMethod(name, method) {
    var wrapped
    // item 10723
    wrapped = function() {
    	var args = arrayFrom(arguments)
    	return callEditMethod(name, method, args)
    }
    // item 10735
    module[name] = wrapped
}

function end() {
    // item 10882
    return translateLabel("end", "DIA_END")
}

function endToken(self) {
    // item 1560
    self.token.text = Utils.arrayToString(
        self.chars
    )
    // item 1561
    self.next.onToken(
        self.token
    )
}

function endVisualDrag() {
    
}

function errorOnEol(self) {
    var next, token
    // item 1838
    token = makeTokenFromChars(
        self,
        "error"
    )
    // item 2005
    next = self.next
    // item 1837
    next.completeToken(
        token
    )
    // item 1839
    next.eol()
}

function errorOnFinish(self) {
    var next, token
    // item 1830
    token = makeTokenFromChars(
        self,
        "error"
    )
    // item 2008
    next = self.next
    // item 2006
    next.completeToken(
        token
    )
    // item 2007
    next.finish()
}

function filterMap(obj, filter) {
    var result
    // item 11988
    result = []
    // item 11990
    if (obj) {
        // item 119820001
        var _ind11982 = 0;
        var _col11982 = obj;
        var _keys11982 = Object.keys(_col11982); 
        var _len11982 = _keys11982.length;
        while (true) {
            // item 119820002
            if (_ind11982 < _len11982) {
                
            } else {
                break;
            }
            // item 119820004
            var key = _keys11982[_ind11982]; var value = _col11982[key];
            // item 11984
            if (filter(value)) {
                // item 11987
                result.push(value)
            }
            // item 119820003
            _ind11982++;
        }
    }
    // item 11989
    return result
}

function findClosestNode(filter, srcNode, vertical) {
    var best, current, distance, selected
    // item 11962
    selected = filterMap(
        module.visuals.nodes.rows,
        filter
    )
    // item 11974
    best = undefined
    distance = 10000000000
    // item 119750001
    var _ind11975 = 0;
    var _col11975 = selected;
    var _len11975 = _col11975.length;
    while (true) {
        // item 119750002
        if (_ind11975 < _len11975) {
            
        } else {
            break;
        }
        // item 119750004
        var node = _col11975[_ind11975];
        // item 12004
        current = getDistance(
            node,
            srcNode,
            vertical
        )
        // item 11993
        if (current < distance) {
            // item 12005
            best = node
            distance = current
        }
        // item 119750003
        _ind11975++;
    }
    // item 11967
    return best
}

function findDraggable(x, y) {
    var edge, node, socketId
    // item 4536
    socketId = findSocket(x, y)
    // item 4537
    if (socketId) {
        // item 4540
        return {
            type : Const.DRN_SOCKET
        }
    } else {
        // item 4773
        node = findNode(x, y)
        // item 4775
        if (node) {
            // item 5153
            if (inTextArea(node, x, y)) {
                // item 5155
                return {
                    id : node.id,
                    type : Const.TEXT,
                    elType : "node"
                }
            } else {
                // item 4774
                return {
                    id : node.id,
                    type : Const.DRN_MOVE,
                    elType : "node"
                }
            }
        } else {
            // item 4783
            edge = findEdge(x, y)
            // item 4778
            if (edge) {
                // item 4782
                return {
                    id : edge.id,
                    type : Const.DRN_MOVE,
                    elType : "edge"
                }
            } else {
                // item 153
                return null
            }
        }
    }
}

function findEdge(x, y) {
    // item 4846
    return findElementAt(
        module.visuals.edges,
        x,
        y
    )
}

function findEdgeLinks(visuals, startEdge, edge) {
    var itemId, link, source
    // item 4328
    source = edge.source
    // item 6303
    if (source) {
        // item 4325
        if (source.type == "junction") {
            // item 43310001
            var _ind4331 = 0;
            var _col4331 = source.sources;
            var _len4331 = _col4331.length;
            while (true) {
                // item 43310002
                if (_ind4331 < _len4331) {
                    
                } else {
                    break;
                }
                // item 43310004
                var prevEdge = _col4331[_ind4331];
                // item 4333
                findEdgeLinks(
                    visuals,
                    startEdge,
                    prevEdge
                )
                // item 43310003
                _ind4331++;
            }
        } else {
            // item 4348
            itemId = getEffectiveItemId(
                visuals,
                source
            )
            // item 4329
            link = new Link(
                itemId,
                edge.vertical ? 0 : 1
            )
            // item 4330
            startEdge.links.push(link)
        }
    }
}

function findElementAt(table, x, y) {
    // item 48520001
    var _ind4852 = 0;
    var _col4852 = table.rows;
    var _keys4852 = Object.keys(_col4852); 
    var _len4852 = _keys4852.length;
    while (true) {
        // item 48520002
        if (_ind4852 < _len4852) {
            
        } else {
            // item 4858
            return null
        }
        // item 48520004
        var id = _keys4852[_ind4852]; var element = _col4852[id];
        // item 4863
        if ((element.box) && (Utils.hitBox(element.box, x, y))) {
            // item 4854
            return element
        }
        // item 48520003
        _ind4852++;
    }
}

function findForInsertion() {
    var edges, result, targetId, visuals
    // item 4424
    visuals = module.visuals
    edges = visuals.edges.rows
    // item 4428
    result = []
    // item 44220001
    var _ind4422 = 0;
    var _col4422 = edges;
    var _keys4422 = Object.keys(_col4422); 
    var _len4422 = _keys4422.length;
    while (true) {
        // item 44220002
        if (_ind4422 < _len4422) {
            
        } else {
            break;
        }
        // item 44220004
        var id = _keys4422[_ind4422]; var edge = _col4422[id];
        // item 6319
        if ((edge.finalTarget) && (edge.role)) {
            // item 4430
            targetId = edge.finalTarget.itemId
            // item 4425
            if ((edge.role == "down") || ((edge.role == "right") && (edge.tail.up))) {
                // item 4429
                result.push(edge)
            }
        }
        // item 44220003
        _ind4422++;
    }
    // item 4435
    return result
}

function findLeftLinks(visuals, skewer) {
    var boundary, corner, finish, head, hskewer, left, node, rightJ, start, tail
    var _sw40750000_ = 0;
    // item 4037
    head = skewerHead(skewer)
    tail = skewerTail(skewer)
    // item 4038
    if ((head.left) && (tail.left)) {
        // item 4062
        start = getNextDown(head)
        finish = getNextUp(tail)
        // item 4066
        linkSkewers(
            visuals,
            start.skewer,
            skewer,
            start.w + Config.METRE
        )
        // item 4074
        node = getDown(start)
        boundary = getBoundary(skewer)
        // item 4073
        linkSkewers(
            visuals,
            finish.skewer,
            skewer,
            boundary
        )
        while (true) {
            // item 4063
            if (node == finish) {
                break;
            }
            // item 40750000
            _sw40750000_ = node.type;
            // item 40750001
            if (_sw40750000_ === "question") {
                // item 4109
                rightJ = getRight(node)
                // item 4106
                if (rightJ.up) {
                    // item 4110
                    linkSkewers(
                        visuals,
                        node.skewer,
                        skewer,
                        node.w + boundary + Config.METRE
                    )
                    // item 4111
                    node = getDown(node)
                } else {
                    // item 5306
                    linkSkewers(
                        visuals,
                        rightJ.skewer,
                        skewer,
                        boundary
                    )
                    // item 4112
                    corner = goRight(node)
                    node = getDown(corner)
                }
            } else {
                // item 40750002
                if (_sw40750000_ === "arrow-loop") {
                    // item 7644
                    rightJ = getRight(node)
                    // item 7646
                    linkSkewers(
                        visuals,
                        rightJ.skewer,
                        skewer,
                        boundary
                    )
                    // item 7645
                    node = getDown(node)
                } else {
                    // item 40750003
                    if (_sw40750000_ === "junction") {
                        // item 13084
                        linkSkewers(
                            visuals,
                            node.skewer,
                            skewer,
                            node.w + boundary
                        )
                        // item 4113
                        if (node.down) {
                            // item 4116
                            node = getDown(node)
                        } else {
                            // item 4117
                            node = goLeft(node)
                        }
                    } else {
                        // item 40750004
                        if (_sw40750000_ === "select") {
                            // item 6669
                            linkSkewers(
                                visuals,
                                node.skewer,
                                skewer,
                                node.w + boundary
                            )
                            // item 6670
                            node = lastCase(node)
                        } else {
                            // item 4119
                            linkSkewers(
                                visuals,
                                node.skewer,
                                skewer,
                                node.w + boundary
                            )
                            // item 4118
                            node = getDown(node)
                        }
                    }
                }
            }
        }
        // item 7175
        if (node.type == "question") {
            // item 7178
            linkSkewers(
                visuals,
                node.skewer,
                skewer,
                node.w + boundary + Config.METRE
            )
        }
    }
    // item 8447
    if (visuals.branches.length == 1) {
        
    } else {
        // item 8459
        left = getSilCorner(visuals)
        // item 8461
        hskewer = visuals.header.skewer
        // item 8460
        boundary = hskewer.boundary + 
        	Config.METRE
        // item 8450
        linkSkewers(
            visuals,
            left.skewer,
            hskewer,
            boundary
        )
    }
}

function findLianaSource(prim) {
    var beneath, edge, node
    var _sw57530000_ = 0;
    // item 57530000
    _sw57530000_ = prim.elType;
    // item 57530001
    if (_sw57530000_ === "node") {
        // item 5784
        node = getNode(prim.id)
        // item 7590
        if (node.arrow) {
            // item 7592
            return node.arrow
        } else {
            // item 5781
            if (node.type == "junction") {
                // item 7674
                if (isLeftDown(node)) {
                    // item 7709
                    beneath = getDown(node)
                    // item 7710
                    if ((beneath.type == "junction") && (!(isRightT(beneath)))) {
                        // item 5800
                        return node.down
                    } else {
                        // item 5802
                        return null
                    }
                } else {
                    // item 7651
                    if (isRightUp(node)) {
                        // item 8741
                        if (node.right.role == "floor") {
                            // item 8743
                            return null
                        } else {
                            // item 7653
                            return node.up
                        }
                    } else {
                        // item 6584
                        if (((((isCaseJun(node)) || (isBranchJun(node))) || (isAddressJun(node))) || (!(node.left))) || (!(node.up))) {
                            // item 5801
                            return null
                        } else {
                            // item 5885
                            if (node.down) {
                                // item 5887
                                return node.left
                            } else {
                                // item 5797
                                return node.up
                            }
                        }
                    }
                }
            } else {
                // item 5793
                if (isSimpleItem(node)) {
                    // item 5798
                    if (node.down) {
                        // item 7709
                        beneath = getDown(node)
                        // item 7710
                        if ((beneath.type == "junction") && (!(isRightT(beneath)))) {
                            // item 5800
                            return node.down
                        } else {
                            // item 5802
                            return null
                        }
                    } else {
                        // item 5802
                        return null
                    }
                } else {
                    // item 8656
                    if ((node.type == "address") && (!(node.skewer.main))) {
                        // item 8661
                        return node.up
                    } else {
                        // item 5802
                        return null
                    }
                }
            }
        }
    } else {
        // item 57530002
        if (_sw57530000_ === "edge") {
            // item 5792
            edge = getEdge(prim.id)
            // item 7593
            if (edge.arrow) {
                // item 7594
                return edge.arrow
            } else {
                // item 6583
                if (((edge.role) && (!(edge.role == "floor"))) && (!(edge.role == "rarrow"))) {
                    // item 5804
                    if (edge.vertical) {
                        // item 5809
                        if ((edge.tail.type == "junction") && (!(isRightT(edge.tail)))) {
                            // item 5812
                            return edge
                        } else {
                            // item 5803
                            return null
                        }
                    } else {
                        // item 7648
                        if (isLeftUp(edge.tail)) {
                            // item 7650
                            return edge.tail.up
                        } else {
                            // item 7654
                            if (isRightUp(edge.head)) {
                                // item 7656
                                return edge.head.up
                            } else {
                                // item 5806
                                if (edge.head.type == "junction") {
                                    // item 5808
                                    return edge
                                } else {
                                    // item 5813
                                    if ((edge.head.type == "question") && (edge.tail.up)) {
                                        // item 5816
                                        return edge
                                    } else {
                                        // item 5810
                                        return null
                                    }
                                }
                            }
                        }
                    }
                } else {
                    // item 5803
                    return null
                }
            }
        } else {
            // item 5803
            return null
        }
    }
}

function findLoopStart(end) {
    var depth, node
    // item 6120
    depth = 0
    // item 61180001
    node = getUp(end);
    while (true) {
        // item 61180002
        if (node) {
            
        } else {
            break;
        }
        // item 6135
        if (node.type == "loopend") {
            // item 6134
            depth++
        } else {
            // item 6138
            if (node.type == "loopbegin") {
                // item 6129
                if (depth == 0) {
                    // item 6132
                    node.loopEnd = end
                    end.loopStart = node
                    break;
                }
                // item 6133
                depth--
            }
        }
        // item 61180003
        node = getUp(node);
    }
}

function findNode(x, y) {
    // item 4859
    return findElementAt(
        module.visuals.nodes,
        x,
        y
    )
}

function findReplaceAll(input) {
    var number, search, state
    // item 12633
    search = module.search
    // item 12635
    if (search.output.canReplaceAll) {
        // item 12638
        number = doReplaceAll(input.replace)
        // item 12634
        updateSearchOutput()
    } else {
        // item 12640
        number = 0
    }
    // item 12632
    state = getSearchState()
    state.output.number = number
    // item 12639
    return state
}

function findSelectionBottom() {
    var next, node, selection
    // item 10187
    selection = module.selection
    // item 10186
    node = getNode(selection.head)
    while (true) {
        // item 10191
        next = node.next[0]
        // item 10188
        if (next.id in selection.prims) {
            
        } else {
            break;
        }
        // item 10194
        node = next
    }
    // item 10192
    return next.itemId
}

function findSocket(x, y) {
    var sockets
    // item 4534
    sockets = module.visuals.sockets.rows
    // item 45270001
    var _ind4527 = 0;
    var _col4527 = sockets;
    var _keys4527 = Object.keys(_col4527); 
    var _len4527 = _keys4527.length;
    while (true) {
        // item 45270002
        if (_ind4527 < _len4527) {
            
        } else {
            // item 4532
            return null;
        }
        // item 45270004
        var id = _keys4527[_ind4527]; var socket = _col4527[id];
        // item 4529
        if (Utils.hitBox(socket.box, x, y)) {
            // item 4533
            return id;
        }
        // item 45270003
        _ind4527++;
    }
}

function findTokens(haystack, needle, start) {
    var i
    // item 125310001
    i = start;
    while (true) {
        // item 125310002
        if (i < haystack.length) {
            
        } else {
            // item 12533
            return -1
        }
        // item 12534
        if (isPart(haystack, i, needle)) {
            // item 12537
            return i
        }
        // item 125310003
        i++;
    }
}

function findVisualItem(x, y) {
    // item 4611
    var item = findDraggable(x, y)
    // item 4612
    if ((item) && (!(item.type == Const.DRN_SOCKET))) {
        // item 4616
        return item
    } else {
        // item 4617
        return null
    }
}

function findWayUp(lowNode, highNode) {
    var context
    // item 9915
    if (highNode) {
        // item 9847
        context = {
            visited : {},
            leak : false
        }
        // item 9848
        findWayUpStep(
            context,
            lowNode,
            highNode
        )
        // item 9849
        if ((highNode.id in context.visited) && (!(context.leak))) {
            // item 9852
            return Utils.objectValues(
                context.visited
            )
        } else {
            // item 9853
            return []
        }
    } else {
        // item 9918
        return [lowNode]
    }
}

function findWayUpStep(context, node, highNode) {
    var nextStep, visited
    // item 10096
    visited = context.visited
    // item 9859
    if (node.type == "branch") {
        // item 10097
        context.leak = true
    } else {
        // item 9862
        if (node.id in visited) {
            
        } else {
            // item 9865
            visited[node.id] = node
            // item 9867
            if (node == highNode) {
                
            } else {
                // item 9908
                if (node.type == "case") {
                    // item 9911
                    findWayUpStep(
                        context,
                        node.select,
                        highNode
                    )
                } else {
                    // item 9866
                    nextStep = function(prev) {
                        findWayUpStep(context, prev, highNode)
                    }
                    // item 9870
                    node.prev.forEach(nextStep)
                }
            }
        }
    }
}

function finishSToken(self) {
    // item 12313
    if (self.chars.length == 0) {
        
    } else {
        // item 12312
        sendSToken(
            self,
            self.pos,
            self.chars
        )
        // item 12319
        self.chars = []
    }
    // item 12417
    self.top = "idle"
}

function finishToken(self) {
    // item 10690
    if (self.chars.length == 0) {
        
    } else {
        // item 10666
        sendToken(
            self,
            self.tt,
            self.chars
        )
    }
}

function fireSocket(socketId) {
    var socket
    // item 4362
    socket = module.visuals.sockets.get(
        socketId
    )
    // item 4363
    socket.on = true
    // item 4542
    redrawCanvas()
}

function firstBranchNode(visuals) {
    // item 8301
    return visuals.branches[0].node
}

function firstCase(select) {
    // item 6743
    return select.cases[0]
}

function firstCaseInsert(socket) {
    var existing
    // item 6766
    existing = socket.node
    // item 7937
    return firstCaseInsertCore(existing)
}

function firstCaseInsertCore(existing, item) {
    var caseId, edits, fields, targetId
    // item 7932
    edits = []
    // item 7934
    targetId = existing.next[0].itemId
    // item 9511
    item = item || {}
    fields = Utils.copyObject(item)
    fields.one = targetId
    fields.type = "case"
    fields.two = existing.itemId
    // item 7935
    caseId = createItem(
        edits,
        fields
    )
    // item 7936
    updateItem(
        edits,
        existing.select.itemId,
        {one:caseId}
    )
    // item 7933
    return edits
}

function firstChar(text) {
    // item 1182
    return text.charCodeAt(0)
}

function firstDigit(text) {
    var c, i, last
    // item 8199
    last = text.length - 1
    // item 81970001
    i = last;
    while (true) {
        // item 81970002
        if (i >= 0) {
            
        } else {
            // item 8208
            return 0
        }
        // item 8198
        c = text.charCodeAt(i)
        // item 8204
        if (isDigit(c)) {
            
        } else {
            // item 8223
            if (i == last) {
                // item 8226
                return -1
            } else {
                // item 8207
                return i + 1
            }
            break;
        }
        // item 81970003
        i--;
    }
}

function flowIcon(render, item) {
    var engine
    // item 2512
    engine = getIconEngine(
        item.type
    )
    // item 3682
    if (engine) {
        // item 2747
        setFontFromIcon(
            render,
            item
        )
        // item 2513
        engine.flow(
            render,
            item
        )
        // item 2750
        item.w = Math.max(
            item.w,
            Config.MIN_ICON_WIDTH
        )
    }
}

function flowSourceCode(render, node, source) {
    var flower, text, tokens
    // item 11662
    text = node.text
    tokens = lexSource(text)
    // item 11663
    if ((source) && (shouldAutoformat(node.type))) {
        // item 11666
        tokens = prettify(tokens, node.type)
        // item 12420
        node.text = printTokens(tokens)
        node.tokens = tokens
    }
    // item 2072
    flower = createSourceFlower(
        render,
        source
    )
    // item 11667
    sendTokens(tokens, flower)
    // item 2014
    return {
        tokens : flower.tokens,
        height : getFlowerHeight(flower),
        width : getFlowerWidth(flower)
    }
}

function flowText(render, text, width) {
    var flower, lexer, machineList, machines, tb
    // item 2390
    lexer = buildTextLexer()
    // item 2393
    tb = new TokenBuilder()
    // item 2392
    flower = new SourceFlower()
    flower.maxLength = width * 2
    flower.init(render)
    flower.source = false
    // item 2387
    machineList = [
    	lexer,
    	tb,
    	flower
    ]
    // item 2388
    machines = new MachineStack(
        machineList
    )
    // item 2389
    toTokens(
        machines,
        text
    )
    // item 2391
    return {
        tokens : flower.tokens,
        height : getFlowerHeight(flower),
        width : getFlowerWidth(flower)
    }
}

function forType(visuals, type, action) {
    var nodes
    // item 7523
    nodes = getCreateList(
        visuals.byType,
        type
    )
    // item 75210001
    var _ind7521 = 0;
    var _col7521 = nodes;
    var _len7521 = _col7521.length;
    while (true) {
        // item 75210002
        if (_ind7521 < _len7521) {
            
        } else {
            break;
        }
        // item 75210004
        var node = _col7521[_ind7521];
        // item 7524
        action(node)
        // item 75210003
        _ind7521++;
    }
}

function foreachInsert(socket) {
    var begin, beginId, edits, end, endId
    // item 6046
    edits = []
    // item 6050
    end = {
        type : "loopend",
        text : "",
        one : socket.target
    }
    // item 6049
    endId = createItem(
        edits,
        end
    )
    // item 6045
    begin = {
        type : "loopbegin",
        text : "",
        one : endId
    }
    // item 6044
    beginId = createItem(
        edits,
        begin
    )
    // item 6048
    redirectUpperItems(
        edits,
        socket.links,
        beginId
    )
    // item 6047
    return edits
}

function generateNewIds(items) {
    var id, oldToNew
    // item 9613
    oldToNew = {}
    // item 96110001
    var _ind9611 = 0;
    var _col9611 = items;
    var _len9611 = _col9611.length;
    while (true) {
        // item 96110002
        if (_ind9611 < _len9611) {
            
        } else {
            break;
        }
        // item 96110004
        var item = _col9611[_ind9611];
        // item 9614
        id = getNextStorageId()
        // item 9615
        oldToNew[item.id] = id
        item.id = id
        // item 96110003
        _ind9611++;
    }
    // item 9616
    return oldToNew
}

function getActionForInsert(type) {
    // item 4397
    return module.insertActions[type] || null
}

function getBoundary(skewer) {
    var boundary
    // item 8786
    boundary = skewer.boundary +
      Config.METRE
    // item 8783
    if (skewer.main) {
        // item 8787
        boundary += Config.METRE
    }
    // item 8788
    return boundary
}

function getBranchById(branchId) {
    var branches
    // item 8979
    branches = module.visuals.branches
    // item 89800001
    var _ind8980 = 0;
    var _col8980 = branches;
    var _len8980 = _col8980.length;
    while (true) {
        // item 89800002
        if (_ind8980 < _len8980) {
            
        } else {
            // item 8983
            return null
        }
        // item 89800004
        var branch = _col8980[_ind8980];
        // item 8984
        if (branch.node.branchId == branchId) {
            // item 8982
            return branch
        }
        // item 89800003
        _ind8980++;
    }
}

function getBranchByName(name) {
    var branches
    // item 9650
    branches = module.visuals.branches
    // item 96510001
    var _ind9651 = 0;
    var _col9651 = branches;
    var _len9651 = _col9651.length;
    while (true) {
        // item 96510002
        if (_ind9651 < _len9651) {
            
        } else {
            // item 9654
            return null
        }
        // item 96510004
        var branch = _col9651[_ind9651];
        // item 9655
        if (branch.node.text == name) {
            // item 9653
            return branch
        }
        // item 96510003
        _ind9651++;
    }
}

function getBranchItemId(branchId) {
    var branches, rightBranch
    // item 9638
    branches = module.visuals.branches
    // item 9640
    rightBranch = getBranchById(branchId)
    // item 9641
    if (rightBranch) {
        // item 9637
        return rightBranch.node.itemId
    } else {
        // item 9639
        return branches[0].node.itemId
    }
}

function getClipboard(type) {
    // item 9353
    if (getClipboardType() == type) {
        // item 9348
        return getClipboardCore()
    } else {
        // item 9350
        return null;
    }
}

function getClipboardCore(type) {
    var fun
    // item 9527
    fun = module.callbacks.getClipboard
    // item 9519
    if (fun) {
        // item 9522
        return fun();
    } else {
        // item 9523
        return null;
    }
}

function getClipboardType() {
    var fun
    // item 9354
    fun = module.callbacks.getClipboardType
    // item 9336
    if (fun) {
        // item 9339
        return fun();
    } else {
        // item 9341
        return null;
    }
}

function getCompX1(item) {
    // item 13184
    return -item.w
}

function getCompX2(item) {
    // item 13190
    return -item.w + Config.INPUT_LEFT
}

function getCompX3(item) {
    // item 13196
    return item.w - Config.INPUT_LEFT * 2
}

function getCompX4(item) {
    // item 13202
    return item.w - Config.INPUT_LEFT * 1.4
}

function getCompX5(item) {
    // item 13208
    return item.w
}

function getCompY1(item) {
    // item 13214
    return -item.h
}

function getCompY2(item) {
    // item 13232
    var y1 = getCompY1(item)
    var y4 = getCompY4(item)
    // item 13233
    return (y1 + y4) / 2
}

function getCompY3(item) {
    // item 13226
    return -item.h + item.a * 2
}

function getCompY4(item) {
    // item 13220
    return getCompY3(item) + Config.INPUT_OVERLAP
}

function getCompY5(item) {
    // item 13239
    return item.h
}

function getCopyFunction(node) {
    var _sw91830000_ = 0;
    // item 91830000
    _sw91830000_ = node.type;
    // item 91830001
    if (_sw91830000_ === "header") {
        // item 9224
        return null
    } else {
        // item 91830002
        if (_sw91830000_ === "question") {
            // item 9219
            return copyQuestion
        } else {
            // item 91830003
            if (_sw91830000_ === "case") {
                // item 9220
                return copyCase
            } else {
                // item 91830004
                if (_sw91830000_ === "address") {
                    // item 9225
                    return null
                } else {
                    // item 91830005
                    if (_sw91830000_ === "params") {
                        // item 9274
                        return null
                    } else {
                        // item 91830006
                        if (_sw91830000_ === "junction") {
                            // item 12864
                            return null
                        } else {
                            // item 91830007
                            if (_sw91830000_ === "branch") {
                                // item 9221
                                return copyBranch
                            } else {
                                // item 91830008
                                if (_sw91830000_ === "select") {
                                    // item 9222
                                    return copySelect
                                } else {
                                    // item 91830009
                                    if (_sw91830000_ === "loopbegin") {
                                        // item 9262
                                        return copyLoop
                                    } else {
                                        // item 91830010
                                        if (_sw91830000_ === "loopend") {
                                            // item 9265
                                            return copyLoopEnd
                                        } else {
                                            // item 9223
                                            return copySimple
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

function getCopyTarget(node, ordinal) {
    var next
    // item 10222
    if (ordinal >= node.next.length) {
        // item 10225
        return ""
    } else {
        // item 10226
        next = node.next[ordinal]
        // item 10227
        if (next.id in module.selection.prims) {
            // item 10229
            return next.itemId
        } else {
            // item 10230
            return "finish"
        }
    }
}

function getCreateList(dict, key) {
    var list
    // item 7508
    list = dict[key]
    // item 7510
    if (list) {
        
    } else {
        // item 7513
        list = []
        dict[key] = list
    }
    // item 7509
    return list
}

function getCreateObj(dict, key) {
    var obj
    // item 10977
    obj = dict[key]
    // item 10979
    if (obj) {
        
    } else {
        // item 10982
        obj = {}
        dict[key] = obj
    }
    // item 10978
    return obj
}

function getDiaLineFormat(item) {
    // item 4234
    var format = {}
    // item 10883
    format.lineColor = Theme.get("line")
    format.lineThickness = Theme.get("thickness")
    // item 4235
    return format
}

function getDiagramAsItems() {
    var items, storage
    // item 2885
    items = copyItems()
    // item 2874
    storage = module.storage
    // item 385
    return {
        name : storage.name,
        type : storage.type,
        items : items
    }
}

function getDistance(n1, n2, vertical) {
    var dx, dy
    // item 12002
    dx = n1.x - n2.x
    dy = n1.y - n2.y
    // item 12006
    if (vertical) {
        // item 12009
        dx *= 4
    } else {
        // item 12010
        dy *= 4
    }
    // item 12001
    return Math.sqrt(dx * dx + dy * dy)
}

function getDown(node) {
    // item 4087
    return node.down.tail
}

function getEdge(edgeId) {
    var visuals
    // item 5791
    visuals = module.visuals
    // item 5790
    return visuals.edges.get(edgeId)
}

function getEditItem(id) {
    // item 5180
    return module.storage.items[id]
}

function getEffectiveItemId(visuals, node) {
    // item 4349
    if (node.itemId) {
        // item 4352
        return node.itemId
    } else {
        // item 4353
        return firstBranchNode(visuals).itemId
    }
}

function getFlowerHeight(self) {
    // item 2264
    return self.height
}

function getFlowerWidth(self) {
    var width
    // item 2271
    width = self.x
    // item 22730001
    var _ind2273 = 0;
    var _col2273 = self.widths;
    var _len2273 = _col2273.length;
    while (true) {
        // item 22730002
        if (_ind2273 < _len2273) {
            
        } else {
            break;
        }
        // item 22730004
        var lineWidth = _col2273[_ind2273];
        // item 2276
        width = Math.max(width, lineWidth)
        // item 22730003
        _ind2273++;
    }
    // item 2272
    return width
}

function getFont() {
    // item 699
    return null
}

function getFonts(diagram) {
    // item 1076
    return []
}

function getFontsForItems(ids) {
    // item 1077
    return []
}

function getFormat(ids) {
    // item 1078
    return {}
}

function getFormatForIcon(type) {
    var format
    // item 2582
    format = {}
    // item 2581
    format.fillColor = Theme.icon(type, "iconback")
    format.lineColor = Theme.icon(type, "iconline")
    format.lineThickness = Theme.icon(type, "thickness")
    format.lineStyle = Theme.icon(type, "style")
    format.shadow = Theme.icon(type, "shadow")
    // item 2583
    return format
}

function getIconCount(graph) {
    // item 195
    var result = 0;
    // item 198
    return result;
}

function getIconEngine(type) {
    var engine
    // item 2528
    engine = module.icons[type]
    // item 2529
    if (engine) {
        // item 2532
        return engine
    } else {
        // item 3681
        return null
    }
}

function getItem(id) {
    var node
    // item 10303
    node = getNodeByItem(
        module.visuals,
        id
    )
    // item 10304
    if (node) {
        // item 10307
        return {
            id : node.itemId,
            x : node.x,
            y : node.y,
            text : node.text,
            type : node.type
        }
    } else {
        // item 793
        return null
    }
}

function getItemRect(id) {
    
}

function getLeft(node) {
    // item 4099
    return node.left.head
}

function getLeftCase(caseIcon) {
    var index, select
    // item 7987
    select = caseIcon.select
    // item 7981
    index = select.cases.indexOf(caseIcon)
    // item 7983
    if (index == 0) {
        // item 7986
        return null
    } else {
        // item 7982
        return select.cases[index - 1]
    }
}

function getLeftHeight(node) {
    var left
    // item 4251
    if ((node.type == "junction") && (node.left)) {
        // item 4255
        left = getLeft(node)
        // item 4256
        if (left.type == "question") {
            // item 4257
            return left.h
        } else {
            // item 4258
            return 0
        }
    } else {
        // item 4258
        return 0
    }
}

function getLowestLevel(visuals) {
    var bottom
    // item 8566
    if (visuals.end) {
        // item 8569
        return visuals.end.level
    } else {
        // item 8570
        bottom = goDown(visuals.header)
        // item 8571
        return bottom.level
    }
}

function getNextBranch(branchNode) {
    var branches, index
    // item 8634
    branches = module.visuals.branches
    // item 8635
    if (branchNode.branchId == branches.length) {
        // item 8638
        index = 0
    } else {
        // item 8639
        index = branchNode.branchId
    }
    // item 8640
    return branches[index]
}

function getNextDown(node) {
    while (true) {
        // item 6564
        node = getLeft(node)
        // item 6566
        if (node.down) {
            break;
        }
    }
    // item 6567
    return node
}

function getNextId(visuals) {
    var id
    // item 3780
    id = visuals.nextId.toString()
    visuals.nextId++
    // item 3781
    return id
}

function getNextOccurence() {
    var current, occ, search, total
    // item 12184
    search = module.search
    total = search.occurences.length
    current = search.output.current
    // item 12180
    if (total == 0) {
        // item 12183
        return -1
    } else {
        while (true) {
            // item 12187
            current++
            // item 12185
            if (current >= total) {
                // item 12179
                return -1
            }
            // item 12189
            occ = search.occurences[current]
            // item 12188
            if (occ.active) {
                // item 12191
                return current
            }
        }
    }
}

function getNextStorageId() {
    var id, storage
    // item 9428
    storage = module.storage
    // item 9427
    id = storage.nextId.toString()
    storage.nextId++
    // item 9426
    return id
}

function getNextUp(node) {
    while (true) {
        // item 6573
        node = getLeft(node)
        // item 6575
        if (node.up) {
            break;
        }
    }
    // item 6576
    return node
}

function getNode(nodeId) {
    var visuals
    // item 5187
    visuals = module.visuals
    // item 5186
    return visuals.nodes.get(nodeId)
}

function getNodeByItem(visuals, itemId) {
    // item 3042
    return visuals.itemsToNodes[itemId]
}

function getNodeInfo(context, node) {
    var nodeInfo
    // item 10051
    if (node.id in context.nodes) {
        // item 10055
        nodeInfo = context.nodes[node.id]
    } else {
        // item 9983
        nodeInfo = {
            node : node,
            include : false,
            remaining : node.prev.length,
            aremaining : node.aprev.length
        }
        // item 9991
        context.nodes[node.id] = nodeInfo
    }
    // item 9990
    return nodeInfo
}

function getNodeLines(node) {
    // item 12695
    var txt = node.text || ""
    // item 12696
    var lines1 = txt.split("\n")
    // item 12697
    var isNotEmpty = function(text) {
    	return text.trim() != ""
    }
    // item 12698
    return lines1.filter(isNotEmpty)
}

function getNodeTokens(node) {
    var identifiers, isIdentifier, takeText
    // item 12705
    isIdentifier = function(token) {
        return token.type == "identifier"
    }
    // item 12706
    if (node.tokens) {
        // item 12710
        identifiers = node.tokens.filter(
            isIdentifier
        )
        // item 12711
        if (identifiers.length == 0) {
            // item 12709
            return undefined
        } else {
            // item 12716
            takeText = function(token) {
                return token.text
            }
            // item 12712
            return identifiers.map(
                takeText
            )
        }
    } else {
        // item 12709
        return undefined
    }
}

function getNodesFromSelection() {
    var node, result, selection
    // item 4882
    result = []
    // item 4881
    selection = module.selection
    // item 48830001
    var _ind4883 = 0;
    var _col4883 = selection.prims;
    var _keys4883 = Object.keys(_col4883); 
    var _len4883 = _keys4883.length;
    while (true) {
        // item 48830002
        if (_ind4883 < _len4883) {
            
        } else {
            break;
        }
        // item 48830004
        var id = _keys4883[_ind4883]; var prim = _col4883[id];
        // item 4885
        if (prim == "node") {
            // item 12861
            node = getNode(id)
            // item 4888
            result.push(node)
        }
        // item 48830003
        _ind4883++;
    }
    // item 4880
    return result
}

function getNumberPart(text) {
    var first, tail
    // item 8228
    text = text || ""
    // item 8216
    first = firstDigit(text)
    // item 8217
    if (first == -1) {
        // item 8220
        return 0
    } else {
        // item 8222
        tail = text.substring(
            first,
            text.length
        )
        // item 8221
        return parseInt(tail)
    }
}

function getPrevOccurence() {
    var current, occ, search, total
    // item 12166
    search = module.search
    total = search.occurences.length
    current = search.output.current
    // item 12161
    if (total == 0) {
        // item 12164
        return -1
    } else {
        while (true) {
            // item 12169
            current--
            // item 12167
            if (current < 0) {
                // item 12160
                return -1
            }
            // item 12173
            occ = search.occurences[current]
            // item 12170
            if (occ.active) {
                // item 12175
                return current
            }
        }
    }
}

function getRight(node) {
    // item 4105
    return node.right.tail
}

function getSearchState() {
    var search
    // item 12018
    search = module.search
    // item 12016
    return {
        output : Utils.copyObject(search.output),
        input : Utils.copyObject(search.input)
    }
}

function getSelection() {
    
}

function getSilCorner(visuals) {
    var beneath, left
    // item 8456
    beneath = getDown(visuals.header)
    left = getLeft(beneath)
    // item 8457
    return left
}

function getSocketBranchId(socket) {
    var branchId
    // item 9594
    if (socket.left) {
        // item 9598
        branchId = socket.node.branchId
    } else {
        // item 9597
        branchId = socket.node.branchId + 1
    }
    // item 9599
    return branchId
}

function getSocketElement(socket) {
    var element
    // item 7630
    if (socket.edge) {
        // item 7634
        element = socket.edge
    } else {
        // item 7633
        element = socket.node
    }
    // item 7635
    return element
}

function getSpaceWidth(self) {
    // item 2144
    if (self.spaceWidth) {
        
    } else {
        // item 2143
        self.spaceWidth = render.measureTextWidth(
            "n"
        )
    }
    // item 2147
    return self.spaceWidth
}

function getTabPosition(self, x) {
    var currentTabCount, spaceWidth, tabWidth, targetTabCount
    // item 2148
    spaceWidth = getSpaceWidth(self)
    // item 2132
    tabWidth = spaceWidth * SpacesInTab
    // item 2131
    currentTabCount = Math.floor(x / tabWidth)
    // item 2133
    targetTabCount = currentTabCount + 1
    // item 2134
    return targetTabCount * tabWidth
}

function getTokenColor(token, source) {
    var type
    // item 10844
    if (source) {
        // item 10884
        if ((token.type == "identifier") && ((token.text in module.keywords) || (token.text in module.keyValues))) {
            // item 10889
            type = "keyword"
        } else {
            // item 10888
            type = token.type
        }
        // item 2068
        return Theme.get(type)
    } else {
        // item 10847
        return Theme.get("identifier")
    }
}

function getUp(node) {
    // item 4093
    return node.up.head
}

function getX(node) {
    // item 4186
    return node.skewer.coord
}

function getY(node) {
    // item 4192
    return node.level.coord
}

function getYesColor() {
    // item 2725
    return Theme.get("backtext")
}

function goDown(node) {
    while (true) {
        // item 7669
        if (node.down) {
            
        } else {
            break;
        }
        // item 7673
        node = getDown(node)
    }
    // item 7672
    return node
}

function goLeft(node) {
    while (true) {
        // item 4047
        if (node.left) {
            
        } else {
            break;
        }
        // item 4051
        node = getLeft(node)
    }
    // item 4050
    return node
}

function goRight(node) {
    while (true) {
        // item 4057
        if (node.right) {
            
        } else {
            break;
        }
        // item 4061
        node = getRight(node)
    }
    // item 4060
    return node
}

function goUp(node) {
    while (true) {
        // item 7220
        if (node.up) {
            
        } else {
            break;
        }
        // item 7224
        node = getUp(node)
    }
    // item 7223
    return node
}

function handleBacktick(self, op, cat, code) {
    // item 105700001
    if (op === "char") {
        // item 10562
        if (self.escaping) {
            // item 10564
            handleEscape(
                self,
                code
            )
            // item 10565
            self.escaping = false
        } else {
            // item 105520001
            if (code === module.BACKTICK) {
                // item 10559
                addChar(self, code)
                // item 10566
                sendToken(
                    self,
                    "string",
                    self.chars
                )
                // item 10560
                setTop(self, "normal")
            } else {
                // item 105520002
                if (code === module.BACK) {
                    // item 10567
                    self.escaping = true
                } else {
                    // item 10568
                    addChar(self, code)
                }
            }
        }
    } else {
        // item 105700002
        if (op === "eol") {
            // item 10577
            sendToken(
                self,
                "string",
                self.chars
            )
        } else {
            // item 105700003
            if (op === "finish") {
                
            } else {
                // item 105700004
                throw "Unexpected switch value: " + op;
            }
            // item 10578
            sendToken(
                self,
                "error",
                self.chars
            )
        }
    }
}

function handleBuilding(self, op, cat, code, pos) {
    // item 12276
    if (op == "char") {
        // item 122790001
        if ((cat === "digit") || (cat === "alpha")) {
            // item 12293
            addChar(self, code)
        } else {
            // item 122790003
            if (cat === "operator") {
                // item 12294
                finishSToken(self)
                // item 12292
                sendSToken(
                    self,
                    pos,
                    [code]
                )
            } else {
                // item 12316
                finishSToken(self)
            }
        }
    } else {
        // item 12317
        finishSToken(self)
    }
}

function handleChoose(self, op, cat, code) {
    // item 10412
    if (op == "char") {
        // item 104660001
        if (code === module.SLASH) {
            // item 10475
            addChar(self, code)
            // item 10476
            setTop(self, "one")
        } else {
            // item 104660002
            if (code === module.STAR) {
                // item 10477
                addChar(self, code)
                // item 10473
                setTop(self, "multi")
            } else {
                // item 11786
                if ((cat == "whitespace") || (!(canStartRegex(self)))) {
                    // item 10478
                    sendToken(
                        self,
                        "operator",
                        self.chars
                    )
                    // item 10474
                    setTop(self, "normal")
                    // item 10479
                    self.onChar(
                        op,
                        cat,
                        code
                    )
                } else {
                    // item 11812
                    addChar(self, code)
                    // item 11813
                    setTop(self, "regex")
                }
            }
        }
    } else {
        // item 10480
        sendToken(
            self,
            "operator",
            self.chars
        )
        // item 10465
        setTop(self, "normal")
    }
}

function handleEscape(self, code) {
    // item 10706
    addChar(self, module.BACK)
    addChar(self, code)
}

function handleIdle(self, op, cat, code, pos) {
    // item 12225
    if (op == "char") {
        // item 122550001
        if ((cat === "digit") || (cat === "alpha")) {
            // item 12318
            self.pos = pos
            // item 12263
            addChar(self, code)
            // item 12415
            self.top = "building"
        } else {
            // item 122550003
            if (cat === "operator") {
                // item 12270
                sendSToken(
                    self,
                    pos,
                    [code]
                )
            }
        }
    }
}

function handleMulti(self, op, cat, code) {
    // item 106010001
    if (op === "char") {
        // item 10610
        addChar(self, code)
        // item 10594
        if (self.escaping) {
            // item 10611
            if (code == module.SLASH) {
                // item 10613
                sendToken(
                    self,
                    "comment",
                    self.chars
                )
                // item 10614
                setTop(self, "normal")
            } else {
                // item 10597
                self.escaping = false
            }
        } else {
            // item 10615
            if (code == module.STAR) {
                // item 10617
                self.escaping = true
            }
        }
    } else {
        // item 106010002
        if (op === "eol") {
            // item 10608
            sendToken(
                self,
                "comment",
                self.chars
            )
        } else {
            // item 106010003
            if (op === "finish") {
                
            } else {
                // item 106010004
                throw "Unexpected switch value: " + op;
            }
            // item 10609
            sendToken(
                self,
                "error",
                self.chars
            )
        }
    }
}

function handleNormal(self, op, cat, code) {
    // item 10350
    if (op == "char") {
        // item 10353
        if (cat == "operator") {
            // item 10355
            if (((self.tt == "number") && (self.part == 1)) && (code == module.DOT)) {
                // item 10359
                addChar(self, code)
                // item 10360
                self.part = 2
            } else {
                // item 10361
                finishToken(self)
                // item 103620001
                if (code === module.SINGLE_QUOTE) {
                    // item 10372
                    setTop(self, "single")
                    // item 10377
                    addChar(self, code)
                } else {
                    // item 103620002
                    if (code === module.DOUBLE_QUOTE) {
                        // item 10373
                        setTop(self, "quote")
                        // item 10377
                        addChar(self, code)
                    } else {
                        // item 103620003
                        if (code === module.BACKTICK) {
                            // item 10709
                            setTop(self, "backtick")
                            // item 10377
                            addChar(self, code)
                        } else {
                            // item 103620004
                            if (code === module.SLASH) {
                                // item 10374
                                setTop(self, "choose")
                                // item 10377
                                addChar(self, code)
                            } else {
                                // item 10375
                                sendToken(
                                    self,
                                    "operator",
                                    [code]
                                )
                            }
                        }
                    }
                }
            }
        } else {
            // item 10378
            if (self.tt == "idle") {
                // item 103800001
                if (cat === "digit") {
                    // item 10387
                    addChar(self, code)
                    // item 10389
                    setTt(self, "number")
                } else {
                    // item 103800002
                    if (cat === "alpha") {
                        // item 10388
                        addChar(self, code)
                        // item 10390
                        setTt(self, "identifier")
                    } else {
                        // item 103800003
                        if (cat === "whitespace") {
                            
                        } else {
                            // item 103800004
                            throw "Unexpected switch value: " + cat;
                        }
                        // item 10391
                        sendToken(
                            self,
                            "whitespace",
                            [code]
                        )
                    }
                }
            } else {
                // item 103920001
                if ((cat === "digit") || (cat === "alpha")) {
                    // item 10399
                    addChar(self, code)
                } else {
                    // item 103920003
                    if (cat === "whitespace") {
                        
                    } else {
                        // item 103920004
                        throw "Unexpected switch value: " + cat;
                    }
                    // item 10406
                    finishToken(self)
                    // item 10405
                    sendToken(
                        self,
                        "whitespace",
                        [code]
                    )
                }
            }
        }
    } else {
        // item 10376
        finishToken(self)
    }
}

function handleOne(self, op, cat, code) {
    // item 10644
    if (op == "char") {
        // item 10636
        addChar(self, code)
    } else {
        // item 10639
        sendToken(
            self,
            "comment",
            self.chars
        )
        // item 10640
        setTop(self, "normal")
    }
}

function handleQuote(self, op, cat, code, quote) {
    // item 10543
    handleString(
        self,
        op,
        cat,
        code,
        module.DOUBLE_QUOTE
    )
}

function handleRegex(self, op, cat, code, quote) {
    // item 11766
    if (op == "char") {
        // item 11814
        if (self.part == 1) {
            // item 11779
            if (self.escaping) {
                // item 11781
                handleEscape(
                    self,
                    code
                )
                // item 11782
                self.escaping = false
            } else {
                // item 117690001
                if (code === module.SLASH) {
                    // item 11776
                    addChar(self, code)
                    // item 11783
                    self.part = 2
                } else {
                    // item 117690002
                    if (code === module.BACK) {
                        // item 11784
                        self.escaping = true
                    } else {
                        // item 11785
                        addChar(self, code)
                    }
                }
            }
        } else {
            // item 11817
            if (cat == "alpha") {
                // item 11820
                addChar(self, code)
            } else {
                // item 11821
                sendToken(
                    self,
                    "number",
                    self.chars
                )
                // item 11822
                setTop(self, "normal")
                // item 11823
                self.onChar(
                    op,
                    cat,
                    code
                )
            }
        }
    } else {
        // item 11824
        if (self.part == 1) {
            // item 11778
            sendToken(
                self,
                "error",
                self.chars
            )
        } else {
            // item 11828
            sendToken(
                self,
                "number",
                self.chars
            )
            // item 11827
            setTop(self, "normal")
        }
    }
}

function handleSingle(self, op, cat, code, quote) {
    // item 10537
    handleString(
        self,
        op,
        cat,
        code,
        module.SINGLE_QUOTE
    )
}

function handleString(self, op, cat, code, quote) {
    // item 10517
    if (op == "char") {
        // item 10530
        if (self.escaping) {
            // item 10532
            handleEscape(
                self,
                code
            )
            // item 10533
            self.escaping = false
        } else {
            // item 105200001
            if (code === quote) {
                // item 10527
                addChar(self, code)
                // item 10534
                sendToken(
                    self,
                    "string",
                    self.chars
                )
                // item 10528
                setTop(self, "normal")
            } else {
                // item 105200002
                if (code === module.BACK) {
                    // item 10535
                    self.escaping = true
                } else {
                    // item 10536
                    addChar(self, code)
                }
            }
        }
    } else {
        // item 10529
        sendToken(
            self,
            "error",
            self.chars
        )
    }
}

function hasOtherEntries(source, higher) {
    var context, node, visuals
    // item 7053
    visuals = module.visuals
    // item 7046
    context = {
        found : false,
        visited : {}
    }
    // item 70500001
    var _ind7050 = 0;
    var _col7050 = source.links;
    var _len7050 = _col7050.length;
    while (true) {
        // item 70500002
        if (_ind7050 < _len7050) {
            
        } else {
            break;
        }
        // item 70500004
        var link = _col7050[_ind7050];
        // item 7052
        node = getNodeByItem(
            visuals,
            link.source
        )
        // item 7045
        hasOtherEntriesStep(
            node,
            higher,
            context
        )
        // item 70500003
        _ind7050++;
    }
    // item 7047
    return context.found
}

function hasOtherEntriesStep(lower, higher, context) {
    // item 7048
    if (((context.found) || (lower == higher)) || (lower.id in context.visited)) {
        
    } else {
        // item 7034
        context.visited[lower.id] = true
        // item 7035
        if (lower.prev.length == 0) {
            // item 7038
            context.found = true
        } else {
            // item 70420001
            var _ind7042 = 0;
            var _col7042 = lower.prev;
            var _len7042 = _col7042.length;
            while (true) {
                // item 70420002
                if (_ind7042 < _len7042) {
                    
                } else {
                    break;
                }
                // item 70420004
                var prev = _col7042[_ind7042];
                // item 7044
                hasOtherEntriesStep(
                    prev,
                    higher,
                    context
                )
                // item 70420003
                _ind7042++;
            }
        }
    }
}

function hasUntouchedArrows(visited, node) {
    // item 77560001
    var _ind7756 = 0;
    var _col7756 = node.aprev;
    var _len7756 = _col7756.length;
    while (true) {
        // item 77560002
        if (_ind7756 < _len7756) {
            
        } else {
            // item 7761
            return false
        }
        // item 77560004
        var prev = _col7756[_ind7756];
        // item 7758
        if (prev.itemId in visited) {
            
        } else {
            // item 7762
            return true
        }
        // item 77560003
        _ind7756++;
    }
}

function hasUntouchedUpstream(visited, node) {
    // item 6869
    if (node.type == "case") {
        // item 6871
        return false
    } else {
        // item 50400001
        var _ind5040 = 0;
        var _col5040 = node.prev;
        var _len5040 = _col5040.length;
        while (true) {
            // item 50400002
            if (_ind5040 < _len5040) {
                
            } else {
                // item 5046
                return false
            }
            // item 50400004
            var prev = _col5040[_ind5040];
            // item 5043
            if (prev.itemId in visited) {
                
            } else {
                // item 5047
                return true
            }
            // item 50400003
            _ind5040++;
        }
    }
}

function hexByteToString(value) {
    // item 3400
    return ("00" + value.toString(16)).substr(-2)
}

function hideSockets() {
    // item 13082
    clearSockets()
}

function hit(pos) {
    // item 180
    return false;
}

function horizontalCandy(edge, render) {
    var head, headX, headY, left, right, tail, tailX, w, x, y
    // item 4767
    head = edge.head
    tail = edge.tail
    // item 4714
    headX = getX(head)
    headY = getY(head)
    tailX = getX(tail)
    x = headX
    y = headY
    w = tailX - headX
    // item 4715
    left = x + head.w
    right = tailX
    // item 4711
    render.createHCandy(
        x,
        y,
        w,
        false,
        left,
        right,
        "line_candies"
    )
}

function iconsInit() {
    var icons, noop
    // item 2455
    icons = {}
    module.icons = icons
    // item 2456
    defineIcon(
        "action",
        Action_draw,
        Action_flow
    )
    // item 2457
    defineIcon(
        "question",
        Question_draw,
        Question_flow
    )
    // item 2458
    defineIcon(
        "header",
        Header_draw,
        Header_flow
    )
    // item 2459
    defineIcon(
        "end",
        Header_draw,
        Header_flow
    )
    // item 6052
    defineIcon(
        "loopbegin",
        LoopBegin_draw,
        LoopBegin_flow
    )
    // item 6053
    defineIcon(
        "loopend",
        LoopEnd_draw,
        LoopBegin_flow
    )
    // item 6278
    defineIcon(
        "params",
        Params_draw,
        Params_flow
    )
    // item 6324
    defineIcon(
        "select",
        Select_draw,
        Select_flow
    )
    // item 6325
    defineIcon(
        "case",
        Case_draw,
        Case_flow
    )
    // item 7093
    noop = function () {}
    // item 7092
    defineIcon(
        "arrow-loop",
        noop,
        noop
    )
    // item 8394
    defineIcon(
        "branch",
        Branch_draw,
        Branch_flow
    )
    // item 8395
    defineIcon(
        "address",
        Address_draw,
        Branch_flow
    )
    // item 12732
    defineIcon(
        "insertion",
        Insertion_draw,
        Insertion_flow
    )
    // item 13100
    defineIcon(
        "input",
        Input_draw,
        Input_flow
    )
    // item 13314
    defineIcon(
        "pause",
        Pause_draw,
        Pause_flow
    )
}

function inTextArea(node, x, y) {
    // item 5231
    if (canEditNodeText(node)) {
        // item 5161
        return false
    } else {
        // item 5235
        return false
    }
}

function init() {
    // item 12731
    module.userSettings = {}
    // item 1993
    lexInit()
    // item 2436
    iconsInit()
    // item 2566
    initColors()
    // item 4404
    initSockets()
    // item 3913
    module.widthNodes = {
        "end" : true,
        "header" : true,
        "junction" : true,
        "pause" : true
    }
    // item 9792
    module.selectable = {
        action : true,
        insertion : true,
        question : true,
        "arrow-loop" : true,
        loopbegin : true,
        loopend : true,
        select : true,
        "case" : true,
        input : true,
        pause : true
    }
    // item 12017
    module.search = {
    	input: {
    		find: "",
    		replace: "",
    		sensitive: false,
    		whole: false
    	},
    	output: {
    		canPrev: false,
    		canNext: false,
    		canReplace: false,
    		current: -1,
    		total: 0,
    		before: "",
    		match: "",
    		after: ""
    	},
    	items: [],
    	occurences: []
    }
}

function initColors() {
    // item 2567
    module.colors = {}
    // item 2557
    module.colors.iconFill = "#000000"
    module.colors.iconBorder = "#ffffff"
    module.colors.background = "#303000"
}

function initSockets() {
    // item 4403
    module.insertActions = {}
    // item 4402
    module.insertActions.action = function(socket) {
        return simpleInsert(socket, "action")
    }
    // item 12733
    module.insertActions.insertion = function(socket) {
        return simpleInsert(socket, "insertion")
    }
    // item 13099
    module.insertActions.input = function(socket) {
        return simpleInsert(socket, "input")
    }
    // item 13315
    module.insertActions.pause = function(socket) {
        return simpleInsert(socket, "pause")
    }
    // item 6391
    module.insertActions.select = selectInsert
    // item 6733
    module.insertActions["case"] = caseInsert
    module.insertActions["first-case"] = firstCaseInsert
    // item 4598
    module.insertActions.question = questionInsert
    // item 6051
    module.insertActions["foreach"] = foreachInsert
    // item 8945
    module.insertActions.branch = branchInsert
}

function insertFreeItem(x, y, type, subtype) {
    
}

function isActive(occ) {
    // item 12620
    return occ.active
}

function isAddressJun(node) {
    var above
    // item 8715
    if (node.up) {
        // item 8721
        above = getUp(node)
        // item 8718
        if ((above.type == "address") || ((node.right) && (node.right.role == "floor"))) {
            // item 8719
            return true
        } else {
            // item 8720
            return false
        }
    } else {
        // item 8720
        return false
    }
}

function isArrowLoop(node) {
    // item 7114
    return node.type == "arrow-loop"
}

function isBackLink(lower, upper) {
    // item 7154
    if ((isArrowLoop(upper)) && (contains(upper.aprev, lower))) {
        // item 7158
        return true
    } else {
        // item 7159
        return false
    }
}

function isBranchJun(node) {
    var below
    // item 8727
    if (node.down) {
        // item 8733
        below = getDown(node)
        // item 8730
        if (below.type == "branch") {
            // item 8731
            return true
        } else {
            // item 8732
            return false
        }
    } else {
        // item 8732
        return false
    }
}

function isCaseJun(node) {
    var below
    // item 6590
    if (node.down) {
        // item 6596
        below = getDown(node)
        // item 6593
        if (below.type == "case") {
            // item 6594
            return true
        } else {
            // item 6595
            return false
        }
    } else {
        // item 6595
        return false
    }
}

function isClosing(state, finish) {
    // item 11303
    if ((state.current.type == "operator") && (state.current.text == finish)) {
        // item 11307
        return true
    } else {
        // item 11308
        return false
    }
}

function isDegQuestion(edge) {
    // item 7647
    if (((edge.vertical) || (!(edge.head.type == "question"))) || (!(edge.tail.up))) {
        // item 6036
        return false
    } else {
        // item 6037
        return true
    }
}

function isDigit(c) {
    // item 1171
    if ((c >= module.ZERO) && (c <= module.NINE)) {
        // item 1175
        return true
    } else {
        // item 1176
        return false
    }
}

function isDrawableNode(node) {
    // item 5312
    if (node.skewer) {
        // item 5315
        return true
    } else {
        // item 5316
        return false
    }
}

function isEnd(state) {
    // item 11187
    return state.current.type == "end"
}

function isHuman() {
    // item 11714
    return module.language == "LANG_HUMAN"
}

function isLeftDown(node) {
    // item 4441
    if (((((node.type == "junction") && (node.left)) && (!(node.up))) && (!(node.right))) && (node.down)) {
        // item 4449
        return true
    } else {
        // item 4448
        return false
    }
}

function isLeftUp(node) {
    // item 4455
    if (((((node.type == "junction") && (node.left)) && (node.up)) && (!(node.right))) && (!(node.down))) {
        // item 4463
        return true
    } else {
        // item 4462
        return false
    }
}

function isLower(record, source) {
    // item 5929
    if (record.type == "node") {
        // item 5932
        return record.element.y > source.tail.y
    } else {
        // item 5933
        return record.element.tail.y > source.tail.y
    }
}

function isNewStart(prev, item) {
    // item 11216
    if (item.type == "operator") {
        // item 11219
        return false
    } else {
        // item 11222
        if (((noBreakKeyword(item)) || (prev == "operator")) || (prev == "keyword")) {
            // item 11214
            return false
        } else {
            // item 11215
            return true
        }
    }
}

function isOperator(c) {
    // item 1137
    if (module.opChars[c]) {
        // item 1140
        return true
    } else {
        // item 1136
        return false
    }
}

function isPart(haystack, start, needle) {
    var end, htoken, i, ntoken
    // item 12543
    end = start + needle.length
    // item 12544
    if (end > haystack.length) {
        // item 12547
        return false
    } else {
        // item 125480001
        i = 0;
        while (true) {
            // item 125480002
            if (i < needle.length) {
                
            } else {
                // item 12552
                return true
            }
            // item 12551
            htoken = haystack[i + start]
            ntoken = needle[i]
            // item 12550
            if (htoken.text == ntoken.text) {
                
            } else {
                // item 12547
                return false
            }
            // item 125480003
            i++;
        }
    }
}

function isRightT(node) {
    // item 7682
    if (((((node.type == "junction") && (!(node.left))) && (node.up)) && (node.right)) && (node.down)) {
        // item 7690
        return true
    } else {
        // item 7689
        return false
    }
}

function isRightUp(node) {
    // item 7567
    if (((((node.type == "junction") && (!(node.left))) && (node.up)) && (node.right)) && (!(node.down))) {
        // item 7575
        return true
    } else {
        // item 7574
        return false
    }
}

function isScenario() {
    // item 13274
    return !!module.storage.keywords.scenario
}

function isSelected(id) {
    // item 4636
    return id in module.selection.prims
}

function isSeparator(item) {
    // item 11252
    if ((item.text == ",") || (item.text == ";")) {
        // item 11258
        return true
    } else {
        // item 11259
        return false
    }
}

function isSeqStart(item) {
    var _sw115000000_ = 0;
    // item 115000000
    _sw115000000_ = item.type;
    // item 115000001
    if (_sw115000000_ === "operator") {
        // item 11510
        if ((item.text == ")") || (item.text == "=>")) {
            // item 11509
            return true
        } else {
            // item 11512
            return false
        }
    } else {
        // item 115000002
        if (_sw115000000_ === "keyword") {
            // item 11509
            return true
        } else {
            // item 11508
            return false
        }
    }
}

function isSilhouette() {
    // item 8154
    return module.visuals.branches.length > 1
}

function isSimpleItem(node) {
    var _sw57660000_ = 0;
    // item 57660000
    _sw57660000_ = node.type;
    // item 57660001
    if (((((((_sw57660000_ === "header") || (_sw57660000_ === "end")) || (_sw57660000_ === "junction")) || (_sw57660000_ === "select")) || (_sw57660000_ === "question")) || (_sw57660000_ === "address")) || ((_sw57660000_ === "case") && (firstCase(node.select) == node))) {
        // item 5780
        return false
    } else {
        // item 5779
        return true
    }
}

function isSingleComment(item) {
    // item 11235
    if ((item.type == "comment") && (item.text.substring(0, 2) == "//")) {
        // item 11238
        return true
    } else {
        // item 11239
        return false
    }
}

function isSubset(larger, smaller) {
    // item 6243
    if (larger) {
        // item 62410001
        var _ind6241 = 0;
        var _col6241 = smaller;
        var _keys6241 = Object.keys(_col6241); 
        var _len6241 = _keys6241.length;
        while (true) {
            // item 62410002
            if (_ind6241 < _len6241) {
                
            } else {
                // item 6246
                return true
            }
            // item 62410004
            var smallKey = _keys6241[_ind6241]; var _ = _col6241[smallKey];
            // item 7007
            if (smallKey in larger) {
                
            } else {
                // item 6247
                return false
            }
            // item 62410003
            _ind6241++;
        }
    } else {
        // item 6247
        return false
    }
}

function isUpstream(lower, upper) {
    var context
    // item 7139
    context = {
        found : false,
        visited : {}
    }
    // item 7141
    isUpstreamStep(
        lower,
        upper,
        context
    )
    // item 7140
    return context.found
}

function isUpstreamStep(lower, upper, context) {
    // item 7132
    if (context.found) {
        
    } else {
        // item 7127
        if (lower == upper) {
            // item 7126
            context.found = true
        } else {
            // item 7120
            if (lower.id in context.visited) {
                
            } else {
                // item 7123
                context.visited[lower.id] = true
                // item 71290001
                var _ind7129 = 0;
                var _col7129 = lower.prev;
                var _len7129 = _col7129.length;
                while (true) {
                    // item 71290002
                    if (_ind7129 < _len7129) {
                        
                    } else {
                        break;
                    }
                    // item 71290004
                    var prev = _col7129[_ind7129];
                    // item 7131
                    isUpstreamStep(
                        prev,
                        upper,
                        context
                    )
                    // item 71290003
                    _ind7129++;
                }
            }
        }
    }
}

function isWhitespace(c) {
    // item 1205
    if (((((c >= 9) && (c <= 13)) || (c == 32)) || (c == 133)) || (c == 160)) {
        // item 1162
        return true
    } else {
        // item 1163
        return false
    }
}

function itemToBText(lines, item) {
    var type
    var _sw127560000_ = 0;
    // item 127560000
    _sw127560000_ = item.type;
    // item 127560001
    if (_sw127560000_ === "branch") {
        // item 10938
        type = "branch" + item.branchId
        // item 12765
        addBText(
            lines,
            item.id,
            type,
            item.text,
            item.one,
            item.two
        )
    } else {
        // item 127560002
        if (_sw127560000_ === "select") {
            // item 12766
            addSelectToBText(
                lines,
                item
            )
        } else {
            // item 127560003
            if (_sw127560000_ === "question") {
                // item 12815
                addIfToBText(
                    lines,
                    item
                )
            } else {
                // item 127560004
                if (_sw127560000_ === "case") {
                    
                } else {
                    // item 10939
                    type = item.type
                    // item 10930
                    addBText(
                        lines,
                        item.id,
                        type,
                        item.text,
                        item.one,
                        item.two
                    )
                }
            }
        }
    }
}

function juncCandy(node, render) {
    // item 4704
    render.createJCandy(
        node.x,
        node.y,
        CandyColor,
        "icon_candies"
    )
}

function keyToString(table, row) {
    var result
    // item 3214
    result = ""
    // item 32120001
    var _ind3212 = 0;
    var _col3212 = table.keys;
    var _len3212 = _col3212.length;
    while (true) {
        // item 32120002
        if (_ind3212 < _len3212) {
            
        } else {
            break;
        }
        // item 32120004
        var part = _col3212[_ind3212];
        // item 3215
        result += "|" + row[part]
        // item 32120003
        _ind3212++;
    }
    // item 3216
    return result
}

function lastCase(select) {
    // item 6668
    return select.cases[select.cases.length - 1]
}

function lastElement(array) {
    // item 8365
    if (array.length == 0) {
        // item 8368
        return null
    } else {
        // item 8354
        return array[array.length - 1]
    }
}

function layoutPrimitive(visuals) {
    var branch, header
    // item 8293
    branch = firstBranchNode(visuals)
    header = visuals.header
    // item 8294
    header.next = branch.next
    // item 8295
    buildManhattan(
        visuals,
        header
    )
}

function layoutSelect(visuals, stack, select) {
    var i, jun, left, node
    // item 6540
    select.cases = []
    node = select.next[0]
    while (true) {
        // item 6541
        node.select = select
        select.cases.push(node)
        // item 6537
        if (node.next.length == 2) {
            
        } else {
            break;
        }
        // item 6543
        node = node.next[1]
    }
    // item 6553
    left = null
    // item 65440001
    var _ind6544 = 0;
    var _col6544 = select.cases;
    var _len6544 = _col6544.length;
    while (true) {
        // item 65440002
        if (_ind6544 < _len6544) {
            
        } else {
            break;
        }
        // item 65440004
        var caseNode = _col6544[_ind6544];
        // item 6546
        jun = createJunction(
            visuals,
            null
        )
        // item 6547
        makeDownEdgeCore(
            visuals,
            jun,
            caseNode,
            null
        )
        // item 6555
        if (left) {
            // item 6558
            createEdge(
                visuals,
                left,
                jun,
                false
            )
        }
        // item 6554
        left = jun
        // item 65440003
        _ind6544++;
    }
    // item 6548
    makeDownEdgeCore(
        visuals,
        select,
        getUp(select.cases[0]),
        null
    )
    // item 65490001
    i = select.cases.length - 1;
    while (true) {
        // item 65490002
        if (i >= 0) {
            
        } else {
            break;
        }
        // item 6551
        node = select.cases[i]
        // item 6552
        planStep(
            stack,
            node,
            node.next[0]
        )
        // item 65490003
        i--;
    }
}

function layoutSilhouette(visuals) {
    var first, leftDown, leftUp, lower, upper
    // item 8327
    leftUp = createJunction(
        visuals,
        null
    )
    // item 8328
    leftDown = createJunction(
        visuals,
        null
    )
    // item 8329
    createEdge(
        visuals,
        leftUp,
        leftDown,
        true
    )
    // item 8330
    upper = leftUp
    lower = leftDown
    // item 83310001
    var _ind8331 = 0;
    var _col8331 = visuals.branches;
    var _len8331 = _col8331.length;
    while (true) {
        // item 83310002
        if (_ind8331 < _len8331) {
            
        } else {
            break;
        }
        // item 83310004
        var branch = _col8331[_ind8331];
        // item 8333
        buildManhattan(
            visuals,
            branch.node
        )
        // item 8334
        connectBranch(
            visuals,
            branch,
            upper,
            lower
        )
        // item 8335
        upper = branch.topNode
        lower = branch.bottomNode
        // item 83310003
        _ind8331++;
    }
    // item 8336
    leftUp.right.role = "rarrow"
    // item 8337
    first = visuals.branches[0]
    // item 8338
    createEdge(
        visuals,
        visuals.header,
        first.topNode,
        true
    )
}

function lexInit() {
    // item 11642
    module.opChars = []
    // item 116380001
    var i = 0;
    while (true) {
        // item 116380002
        if (i < 256) {
            
        } else {
            break;
        }
        // item 11640
        module.opChars.push(false)
        // item 116380003
        i++;
    }
    // item 11637
    saveOpChar("!")
    saveOpChar(";")
    saveOpChar("?")
    saveOpChar("=")
    saveOpChar("<")
    saveOpChar(">")
    saveOpChar("-")
    saveOpChar("+")
    saveOpChar("/")
    saveOpChar("\\")
    saveOpChar("*")
    saveOpChar("%")
    saveOpChar("(")
    saveOpChar(")")
    saveOpChar("(")
    saveOpChar(")")
    saveOpChar("{")
    saveOpChar("}")
    saveOpChar("[")
    saveOpChar("]")
    saveOpChar(":")
    saveOpChar(".")
    saveOpChar("#")
    saveOpChar(",")
    saveOpChar("^")
    saveOpChar("|")
    saveOpChar("&")
    saveOpChar("'")
    saveOpChar("\"")
    saveOpChar("`")
    // item 11641
    module.ZERO = firstChar("0")
    module.NINE = firstChar("9")
    module.UNDER = firstChar("_")
    module.DOT = firstChar(".")
    module.BACK = firstChar("\\")
    module.ESCAPE_X = firstChar("x")
    module.ESCAPE_R = firstChar("r")
    module.ESCAPE_T = firstChar("t")
    module.ESCAPE_N = firstChar("n")
    module.DOUBLE_QUOTE = firstChar("\"")
    module.SINGLE_QUOTE = firstChar("\'")
    module.EQUALS = firstChar("=")
    module.SLASH = firstChar("/")
    module.STAR = firstChar("*")
    module.BACKTICK = firstChar("`")
    module.R = firstChar("r")
    module.N = firstChar("n")
    module.T = firstChar("t")
    // item 11643
    module.longOps = {}
    addLongOp("==")
    addLongOp("===")
    addLongOp("...")
    addLongOp("!==")
    addLongOp(">>>")
    addLongOp("!=")
    addLongOp("<=")
    addLongOp(">=")
    addLongOp("&&")
    addLongOp("||")
    addLongOp("+=")
    addLongOp("-=")
    addLongOp("/=")
    addLongOp("*=")
    addLongOp("|=")
    addLongOp("^=")
    addLongOp("&=")
    addLongOp("=>")
    addLongOp("++")
    addLongOp("--")
    // item 11644
    module.keywords = arrayToSet([
    "abstract", "arguments", "boolean", "break", "byte", "case", "catch",
    "char", "class", "const", "continue", "debugger", "default", "delete",
    "do", "double", "else", "enum", "eval", "export", "extends",
    "final", "finally", "float", "for", "function", "goto", "if",
    "implements", "import", "in", "instanceof", "int", "interface",
    "let", "long", "native", "new", "package", "private", "protected",
    "public", "return", "short", "static", "super",
    "switch", "synchronized", "throw", "throws", "transient", "try", "typeof", "var",
    "void", "volatile", "while", "yield", "async", "await"])
    // item 11648
    module.keyOps = {}
    module.keyOps["in"] = true
    module.keyOps["instanceof"] = true
    module.keyOps["typeof"] = true
    // item 11649
    module.noSpaces = {}
    module.noSpaces[";"] = true
    module.noSpaces[","] = true
    module.noSpaces[")"] = true
    module.noSpaces["]"] = true
    module.noSpaces["}"] = true
    module.noSpaces["("] = true
    module.noSpaces["["] = true
    module.noSpaces["{"] = true
    module.noSpaces["!"] = true
    // item 13085
    module.keyValues = arrayToSet(["true", "false", "null", "undefined", "this"])
}

function lexSearch(text) {
    var lexer, machineList, machines, tcollection
    // item 12205
    text = text || ""
    // item 12200
    lexer = createSearchLexer()
    // item 12202
    tcollection = createSearchTokens()
    // item 12197
    machineList = [
    	lexer,
    	tcollection
    ]
    // item 12198
    machines = new MachineStack(
        machineList
    )
    // item 12199
    toTokens2(
        machines,
        text
    )
    // item 12201
    return tcollection
}

function lexSource(text) {
    var lexer, machineList, machines, ob, tcollection
    // item 11722
    text = text  || ""
    // item 11612
    lexer = createTreeLexer()
    // item 11614
    tcollection = createTokenCollection()
    // item 11615
    ob = new OperBuilder()
    ob.tokens = []
    ob.finish = function() {mergeOps(ob)}
    // item 11609
    machineList = [
    	lexer,
    	ob,
    	tcollection
    ]
    // item 11610
    machines = new MachineStack(
        machineList
    )
    // item 11611
    toTokens2(
        machines,
        text
    )
    // item 11616
    tcollection.tokens.push(
        {type:"end", text:""}
    )
    // item 11613
    return tcollection.tokens
}

function linkEdgeToSkewer(skewer, edge) {
    // item 3837
    edge.skewer = skewer
    skewer.edges.push(edge)
}

function linkLevels(visuals, above, below, distance) {
    // item 4180
    linkSkewersGeneric(
        visuals.levelLinks,
        above,
        below,
        distance
    )
}

function linkNext(context, node1, nextItemId) {
    var address, node2, prevCount, visuals
    // item 8348
    visuals = context.visuals
    // item 3774
    if (nextItemId) {
        // item 3767
        node2 = getNodeByItem(
            visuals,
            nextItemId
        )
        // item 8342
        if (node2.type == "branch") {
            // item 8355
            address = lastElement(context.addresses)
            // item 8356
            if ((address) && (address.branch == node2)) {
                
            } else {
                // item 8361
                address = createNode(
                    visuals,
                    null,
                    "address",
                    node2.text,
                    null
                )
                // item 8430
                flowIcon(
                    module.render,
                    address
                )
                // item 8362
                address.branch = node2
                address.itemId = node2.itemId
                context.addresses.push(address)
            }
            // item 8360
            node1.next.push(address)
            address.prev.push(node1)
        } else {
            // item 6919
            if ((isArrowLoop(node2)) && (isUpstream(node1, node2))) {
                // item 6921
                node1.next.push(node2)
                node2.aprev.push(node1)
            } else {
                // item 3770
                prevCount = node2.prev.length
                // item 3768
                node1.next.push(node2)
                node2.prev.push(node1)
                // item 3771
                if (prevCount == 0) {
                    // item 3769
                    linkNodeToChildren(
                        context,
                        nextItemId
                    )
                }
            }
        }
    }
}

function linkNodeToChildren(context, itemId) {
    var item, items, node
    // item 3758
    items = module.storage.items
    // item 3759
    item = items[itemId]
    // item 3757
    node = getNodeByItem(
        context.visuals,
        itemId
    )
    // item 3760
    linkNext(
        context,
        node,
        item.one
    )
    // item 3761
    linkNext(
        context,
        node,
        item.two
    )
}

function linkNodeToLevel(level, node) {
    // item 3957
    node.level = level
    level.nodes.push(node)
}

function linkNodeToSkewer(skewer, node) {
    // item 3843
    node.skewer = skewer
    skewer.nodes.push(node)
}

function linkSkewers(visuals, left, right, distance) {
    // item 4072
    linkSkewersGeneric(
        visuals.skewerLinks,
        left,
        right,
        distance
    )
}

function linkSkewersGeneric(links, low, high, distance) {
    var link
    // item 4005
    link = links.get(
        low.id,
        high.id
    )
    // item 4007
    if (link) {
        
    } else {
        // item 4010
        link = new SkewerLink(
            low.id,
            high.id
        )
        // item 4011
        links.insert(
            link
        )
    }
    // item 4012
    link.distance = Math.max(
        link.distance,
        distance
    )
}

function loadDiagram(diagram) {
    var storage
    // item 10832
    addTrace(
        "loadDiagram",
        [diagram.type, diagram.name]
    )
    // item 2856
    storage = createStorage(
        diagram,
        diagram.version || 1
    )
    // item 29570001
    var _ind2957 = 0;
    var _col2957 = diagram.items;
    var _len2957 = _col2957.length;
    while (true) {
        // item 29570002
        if (_ind2957 < _len2957) {
            
        } else {
            break;
        }
        // item 29570004
        var item = _col2957[_ind2957];
        // item 2858
        storage.items[item.id] = item
        // item 29570003
        _ind2957++;
    }
    // item 319
    recalculateNextId()
    // item 5634
    buildVisualsForEdit()
    // item 7996
    clearUndo()
}

function longOp1(text) {
    // item 10996
    return text in module.longOps
}

function longOp2(text1, text2) {
    var part1
    // item 11003
    part1 = module.longOps[text1]
    // item 11004
    if (part1) {
        // item 11002
        return text2 in part1
    } else {
        // item 11007
        return false
    }
}

function longOp3(text1, text2, text3) {
    var part1, part2
    // item 11014
    part1 = module.longOps[text1]
    // item 11015
    if (part1) {
        // item 11019
        part2 = part1[text2]
        // item 11020
        if (part2) {
            // item 11013
            return text3 in part2
        } else {
            // item 11018
            return false
        }
    } else {
        // item 11018
        return false
    }
}

function loopBoundaryCheck(depth, node) {
    // item 8076
    if (node.type == "loopbegin") {
        // item 8083
        depth--
    } else {
        // item 8087
        if (node.type == "loopend") {
            // item 8088
            depth++
        }
    }
    // item 8081
    return depth
}

function makeAddressPoints(w, h) {
    // item 8427
    var x = 0
    var y = 0
    var x0 = x - w;
    var x1 = x;
    var x2 = x + w;
    var top = y - h;
    var bottom = y + h;
    var middle = top + 2.0 / 3.0 * h;
    // item 8428
    return [
     x0, middle,
     x1, top,    
     x2, middle,
     x2, bottom,
     x0, bottom
    ]
}

function makeCasePoints(w, h) {
    // item 6379
    var x = 0
    var y = 0
    var x0 = x - w;
    var x1 = x;
    var x2 = x + w;
    var top = y - h;
    var bottom = y + h;
    var middle = bottom - 2.0 / 3.0 * h;
    // item 6380
    return [
    	x0, top,
    	x2, top,
    	x2, middle,
    	x1, bottom,
    	x0, middle
    ]
}

function makeChar2Text(self, char2) {
    // item 1674
    return Utils.arrayToString(
        [self.chars[0], char2]
    )
}

function makeComplexInput(item) {
    // item 13245
    var x1 = -item.w
    var x2 = -item.w + Config.INPUT_LEFT * 1.4
    var x3 = -item.w + Config.INPUT_LEFT * 2
    var x4 = item.w - Config.INPUT_LEFT
    var x5 = item.w
    // item 13246
    var y1 = getCompY1(item)
    var y2 = getCompY2(item)
    var y3 = getCompY3(item)
    var y4 = getCompY4(item)
    var y5 = getCompY5(item)
    // item 13247
    return [
    	x1, y1,
    	x4, y1,
    	x4, y3,
    	x5, y3,
    
    	x5, y5,
    	x3, y5,
    	x3, y4,
    
    	x1, y4,
    	x2, y2
    ]
}

function makeComplexLower2(item) {
    // item 13255
    var x1 = getCompX1(item)
    var x3 = getCompX3(item)
    // item 13258
    var x1 = -item.w + Config.INPUT_LEFT * 2
    var x3 = item.w
    // item 13256
    var y3 = getCompY3(item)
    var y5 = getCompY5(item)
    // item 13257
    return [
    	x1, y5,
    	x1, y3,
    	x3, y3,
    	x3, y5
    ]
}

function makeCustomTexture(render, x, y, w, h) {
    // item 1122
    var texId = render.createTexture(
    	x,
    	y,
    	- w,
    	- h,
    	w * 2,
    	h * 2,
    	"icons"
    );
    // item 1123
    return texId;
}

function makeDownEdge(visuals, head, tail, finalTarget) {
    var edge
    // item 4291
    edge = makeDownEdgeCore(
        visuals,
        head,
        tail,
        finalTarget
    )
    // item 6513
    if (isLeftDown(head)) {
        // item 6516
        finalTarget.mountUp = head
    }
    // item 6582
    edge.role = "down"
    // item 4292
    return edge
}

function makeDownEdgeCore(visuals, head, tail, finalTarget) {
    var edge
    // item 6508
    edge = createEdge(
        visuals,
        head,
        tail,
        true
    )
    // item 6510
    edge.finalTarget = finalTarget
    edge.source = head
    edge.target = tail
    // item 6511
    head.targets.push(edge)
    // item 6512
    tail.sources.push(edge)
    // item 6509
    return edge
}

function makeLeftEdge(visuals, left, right, finalTarget) {
    var edge
    // item 4283
    edge = createEdge(
        visuals,
        left,
        right,
        false
    )
    // item 4285
    edge.role = "left"
    edge.finalTarget = finalTarget
    edge.source = right
    edge.target = left
    // item 4296
    right.targets.push(edge)
    // item 4297
    left.sources.push(edge)
    // item 4284
    return edge
}

function makeLineFormat(format) {
    // item 12846
    if (format.lineColor === "none") {
        // item 12849
        format = {
            lineColor : Theme.get("identifier")
        }
    }
    // item 12850
    return format
}

function makeLoopBeginPoints(w, h) {
    // item 6087
    var x = 0
    var y = 0
    var notch = Q_PADDING;
    
    var x0 = x - w;
    var x1 = x0 + notch;
    var x3 = x + w;
    var x2 = x3 - notch;
    
    var top = y - h;
    var bottom = y + h;
    
    var middle = top + notch;
    // item 6088
    return [
     x0, bottom,
     x0, middle,
     x1, top,
     x2, top,
     x3, middle,
     x3, bottom
    ]
}

function makeLoopEndPoints(w, h) {
    // item 6094
    var x = 0
    var y = 0
    var notch = Q_PADDING;
    
    var x0 = x - w;
    var x1 = x0 + notch;
    var x3 = x + w;
    var x2 = x3 - notch;
    
    var top = y - h;
    var bottom = y + h;
    var middle = bottom - notch;
    // item 6095
    return [
     x0, top,
     x3, top,
     x3, middle,
     x2, bottom,
     x1, bottom,
     x0, middle
    ]
}

function makePausePoints(w, h) {
    // item 13330
    var x = 0
    var y = 0
    // item 13328
    var x0 = x - w;
    var top = y - h;
    var width = w * 2;
    var height = h * 2;
    var bottom = top + height;
    
    var x3 = x0 + width;
    var x1 = x0 + Q_PADDING;
    var x2 = x3 - Q_PADDING;
    // item 13329
    return [
     x0, top,
     x3, top,
     x2, bottom,
     x1, bottom
    ]
}

function makePointToItem(address, branch, menu) {
    var redirect, targetId, text
    // item 8693
    targetId = branch.node.itemId
    // item 8691
    redirect = function() {
        return redirectAddress(address, targetId)
    }
    // item 8695
    text = tr("MES_POINT_TO") + " " +
    	branch.node.text
    // item 8694
    pushMenuItem(
        menu,
        text,
        null,
        brutal(redirect, null)
    )
}

function makeQuestionPoints(w, h) {
    var bottom, result, top, x, x0, x1, x2, x3, y
    // item 2721
    x = 0
    y = 0
    // item 2718
    x0 = x - w
    x1 = x0 + Q_PADDING
    x3 = x + w
    x2 = x3 - Q_PADDING
    top = y - h
    bottom = y + h
    // item 2719
    result = [
    	x0, y,
    	x1, top,
    	x2, top,
    	x3, y,
    	x2, bottom,
    	x1, bottom
    ]
    // item 2720
    return result
}

function makeRandomColor() {
    var b, g, r, rb, rg, rs
    // item 3388
    r = random(200, 256)
    g = random(200, 256)
    b = random(200, 256)
    // item 3401
    rs = hexByteToString(r)
    rg = hexByteToString(g)
    rb = hexByteToString(b)
    // item 3402
    return "#" + rs + rg + rb
}

function makeRightEdge(visuals, left, right, finalTarget) {
    var edge
    // item 4275
    edge = createEdge(
        visuals,
        left,
        right,
        false
    )
    // item 4277
    edge.role = "right"
    edge.finalTarget = finalTarget
    edge.source = left
    edge.target = right
    // item 4298
    left.targets.push(edge)
    // item 4299
    right.sources.push(edge)
    // item 4276
    return edge
}

function makeRightLoopEdge(visuals, left, right, finalTarget) {
    var edge
    // item 7206
    edge = createEdge(
        visuals,
        left,
        right,
        false
    )
    // item 7208
    edge.role = "right-loop"
    edge.finalTarget = finalTarget
    edge.source = left
    edge.target = right
    // item 7209
    left.targets.push(edge)
    // item 7210
    right.sources.push(edge)
    // item 7212
    finalTarget.rightEdge = edge
    // item 7207
    return edge
}

function makeSelectPoints(w, h) {
    // item 6386
    var x = 0
    var y = 0
    var shift = Q_PADDING / 2
    var x0 = x - w;
    var x1 = x0 + shift;
    var x3 = x + w;
    var x2 = x3 - shift;
    var top = y - h;
    var bottom = y + h;
    // item 6387
    return [
    	x0, bottom,
    	x1, top,
    	x3, top,
    	x2, bottom
    ]
}

function makeTokenFromChars(self, type) {
    var token
    // item 1666
    token = new Token(
        type
    )
    // item 1667
    token.text = Utils.arrayToString(
        self.chars
    )
    // item 1668
    return token
}

function makeUpEdge(visuals, head, tail, finalTarget) {
    var edge
    // item 7191
    edge = createEdge(
        visuals,
        head,
        tail,
        true
    )
    // item 7192
    edge.finalTarget = finalTarget
    edge.source = tail
    edge.target = head
    // item 7193
    tail.targets.push(edge)
    // item 7194
    head.sources.push(edge)
    // item 7190
    edge.role = "up"
    // item 7195
    finalTarget.upEdge = edge
    // item 7185
    return edge
}

function markArrow(loop) {
    var arrow, bottom, downEdge, leftBottom, rightEdge, start, top, upEdge
    // item 7546
    arrow = loop.right
    // item 7548
    top = arrow.tail
    // item 7550
    upEdge = top.down
    // item 7549
    top.arrow = upEdge
    // item 7547
    arrow.arrow = upEdge
    arrow.finalTarget = upEdge.finalTarget
    // item 7551
    arrow.links = upEdge.links
    // item 7552
    upEdge.arrow = upEdge
    // item 7553
    bottom = upEdge.tail
    // item 7554
    if (isLeftUp(bottom)) {
        // item 7557
        bottom.arrow = upEdge
        // item 7558
        rightEdge = bottom.left
        // item 7577
        leftBottom = rightEdge.head
        // item 7579
        rightEdge.arrow = upEdge
        // item 7559
        if (isRightUp(leftBottom)) {
            // item 7576
            leftBottom.arrow = upEdge
            // item 7578
            downEdge = leftBottom.up
            start = downEdge.head
            // item 7580
            downEdge.arrow = upEdge
            // item 7581
            if (start.type == "junction") {
                
            } else {
                // item 7584
                start.arrow = upEdge
            }
        }
    }
}

function markFloor(self, address) {
    var bottom, floor, next, sub
    // item 8648
    sub = self.sub
    // item 8641
    bottom = goDown(address)
    // item 8642
    next = getNextBranch(
        address.branch
    )
    // item 8643
    floor = bottom.right
    // item 8649
    if (floor) {
        // item 8644
        floor.finalTarget = next.node
        // item 8645
        floor.outer = sub
        floor.noBranch = address.itemId
        // item 8647
        addEdgeSubRecord(
            sub.outer,
            floor
        )
    } else {
        // item 8653
        bottom.finalTarget = next.node
        bottom.noBranch = address.itemId
        // item 8652
        addNodeSubRecord(
            sub.outer,
            bottom
        )
    }
}

function markInnerSide(self, lower) {
    var crawler2, leftCase, leftJun, n2, question, result, upper
    // item 7485
    upper = lower
    while (true) {
        // item 7488
        upper = getUp(upper)
        // item 7487
        if (upper.left) {
            break;
        }
    }
    // item 7481
    n2 = getDown(upper)
    // item 7479
    crawler2 = createInner(
        "down",
        self.sub
    )
    // item 7443
    if (n2.type == "case") {
        // item 7482
        crawl(crawler2, n2.down)
        // item 7455
        leftJun = getLeft(upper)
        leftCase = getDown(leftJun)
        // item 7457
        leftJun.zoned = true
        // item 7456
        result = leftCase.down
    } else {
        // item 7480
        crawl(crawler2, upper.down)
        // item 7724
        if (upper.up) {
            // item 7723
            upper.left.inner = self.sub
        }
        // item 7452
        question = goLeft(upper)
        question.zoned = true
        // item 7453
        result = question.down
    }
    // item 7454
    return result
}

function markOtherCasesToStay(node) {
    var below, toKeep
    // item 6857
    toKeep = {}
    // item 68550001
    var _ind6855 = 0;
    var _col6855 = node.select.cases;
    var _len6855 = _col6855.length;
    while (true) {
        // item 68550002
        if (_ind6855 < _len6855) {
            
        } else {
            break;
        }
        // item 68550004
        var caseNode = _col6855[_ind6855];
        // item 6859
        if (caseNode == node) {
            
        } else {
            // item 6868
            below = caseNode.next[0]
            // item 6858
            markToStay(
                caseNode,
                below.itemId,
                toKeep
            )
        }
        // item 68550003
        _ind6855++;
    }
    // item 6862
    return toKeep
}

function markToDelete(visited, prev, startItemId, edits) {
    var addDeletion, context, items
    // item 6827
    items = module.storage.items
    // item 7737
    context = {
        items : items,
        deleteList : [],
        visited : visited,
        edits : edits
    }
    // item 6824
    traverseItemToDelete(
        context,
        prev,
        startItemId
    )
    // item 6825
    addDeletion = function(id) {
        deleteItem(edits, id)
    }
    // item 6826
    context.deleteList.forEach(
        addDeletion
    )
}

function markToStay(prev, startItemId, toKeep) {
    // item 6815
    traverseItem(
        module.storage.items,
        prev,
        startItemId,
        toKeep
    )
}

function maxHeight(height, node) {
    // item 6647
    return Math.max(height, node.h)
}

function measureDiagram() {
    var border, bottom, left, right, top, visuals
    // item 5318
    left = Number.MAX_VALUE
    right = -Number.MAX_VALUE
    top = Number.MAX_VALUE
    bottom = -Number.MAX_VALUE
    // item 1114
    border = Config.METRE
    visuals = module.visuals
    // item 53210001
    var _ind5321 = 0;
    var _col5321 = visuals.nodes.rows;
    var _keys5321 = Object.keys(_col5321); 
    var _len5321 = _keys5321.length;
    while (true) {
        // item 53210002
        if (_ind5321 < _len5321) {
            
        } else {
            break;
        }
        // item 53210004
        var id = _keys5321[_ind5321]; var node = _col5321[id];
        // item 5317
        if (isDrawableNode(node)) {
            // item 5324
            left = Math.min(left, node.box.left)
            top = Math.min(top, node.box.top)
            right = Math.max(right, node.box.right)
            bottom = Math.max(bottom, node.box.bottom)
        }
        // item 53210003
        _ind5321++;
    }
    // item 1115
    return new Utils.Box(
        left - border,
        top - border,
        right + border,
        bottom + border
    )
}

function merge(from, to) {
    // item 8014
    if (from) {
        // item 80170001
        var _ind8017 = 0;
        var _col8017 = from;
        var _keys8017 = Object.keys(_col8017); 
        var _len8017 = _keys8017.length;
        while (true) {
            // item 80170002
            if (_ind8017 < _len8017) {
                
            } else {
                break;
            }
            // item 80170004
            var key = _keys8017[_ind8017]; var value = _col8017[key];
            // item 8019
            to[key] = value
            // item 80170003
            _ind8017++;
        }
    }
}

function mergeOps(self) {
    var text, token
    var _sw110950000_ = 0;
    // item 110950000
    _sw110950000_ = self.tokens.length;
    // item 110950001
    if (_sw110950000_ === 0) {
        
    } else {
        // item 110950002
        if (_sw110950000_ === 1) {
            // item 11105
            self.next.onToken(
                self.tokens[0]
            )
        } else {
            // item 110950003
            if (_sw110950000_ === 2) {
                // item 11110
                text = self.tokens[0].text +
                	self.tokens[1].text
            } else {
                // item 110950004
                if (_sw110950000_ === 3) {
                    
                } else {
                    // item 110950005
                    throw "Unexpected switch value: " + _sw110950000_;
                }
                // item 11108
                text = self.tokens[0].text +
                	self.tokens[1].text +
                	self.tokens[2].text
            }
            // item 11111
            token = new Token("operator")
            token.text = text
            // item 11112
            self.next.onToken(token)
        }
        // item 11107
        self.tokens = []
    }
}

function mild(action, node) {
    // item 7965
    return function() {
    	var edits = action(node)
    	editAndSave(edits)
    }
}

function mouseClick(x, y) {
    var prim
    // item 4634
    addTrace("mouseClick", [x, y])
    // item 4618
    prim = findVisualItem(
        x,
        y
    )
    // item 4619
    if (prim) {
        // item 4633
        addTrace("found vi", [prim.id])
        // item 4635
        if (prim.id) {
            // item 6616
            printPrim(prim)
            // item 9818
            if (isSelected(prim.id)) {
                
            } else {
                // item 4649
                deselectAll()
                // item 4623
                selectPrim(prim.id)
                // item 5189
                if (prim.type == Const.TEXT) {
                    // item 5191
                    startEditText(prim.id)
                } else {
                    // item 5737
                    showLianaSockets(prim)
                }
            }
        }
    } else {
        // item 7585
        addTrace("found nothing", [])
        // item 4622
        deselectAll()
    }
    // item 4544
    redrawCanvas()
    // item 1129
    return {
    	mustRedraw: true
    }
}

function moveBranchIdsLeft(branchId) {
    var branches, edits, newId
    // item 9028
    edits = []
    // item 9021
    branches = module.visuals.branches
    // item 90220001
    var _ind9022 = 0;
    var _col9022 = branches;
    var _len9022 = _col9022.length;
    while (true) {
        // item 90220002
        if (_ind9022 < _len9022) {
            
        } else {
            break;
        }
        // item 90220004
        var branch = _col9022[_ind9022];
        // item 9025
        if (branch.node.branchId > branchId) {
            // item 9030
            newId = branch.node.branchId - 1
            // item 9024
            updateItem(
                edits,
                branch.node.itemId,
                {branchId: newId}
            )
        }
        // item 90220003
        _ind9022++;
    }
    // item 9029
    return edits
}

function moveBranchIdsRight(branchId) {
    var branches, edits, newId
    // item 9000
    edits = []
    // item 8992
    branches = module.visuals.branches
    // item 89930001
    var _ind8993 = 0;
    var _col8993 = branches;
    var _len8993 = _col8993.length;
    while (true) {
        // item 89930002
        if (_ind8993 < _len8993) {
            
        } else {
            break;
        }
        // item 89930004
        var branch = _col8993[_ind8993];
        // item 8997
        if (branch.node.branchId >= branchId) {
            // item 9002
            newId = branch.node.branchId + 1
            // item 8995
            updateItem(
                edits,
                branch.node.itemId,
                {branchId: newId}
            )
        }
        // item 89930003
        _ind8993++;
    }
    // item 9001
    return edits
}

function moveEndUp(visuals) {
    var below, distance, lastBranch, levels
    // item 8549
    if (visuals.end) {
        // item 8552
        lastBranch = visuals.branches[
        	visuals.branches.length - 1
        ]
        // item 8554
        below = getDown(lastBranch.node)
        // item 8555
        distance = below.level.coord - 
        	lastBranch.node.level.coord -
        	below.h -
        	lastBranch.node.h -
        	Config.METRE
        // item 8556
        if (distance > 0) {
            // item 8553
            levels = collectLevels(
                visuals,
                lastBranch
            )
            // item 85570001
            var _ind8557 = 0;
            var _col8557 = levels;
            var _len8557 = _col8557.length;
            while (true) {
                // item 85570002
                if (_ind8557 < _len8557) {
                    
                } else {
                    break;
                }
                // item 85570004
                var level = _col8557[_ind8557];
                // item 8559
                level.coord -= distance
                // item 85570003
                _ind8557++;
            }
        }
    }
}

function moveHandle(id, handleType, dx, dy, x, y) {
    
}

function nextBranchName() {
    var max, number
    // item 8229
    max = 0
    // item 82090001
    var _ind8209 = 0;
    var _col8209 = module.visuals.branches;
    var _len8209 = _col8209.length;
    while (true) {
        // item 82090002
        if (_ind8209 < _len8209) {
            
        } else {
            break;
        }
        // item 82090004
        var branch = _col8209[_ind8209];
        // item 8230
        number = getNumberPart(branch.node.text)
        // item 8227
        max = Math.max(max, number)
        // item 82090003
        _ind8209++;
    }
    // item 8191
    return branchLabel() + (max + 1)
}

function nextSymbol(state) {
    // item 11181
    state.index++
    state.current = state.tokens[state.index]
}

function no() {
    // item 10881
    return translateLabel("no", "DIA_NO")
}

function noBreakKeyword(item) {
    // item 11482
    if (item.type == "keyword") {
        // item 11486
        if ((((((item.text == "async") || (item.text == "await")) || (item.text == "function")) || (item.text == "else")) || (item.text == "catch")) || (item.text == "finally")) {
            // item 11493
            return true
        } else {
            // item 11494
            return false
        }
    } else {
        // item 11485
        return false
    }
}

function noWidth(render) {
    // item 2702
    return render.measureTextWidth(no())
}

function nodeFromItem(visuals, item) {
    var node, text
    // item 3692
    if (item.type == "end") {
        // item 3695
        text = end()
    } else {
        // item 3696
        text = item.text || ""
    }
    // item 3015
    node = createNode(
        visuals,
        item.id,
        item.type,
        text,
        item.id
    )
    // item 8429
    setNotNull(item, node, "flag1")
    setNotNull(item, node, "branchId")
    setNotNull(item, node, "text2")
    // item 7968
    return node
}

function onChar(self, op, cat, code) {
    var handler
    // item 10343
    handler = self.handlers[self.top]
    // item 10344
    handler(self, op, cat, code)
    // item 10686
    if (op == "eol") {
        // item 10689
        self.next.eol()
    } else {
        // item 11133
        if (op == "finish") {
            // item 11136
            self.next.finish()
        }
    }
}

function onLexChar(self, op, cat, code, pos) {
    var handler
    // item 12218
    handler = self.handlers[self.top]
    // item 12219
    handler(self, op, cat, code, pos)
}

function onSearchChange() {
    var state
    // item 12095
    var fun = module.callbacks.onSearchChange
    // item 12091
    if (fun) {
        // item 12090
        state = getSearchState()
        // item 12094
        fun(state)
    }
}

function oneLine(text) {
    // item 12514
    return text.split("\n").join(" ")
}

function paste(x, y) {
    var type
    // item 9442
    type = getClipboardType()
    // item 9443
    showPasteSockets(type)
}

function pasteBlock(socket, payload) {
    var create, edits, firstId
    // item 9400
    edits = []
    // item 9393
    firstId = replaceIds(
        payload.start,
        payload.items,
        socket.target
    )
    // item 9399
    create = function(item) {
        createPastedItem(edits, item)
    }
    // item 9402
    payload.items.forEach(create)
    // item 9403
    redirectUpperItems(
        edits,
        socket.links,
        firstId
    )
    // item 9401
    return edits
}

function pasteBranch(socket, block) {
    var branch, branchId, create, edits, items, newId, oldToNew, start, targetId, targets
    // item 9628
    items = block.items
    start = block.start
    targets = block.targets
    // item 9601
    branchId = getSocketBranchId(socket)
    // item 9644
    targetId = getBranchItemId(
        branchId
    )
    // item 9602
    edits = moveBranchIdsRight(
        branchId
    )
    // item 96860001
    var _ind9686 = 0;
    var _col9686 = items;
    var _len9686 = _col9686.length;
    while (true) {
        // item 96860002
        if (_ind9686 < _len9686) {
            
        } else {
            break;
        }
        // item 96860004
        var item = _col9686[_ind9686];
        // item 9688
        if (item.id == start) {
            // item 9691
            item.branchId = branchId
            break;
        }
        // item 96860003
        _ind9686++;
    }
    // item 9625
    oldToNew = generateNewIds(
        items
    )
    // item 96580001
    var _ind9658 = 0;
    var _col9658 = targets;
    var _keys9658 = Object.keys(_col9658); 
    var _len9658 = _keys9658.length;
    while (true) {
        // item 96580002
        if (_ind9658 < _len9658) {
            
        } else {
            break;
        }
        // item 96580004
        var oldId = _keys9658[_ind9658]; var name = _col9658[oldId];
        // item 9660
        branch = getBranchByName(name)
        // item 9661
        if (branch) {
            // item 9664
            newId = branch.node.itemId
        } else {
            // item 9665
            newId = targetId
        }
        // item 9666
        oldToNew[oldId] = newId
        // item 96580003
        _ind9658++;
    }
    // item 9627
    replaceTargets(
        items,
        oldToNew
    )
    // item 9629
    create = function(item) {
        createPastedItem(edits, item)
    }
    // item 9630
    items.forEach(create)
    // item 9603
    return edits
}

function pasteInSocket(socket) {
    var ctype, edits, payload
    var _sw93560000_ = 0;
    // item 9322
    edits = []
    // item 9324
    payload = getClipboardCore()
    ctype = getClipboardType()
    // item 9325
    if (payload) {
        // item 93560000
        _sw93560000_ = socket.type;
        // item 93560001
        if (_sw93560000_ === "block") {
            // item 9528
            if (socket.type == ctype) {
                // item 9363
                edits = pasteBlock(
                    socket,
                    payload
                )
            }
        } else {
            // item 93560002
            if (_sw93560000_ === "case") {
                // item 9530
                if (ctype == "case") {
                    // item 9514
                    edits = caseInsertCore(
                        socket.node,
                        payload.items[0]
                    )
                }
            } else {
                // item 93560003
                if (_sw93560000_ === "first-case") {
                    // item 9535
                    if (ctype == "case") {
                        // item 9515
                        edits = firstCaseInsertCore(
                            socket.node,
                            payload.items[0]
                        )
                    }
                } else {
                    // item 93560004
                    if ((_sw93560000_ === "branch") && (socket.type == ctype)) {
                        // item 9568
                        edits = pasteBranch(
                            socket,
                            payload
                        )
                    }
                }
            }
        }
    }
    // item 9323
    return edits
}

function pasteText(node) {
    var text
    // item 9734
    text = getClipboard("text")
    // item 9735
    if (text) {
        // item 9742
        setNodeText(
            node.id,
            text
        )
    }
}

function performChange(edit, isUndo) {
    var item, items, old, storage, target
    var _sw29100000_ = 0;
    var _sw29310000_ = 0;
    // item 2928
    storage = module.storage
    items = storage.items
    // item 29100000
    _sw29100000_ = edit.table;
    // item 29100001
    if (_sw29100000_ === "diagrams") {
        // item 12949
        if (isUndo) {
            // item 12951
            Utils.copyFields(
                edit.undo,
                storage
            )
        } else {
            // item 12948
            Utils.copyFields(
                edit.fields,
                storage
            )
        }
    } else {
        // item 29100002
        if (_sw29100000_ === "items") {
            
        } else {
            // item 29100003
            throw "Unexpected switch value: " + _sw29100000_;
        }
        // item 29310000
        _sw29310000_ = edit.type;
        // item 29310001
        if (_sw29310000_ === "insert") {
            // item 2938
            if (isUndo) {
                // item 2951
                delete items[edit.id]
            } else {
                // item 2949
                item = Utils.copyObject(
                    edit.fields
                )
                // item 4568
                item.id = edit.id
                // item 2950
                items[edit.id] = item
            }
        } else {
            // item 29310002
            if (_sw29310000_ === "delete") {
                // item 2940
                if (isUndo) {
                    // item 2952
                    item = Utils.copyObject(
                        edit.undo
                    )
                    // item 4569
                    item.id = edit.id
                    // item 2953
                    items[edit.id] = item
                } else {
                    // item 2954
                    delete items[edit.id]
                }
            } else {
                // item 29310003
                if (_sw29310000_ === "update") {
                    
                } else {
                    // item 29310004
                    throw "Unexpected switch value: " + _sw29310000_;
                }
                // item 2929
                old = items[edit.id]
                target = Utils.copyObject(old)
                items[edit.id] = target
                // item 2942
                if (isUndo) {
                    // item 2948
                    Utils.copyFields(
                        edit.undo,
                        target
                    )
                } else {
                    // item 2930
                    Utils.copyFields(
                        edit.fields,
                        target
                    )
                }
            }
        }
    }
}

function performLocalChange(edits, isUndo) {
    var count, edit, i
    // item 2897
    count = edits.length
    // item 2894
    if (isUndo) {
        // item 28980001
        i = count - 1;
        while (true) {
            // item 28980002
            if (i >= 0) {
                
            } else {
                break;
            }
            // item 2904
            edit = edits[i]
            // item 2944
            performChange(
                edit,
                isUndo
            )
            // item 28980003
            i--;
        }
    } else {
        // item 28910001
        i = 0;
        while (true) {
            // item 28910002
            if (i < count) {
                
            } else {
                break;
            }
            // item 2902
            edit = edits[i]
            // item 2893
            performChange(
                edit,
                isUndo
            )
            // item 28910003
            i++;
        }
    }
}

function performRedo() {
    var step, undo
    // item 498
    undo = module.undo
    // item 495
    if (undo.next >= undo.steps.length) {
        
    } else {
        // item 11852
        deselectAll()
        // item 501
        step = undo.steps[undo.next]
        // item 505
        addTrace("redo", step.info)
        // item 5148
        editAndSaveCore(
            step.commands,
            false
        )
        // item 499
        undo.next++
    }
}

function performSearch() {
    var input, parsed, search, text, tokens
    // item 12128
    search = module.search
    input = search.input
    // item 12129
    search.occurences = []
    // item 12423
    if (input.whole) {
        // item 12426
        parsed = lexSearch(input.find)
        // item 12427
        if (input.sensitive) {
            // item 12430
            tokens = parsed.tokens
        } else {
            // item 12431
            tokens = parsed.tokensLow
        }
        // item 12441
        if (tokens.length == 0) {
            
        } else {
            // item 124210001
            var _ind12421 = 0;
            var _col12421 = search.items;
            var _len12421 = _col12421.length;
            while (true) {
                // item 124210002
                if (_ind12421 < _len12421) {
                    
                } else {
                    break;
                }
                // item 124210004
                var item = _col12421[_ind12421];
                // item 12432
                scanItemWhole(
                    item,
                    tokens
                )
                // item 124210003
                _ind12421++;
            }
        }
    } else {
        // item 12435
        if (input.sensitive) {
            // item 12438
            text = input.find
        } else {
            // item 12439
            text = input.find.toLowerCase()
        }
        // item 12443
        if (text.length == 0) {
            
        } else {
            // item 124330001
            var _ind12433 = 0;
            var _col12433 = search.items;
            var _len12433 = _col12433.length;
            while (true) {
                // item 124330002
                if (_ind12433 < _len12433) {
                    
                } else {
                    break;
                }
                // item 124330004
                var item = _col12433[_ind12433];
                // item 12440
                scanItem(
                    item,
                    text
                )
                // item 124330003
                _ind12433++;
            }
        }
    }
    // item 12134
    search.output.current = -1
}

function performUndo() {
    var step, undo
    // item 483
    undo = module.undo
    // item 480
    if (undo.next > 0) {
        // item 11851
        deselectAll()
        // item 484
        undo.next--
        // item 486
        step = undo.steps[undo.next]
        // item 490
        addTrace("undo", step.info)
        // item 5147
        editAndSaveCore(
            step.commands,
            true
        )
    }
}

function persistChange(pers, edit, isUndo) {
    var fields, item
    var _sw27760000_ = 0;
    var _sw27810000_ = 0;
    // item 27760000
    _sw27760000_ = edit.table;
    // item 27760001
    if (_sw27760000_ === "diagrams") {
        // item 2829
        if (isUndo) {
            // item 2832
            fields = edit.undo
        } else {
            // item 2833
            fields = edit.fields
        }
        // item 2828
        pers.updateDiagram(fields)
    } else {
        // item 27810000
        _sw27810000_ = edit.type;
        // item 27810001
        if (_sw27810000_ === "insert") {
            // item 2806
            if (isUndo) {
                // item 2810
                pers.remove(edit.id)
            } else {
                // item 2809
                item = edit.fields
                item.id = edit.id
                // item 2811
                pers.add(item)
            }
        } else {
            // item 27810002
            if (_sw27810000_ === "update") {
                // item 2812
                if (isUndo) {
                    // item 2816
                    fields = edit.undo
                } else {
                    // item 2815
                    fields = edit.fields
                }
                // item 2817
                fields.id = edit.id
                // item 2818
                pers.update(fields)
            } else {
                // item 27810003
                if (_sw27810000_ === "delete") {
                    
                } else {
                    // item 27810004
                    throw "Unexpected switch value: " + _sw27810000_;
                }
                // item 2819
                if (isUndo) {
                    // item 2822
                    item = edit.undo
                    item.id = edit.id
                    // item 2824
                    pers.add(item)
                } else {
                    // item 2823
                    pers.remove(edit.id)
                }
            }
        }
    }
}

function persistChanges(edits, isUndo) {
    var pers
    // item 2770
    pers = module.persistence
    // item 27670001
    var _ind2767 = 0;
    var _col2767 = edits;
    var _len2767 = _col2767.length;
    while (true) {
        // item 27670002
        if (_ind2767 < _len2767) {
            
        } else {
            break;
        }
        // item 27670004
        var edit = _col2767[_ind2767];
        // item 2769
        persistChange(
            pers,
            edit,
            isUndo
        )
        // item 27670003
        _ind2767++;
    }
    // item 2766
    pers.persist()
}

function placeToken(self, token) {
    var token2, width, x2
    // item 2174
    token.color = getTokenColor(
        token,
        self.source
    )
    // item 2171
    width = self.render.measureTextWidth(
        token.text
    )
    // item 2176
    x2 = self.x + width
    // item 2184
    if (x2 > self.maxLength) {
        // item 2200
        if (self.x == 0) {
            // item 2216
            if (token.text.length == 1) {
                // item 2199
                placeTokenCore(
                    self,
                    token,
                    width
                )
            } else {
                // item 2237
                token2 = splitToken(
                    self,
                    token
                )
                // item 2238
                placeToken(
                    self,
                    token2
                )
            }
        } else {
            // item 2206
            addLine(self)
            // item 2205
            if (width > self.maxLength) {
                // item 2216
                if (token.text.length == 1) {
                    // item 2199
                    placeTokenCore(
                        self,
                        token,
                        width
                    )
                } else {
                    // item 2237
                    token2 = splitToken(
                        self,
                        token
                    )
                    // item 2238
                    placeToken(
                        self,
                        token2
                    )
                }
            } else {
                // item 2199
                placeTokenCore(
                    self,
                    token,
                    width
                )
            }
        }
    } else {
        // item 2199
        placeTokenCore(
            self,
            token,
            width
        )
    }
}

function placeTokenCore(self, token, width) {
    // item 12717
    token.x = Math.floor(self.x)
    token.y = Math.floor(self.y)
    // item 2196
    token.x = self.x
    token.y = self.y
    // item 2197
    self.x += width
    self.width = self.x
    // item 2198
    self.tokens.push(token)
}

function planNextSteps(visuals, stack, node) {
    var next1, next2
    var _sw64850000_ = 0;
    // item 64850000
    _sw64850000_ = node.type;
    // item 64850001
    if (_sw64850000_ === "select") {
        // item 6518
        layoutSelect(
            visuals,
            stack,
            node
        )
    } else {
        // item 64850002
        if (_sw64850000_ === "question") {
            // item 6500
            next1 = node.next[0]
            next2 = node.next[1]
            // item 3626
            planRightStep(
                stack,
                node,
                next2
            )
            // item 6492
            planStep(
                stack,
                node,
                next1
            )
        } else {
            // item 64850003
            if (_sw64850000_ === "arrow-loop") {
                // item 7061
                next1 = buildArrowUp(
                    visuals,
                    node
                )
                // item 7062
                planNextSteps(
                    visuals,
                    stack,
                    next1
                )
            } else {
                // item 6496
                if (node.next.length == 0) {
                    
                } else {
                    // item 6502
                    next1 = node.next[0]
                    // item 3628
                    planStep(
                        stack,
                        node,
                        next1
                    )
                }
            }
        }
    }
}

function planRightStep(stack, node1, node2) {
    var step
    // item 7070
    step = planStep(
        stack,
        node1,
        node2
    )
    // item 7071
    step.down = false
    // item 7148
    return step
}

function planSpace(self, node) {
    // item 7465
    self.plan.push(node)
}

function planStep(stack, node1, node2) {
    var step
    // item 3537
    step = new TraverseStep(
        node1,
        node2
    )
    // item 7160
    if (isBackLink(node1, node2)) {
        // item 7163
        step.back = true
    }
    // item 3538
    stack.push(step)
    // item 7064
    return step
}

function popFromSkewer(edits, node) {
    var dstId, edgeUp, item, items
    // item 4964
    items = module.storage.items
    // item 4974
    item = items[node.itemId]
    dstId = item.one
    // item 4975
    edgeUp = node.up
    // item 4984
    redirectUpperItems(
        edits,
        edgeUp.links,
        dstId
    )
    // item 4961
    deleteItem(
        edits,
        node.itemId
    )
}

function positionLevels(visuals) {
    var distance, down, h, jun, leftHeight, lowest, max
    // item 41550001
    var _ind4155 = 0;
    var _col4155 = visuals.nodes.rows;
    var _keys4155 = Object.keys(_col4155); 
    var _len4155 = _keys4155.length;
    while (true) {
        // item 41550002
        if (_ind4155 < _len4155) {
            
        } else {
            break;
        }
        // item 41550004
        var id = _keys4155[_ind4155]; var node = _col4155[id];
        // item 4159
        if (node.down) {
            // item 4163
            down = getDown(node)
            leftHeight = getLeftHeight(node)
            // item 4259
            if (leftHeight == 0) {
                // item 4262
                h = node.h
            } else {
                // item 4263
                h = leftHeight
            }
            // item 4164
            distance = h + down.h +
            	Config.METRE
            // item 4162
            linkLevels(
                visuals,
                down.level,
                node.level,
                distance
            )
        }
        // item 41550003
        _ind4155++;
    }
    // item 8560
    lowest = getLowestLevel(visuals)
    // item 4158
    calculateSkewerPos(
        visuals.levels,
        visuals.levelLinks,
        lowest,
        0
    )
    // item 4169
    max = 0
    // item 41670001
    var _ind4167 = 0;
    var _col4167 = visuals.levels.rows;
    var _keys4167 = Object.keys(_col4167); 
    var _len4167 = _keys4167.length;
    while (true) {
        // item 41670002
        if (_ind4167 < _len4167) {
            
        } else {
            break;
        }
        // item 41670004
        var id = _keys4167[_ind4167]; var level = _col4167[id];
        // item 4170
        max = Math.max(
            max,
            level.coord
        )
        // item 41670003
        _ind4167++;
    }
    // item 41710001
    var _ind4171 = 0;
    var _col4171 = visuals.levels.rows;
    var _keys4171 = Object.keys(_col4171); 
    var _len4171 = _keys4171.length;
    while (true) {
        // item 41710002
        if (_ind4171 < _len4171) {
            
        } else {
            break;
        }
        // item 41710004
        var id = _keys4171[_ind4171]; var level = _col4171[id];
        // item 4173
        level.coord = max - level.coord
        // item 41710003
        _ind4171++;
    }
    // item 66540001
    var _ind6654 = 0;
    var _col6654 = visuals.nodes.rows;
    var _keys6654 = Object.keys(_col6654); 
    var _len6654 = _keys6654.length;
    while (true) {
        // item 66540002
        if (_ind6654 < _len6654) {
            
        } else {
            break;
        }
        // item 66540004
        var id = _keys6654[_ind6654]; var node = _col6654[id];
        // item 6656
        if ((node.type == "case") || ((node.type == "branch") && (node.up))) {
            // item 6659
            jun = getUp(node)
            // item 6660
            node.level.coord = jun.level.coord +
              Config.METRE + node.h
        }
        // item 66540003
        _ind6654++;
    }
}

function positionSkewers(visuals) {
    var left
    // item 40200001
    var _ind4020 = 0;
    var _col4020 = visuals.skewers.rows;
    var _keys4020 = Object.keys(_col4020); 
    var _len4020 = _keys4020.length;
    while (true) {
        // item 40200002
        if (_ind4020 < _len4020) {
            
        } else {
            break;
        }
        // item 40200004
        var id = _keys4020[_ind4020]; var skewer = _col4020[id];
        // item 4022
        findLeftLinks(
            visuals,
            skewer
        )
        // item 40200003
        _ind4020++;
    }
    // item 8442
    if (visuals.branches.length == 1) {
        // item 4139
        calculateSkewerPos(
            visuals.skewers,
            visuals.skewerLinks,
            visuals.header.skewer,
            0
        )
    } else {
        // item 8446
        left = getSilCorner(visuals)
        // item 8445
        calculateSkewerPos(
            visuals.skewers,
            visuals.skewerLinks,
            left.skewer,
            0
        )
    }
}

function precacheEdgesLinks(visuals) {
    // item 43390001
    var _ind4339 = 0;
    var _col4339 = visuals.edges.rows;
    var _keys4339 = Object.keys(_col4339); 
    var _len4339 = _keys4339.length;
    while (true) {
        // item 43390002
        if (_ind4339 < _len4339) {
            
        } else {
            break;
        }
        // item 43390004
        var id = _keys4339[_ind4339]; var edge = _col4339[id];
        // item 4341
        findEdgeLinks(
            visuals,
            edge,
            edge
        )
        // item 43390003
        _ind4339++;
    }
}

function prepend(item, array) {
    var copy
    // item 10715
    copy = array.slice()
    // item 10716
    copy.unshift(item)
    // item 10717
    return copy
}

function prettify(tokens, type) {
    var block2, rawFlower, root, rootBlock, state
    // item 11624
    root = createBlock()
    // item 11622
    state = createParsingState(
        tokens
    )
    // item 11623
    readBlock(state, root, null, true)
    // item 11625
    rootBlock = root.statement.items[0]
    // item 11626
    if (rootBlock) {
        // item 11630
        block2 = addSpaces(rootBlock)
        // item 11631
        rawFlower = createRawFlower()
        // item 11885
        if ((type == "loopbegin") || (type == "loopend")) {
            // item 11888
            printBlockLine(
                block2,
                0,
                rawFlower
            )
        } else {
            // item 11693
            printRootBlock(
                block2,
                rawFlower
            )
        }
        // item 11633
        return rawFlower.tokens
    } else {
        // item 11629
        return []
    }
}

function printBlock(block, depth, output) {
    var available
    // item 11523
    if (block.seq) {
        // item 115290001
        var _ind11529 = 0;
        var _col11529 = block.statements;
        var _len11529 = _col11529.length;
        while (true) {
            // item 115290002
            if (_ind11529 < _len11529) {
                
            } else {
                break;
            }
            // item 115290004
            var statement = _col11529[_ind11529];
            // item 11532
            startIndented(
                output,
                depth + 1
            )
            // item 11531
            printStatement(
            	statement,
            	depth + 1,
            	output
            )
            // item 115290003
            _ind11529++;
        }
        // item 11533
        startIndented(
            output,
            depth
        )
    } else {
        // item 11522
        available = output.max - output.current
        // item 11526
        if (block.length > available) {
            // item 115290001
            var _ind11529 = 0;
            var _col11529 = block.statements;
            var _len11529 = _col11529.length;
            while (true) {
                // item 115290002
                if (_ind11529 < _len11529) {
                    
                } else {
                    break;
                }
                // item 115290004
                var statement = _col11529[_ind11529];
                // item 11532
                startIndented(
                    output,
                    depth + 1
                )
                // item 11531
                printStatement(
                	statement,
                	depth + 1,
                	output
                )
                // item 115290003
                _ind11529++;
            }
            // item 11533
            startIndented(
                output,
                depth
            )
        } else {
            // item 11884
            printBlockLine(
                block,
                depth,
                output
            )
        }
    }
}

function printBlockLine(block, depth, output) {
    var first
    // item 11877
    first = true
    // item 118750001
    var _ind11875 = 0;
    var _col11875 = block.statements;
    var _len11875 = _col11875.length;
    while (true) {
        // item 118750002
        if (_ind11875 < _len11875) {
            
        } else {
            break;
        }
        // item 118750004
        var statement = _col11875[_ind11875];
        // item 11878
        if (first) {
            // item 11881
            first = false
        } else {
            // item 11882
            printToken(
                output,
                createSpace()
            )
        }
        // item 11883
        printStatement(
        	statement,
        	depth,
        	output
        )
        // item 118750003
        _ind11875++;
    }
}

function printPrim(prim) {
    var edge, node, visuals
    // item 9758
    if (Config.PRINT_PRIM) {
        // item 6625
        visuals = module.visuals
        // item 6622
        if (prim.id in visuals.nodes.rows) {
            // item 6626
            node = getNode(prim.id)
            console.log(node)
        } else {
            // item 6630
            edge = getEdge(prim.id)
            console.log(edge)
        }
    }
}

function printRootBlock(block, output) {
    var first
    // item 11688
    first = true
    // item 116810001
    var _ind11681 = 0;
    var _col11681 = block.statements;
    var _len11681 = _col11681.length;
    while (true) {
        // item 116810002
        if (_ind11681 < _len11681) {
            
        } else {
            break;
        }
        // item 116810004
        var statement = _col11681[_ind11681];
        // item 11689
        if (first) {
            // item 11692
            first = false
        } else {
            // item 11686
            startIndented(
                output,
                0
            )
        }
        // item 11685
        printStatement(
        	statement,
        	0,
        	output
        )
        // item 116810003
        _ind11681++;
    }
}

function printStatement(statement, depth, output) {
    var available
    // item 115700001
    var _ind11570 = 0;
    var _col11570 = statement.items;
    var _len11570 = _col11570.length;
    while (true) {
        // item 115700002
        if (_ind11570 < _len11570) {
            
        } else {
            break;
        }
        // item 115700004
        var item = _col11570[_ind11570];
        // item 11572
        if (item.type == "block") {
            // item 11575
            printBlock(
                item,
                depth,
                output
            )
        } else {
            // item 11578
            if (item.type == "eol") {
                // item 11580
                startIndented(
                    output,
                    depth
                )
            } else {
                // item 11576
                available = output.max - output.current
                // item 11577
                if ((item.length > available) && ((item.type == "whitespace") || (item.type == "break"))) {
                    // item 11580
                    startIndented(
                        output,
                        depth
                    )
                } else {
                    // item 11585
                    printToken(
                        output,
                        item
                    )
                }
            }
        }
        // item 115700003
        _ind11570++;
    }
}

function printToken(output, token) {
    // item 11562
    if (token.type == "break") {
        
    } else {
        // item 11751
        if ((output.prevText == ")") && (token.text == "{")) {
            // item 11755
            printToken(
                output,
                createSpace()
            )
        }
        // item 11560
        output.tokens.push(token)
        // item 11561
        output.current += token.text.length
        // item 11746
        output.prevText = token.text || ""
    }
}

function printTokens(tokens) {
    var chunks
    // item 11595
    chunks = []
    // item 115960001
    var _ind11596 = 0;
    var _col11596 = tokens;
    var _len11596 = _col11596.length;
    while (true) {
        // item 115960002
        if (_ind11596 < _len11596) {
            
        } else {
            break;
        }
        // item 115960004
        var token = _col11596[_ind11596];
        // item 11598
        if (token.type == "eol") {
            // item 11601
            chunks.push("\n")
        } else {
            // item 11602
            chunks.push(token.text)
        }
        // item 115960003
        _ind11596++;
    }
    // item 11603
    return chunks.join("")
}

function processOperator(self, c) {
    var builder
    // item 1529
    self.next.endToken()
    // item 13700001
    if (c === module.DOUBLE_QUOTE) {
        // item 1377
        builder = buildDoubleQuoter()
    } else {
        // item 13700002
        if (c === module.SINGLE_QUOTE) {
            // item 1379
            builder = buildSingleQuoter()
        } else {
            // item 1380
            builder = builderOperatorBuilder()
        }
    }
    // item 1490
    builder.operator(c)
    // item 1491
    addToList(
        builder,
        self
    )
}

function pushMenuItem(menu, text, image, code) {
    var item
    // item 7874
    item = {
        type : "item",
        text : tr(text),
        image : image,
        code : code
    }
    // item 7873
    menu.push(item)
}

function pushSeparator(menu) {
    var item, prev
    // item 7881
    item = {
        type : "separator"
    }
    // item 7888
    if (menu.length == 0) {
        
    } else {
        // item 7891
        prev = menu[menu.length - 1]
        // item 7892
        if (prev.type == "separator") {
            
        } else {
            // item 7880
            menu.push(item)
        }
    }
}

function putCycleMark(address) {
    // item 8848
    if (address.x >= address.branch.x) {
        // item 8851
        address.mark = true
        address.branch.mark = true
    }
}

function putLoopsOnCases(select) {
    // item 80070001
    var _ind8007 = 0;
    var _col8007 = select.cases;
    var _len8007 = _col8007.length;
    while (true) {
        // item 80070002
        if (_ind8007 < _len8007) {
            
        } else {
            break;
        }
        // item 80070004
        var caseIcon = _col8007[_ind8007];
        // item 8020
        merge(
            select.loops,
            caseIcon.loops
        )
        // item 80070003
        _ind8007++;
    }
}

function questionInsert(socket) {
    var edits, item, newId
    // item 4595
    edits = []
    // item 4594
    item = {
        type : "question",
        text : "",
        one : socket.target,
        two : socket.target,
        flag1 : 1
    }
    // item 4593
    newId = createItem(
        edits,
        item
    )
    // item 4597
    redirectUpperItems(
        edits,
        socket.links,
        newId
    )
    // item 4596
    return edits
}

function random(min, max) {
    // item 3394
    return Math.random() * (max - min) + min
}

function readBlock(state, parentBlock, finish, seq) {
    var result
    // item 11161
    result = createBlock(seq)
    while (true) {
        // item 11164
        if (readItem(state, result, finish)) {
            
        } else {
            break;
        }
    }
    // item 11168
    startStatement(result)
    result.statement = null
    // item 11165
    if (result.statements.length == 0) {
        
    } else {
        // item 11162
        addItem(
            parentBlock,
            result
        )
    }
}

function readItem(state, parentBlock, finish) {
    var current, currentFinish, seq
    var _sw112670000_ = 0;
    // item 11276
    if ((isEnd(state)) || (isClosing(state, finish))) {
        // item 11265
        return false
    } else {
        // item 11282
        current = state.current
        // item 11283
        nextSymbol(state)
        // item 112670000
        _sw112670000_ = current.text;
        // item 112670001
        if (_sw112670000_ === "(") {
            // item 11285
            currentFinish = ")"
            seq = false
            // item 11294
            addItem(
                parentBlock,
                current
            )
            // item 11284
            readBlock(
                state,
                parentBlock,
                currentFinish,
                seq
            )
            // item 11288
            if (isEnd(state)) {
                // item 11290
                return false
            } else {
                // item 11292
                addItem(
                    parentBlock,
                    state.current
                )
                // item 11297
                parentBlock.prev = "block"
                // item 11293
                nextSymbol(state)
                // item 11291
                return true
            }
        } else {
            // item 112670002
            if (_sw112670000_ === "{") {
                // item 11286
                currentFinish = "}"
                seq = parentBlock.seqStart
                // item 11294
                addItem(
                    parentBlock,
                    current
                )
                // item 11284
                readBlock(
                    state,
                    parentBlock,
                    currentFinish,
                    seq
                )
                // item 11288
                if (isEnd(state)) {
                    // item 11290
                    return false
                } else {
                    // item 11292
                    addItem(
                        parentBlock,
                        state.current
                    )
                    // item 11297
                    parentBlock.prev = "block"
                    // item 11293
                    nextSymbol(state)
                    // item 11291
                    return true
                }
            } else {
                // item 112670003
                if (_sw112670000_ === "[") {
                    // item 11287
                    currentFinish = "]"
                    seq = false
                    // item 11294
                    addItem(
                        parentBlock,
                        current
                    )
                    // item 11284
                    readBlock(
                        state,
                        parentBlock,
                        currentFinish,
                        seq
                    )
                    // item 11288
                    if (isEnd(state)) {
                        // item 11290
                        return false
                    } else {
                        // item 11292
                        addItem(
                            parentBlock,
                            state.current
                        )
                        // item 11297
                        parentBlock.prev = "block"
                        // item 11293
                        nextSymbol(state)
                        // item 11291
                        return true
                    }
                } else {
                    // item 11295
                    addSingleItem(
                        parentBlock,
                        current
                    )
                    // item 11296
                    return true
                }
            }
        }
    }
}

function rebuildSearchItems() {
    var search, visited, visuals
    // item 12342
    search = module.search
    visuals = module.visuals
    // item 12343
    search.occurences = []
    search.items = []
    // item 12392
    visited = {}
    // item 12393
    addNodeToSearch(
        visuals.params,
        search.items,
        visited
    )
    // item 123440001
    var _ind12344 = 0;
    var _col12344 = visuals.branches;
    var _len12344 = _col12344.length;
    while (true) {
        // item 123440002
        if (_ind12344 < _len12344) {
            
        } else {
            break;
        }
        // item 123440004
        var branch = _col12344[_ind12344];
        // item 12346
        addBranchToSearch(
            branch.node,
            search.items,
            visited
        )
        // item 123440003
        _ind12344++;
    }
}

function rebuildSearchState() {
    // item 12341
    rebuildSearchItems()
    // item 12141
    performSearch()
    // item 12142
    updateSearchOutput()
    // item 12143
    onSearchChange()
}

function recalculateNextId() {
    var id, nextId, storage
    // item 2868
    storage = module.storage
    // item 2862
    nextId = storage.nextId
    // item 28630001
    var _ind2863 = 0;
    var _col2863 = storage.items;
    var _keys2863 = Object.keys(_col2863); 
    var _len2863 = _keys2863.length;
    while (true) {
        // item 28630002
        if (_ind2863 < _len2863) {
            
        } else {
            break;
        }
        // item 28630004
        var id = _keys2863[_ind2863]; var item = _col2863[id];
        // item 2865
        id = parseInt(item.id) + 1
        // item 2866
        nextId = Math.max(id, nextId)
        // item 28630003
        _ind2863++;
    }
    // item 2867
    storage.nextId = nextId
}

function redirectAddress(address, targetId) {
    var edits
    // item 8702
    edits = []
    // item 8701
    redirectUpperItems(
        edits,
        address.up.links,
        targetId
    )
    // item 8703
    return edits
}

function redirectBranch(branchItems, oldTargets, newTarget, edits) {
    var item, items
    // item 8904
    items = module.storage.items
    // item 88930001
    var _ind8893 = 0;
    var _col8893 = branchItems;
    var _keys8893 = Object.keys(_col8893); 
    var _len8893 = _keys8893.length;
    while (true) {
        // item 88930002
        if (_ind8893 < _len8893) {
            
        } else {
            break;
        }
        // item 88930004
        var itemId = _keys8893[_ind8893]; var _ = _col8893[itemId];
        // item 8898
        item = items[itemId]
        // item 8895
        if (item.one in oldTargets) {
            // item 8899
            updateItem(
                edits,
                itemId,
                {one: newTarget}
            )
        }
        // item 8900
        if (item.two in oldTargets) {
            // item 8903
            updateItem(
                edits,
                itemId,
                {two: newTarget}
            )
        }
        // item 88930003
        _ind8893++;
    }
}

function redirectUpperItems(edits, links, newId) {
    var change
    // item 45780001
    var _ind4578 = 0;
    var _col4578 = links;
    var _len4578 = _col4578.length;
    while (true) {
        // item 45780002
        if (_ind4578 < _len4578) {
            
        } else {
            break;
        }
        // item 45780004
        var link = _col4578[_ind4578];
        // item 4581
        if (link.index == 0) {
            // item 4584
            change = {
                one : newId
            }
        } else {
            // item 4585
            change = {
                two : newId
            }
        }
        // item 4580
        updateItem(
            edits,
            link.source,
            change
        )
        // item 45780003
        _ind4578++;
    }
}

function redraw() {
    // item 10891
    if (module.storage) {
        // item 10890
        buildVisualsForEdit()
        // item 556
        redrawCanvas()
    }
}

function redrawCanvas() {
    // item 1091
    try {
    	redrawCanvasCore(null)
    } catch (ex) {
    	CallTrace.error(ex)
    	throw ex
    }
}

function redrawCanvasCore(insertionSocket) {
    var render, visuals
    // item 3060
    visuals = module.visuals
    // item 3061
    if (visuals) {
        // item 1130
        render = module.render
        // item 2093
        render.setBackground(
            Theme.get("back")
        )
        // item 1098
        render.clear()
        // item 7490
        drawCandies(
            visuals,
            render
        )
        // item 7491
        if (Config.SHOW_ZONES) {
            // item 7494
            drawSubspaces(
                visuals,
                render
            )
        }
        // item 4210
        drawVisuals(
            visuals,
            render
        )
    }
}

function redrawCanvasCoreDummy(insertionSocket) {
    var item, item2, item3, item4, item5, item6, item7, item8, render, text1, text2
    // item 3139
    if (module.storage) {
        // item 5635
        buildVisualsForEdit()
    }
    // item 3113
    render = module.render
    // item 3114
    render.setBackground(
        module.colors.background
    )
    // item 3110
    render.clear()
    // item 3112
    item = {
        x : 200,
        y : 200
    }
    // item 3115
    text1 = "var foo = bar.moo30X(\n" +
      "    3.345 + 4354,\n" +
      "\t1\t20\t300\t4000\tx\n" +
      "longstart\tyou\t\tend\n" +
      "one two three four five six seven eight nine ten eleven twelve " +
      "one two three four five six seven eight nine ten eleven twelve " +
      "one two three four five six seven eight nine ten eleven twelve " +
      "one two three four five six seven eight nine ten eleven twelve " +
      "onetwothreefourfivesixseveneightnineteneleventwelve" +
      "onetwothreefourfivesixseveneightnineteneleventwelve\n" +
      "thisIsAVeryLongIdentifierThat.isReallyLong()\n" +
      "    x35.foo == \"some \\t 'text'\"||y !== 20\)\n" +
      "    \"unfinished1\n" +
      "    \"unfinished2"
    // item 3119
    item.type = "action"
    item.text = text1
    // item 3120
    flowIcon(render, item)
    // item 3121
    drawIcon(render, item)
    // item 3122
    item3 = {
        type : "action",
        x : 800,
        y : 200,
        text : "foo.bar(\n\tvar1,\n\tvar2\n)"
    }
    // item 3123
    flowIcon(render, item3)
    // item 3124
    drawIcon(render, item3)
    // item 3125
    item4 = {
        type : "action",
        x : 800,
        y : 300,
        text : "foo.bar(var1, var2,"
    }
    // item 3126
    flowIcon(render, item4)
    // item 3127
    drawIcon(render, item4)
    // item 3128
    item5 = {
        type : "question",
        x : 800,
        y : 500,
        text : "foo.left == bar.right"
    }
    // item 3129
    flowIcon(render, item5)
    drawIcon(render, item5)
    // item 3130
    item6 = {
        type : "question",
        x : 800,
        y : 600,
        text : "oneTwoThree.fourFiveSix(\n\tmooFoo.x,\n\tmooFoo.y\n)",
        flag1 : true
    }
    // item 3131
    flowIcon(render, item6)
    drawIcon(render, item6)
    // item 3132
    item7 = {
        type : "action",
        x : 800,
        y : 700,
        text : "oneTwoThree.fourFiveSix(\n\tmooFoo.x,\n\tmooFoo.y\n)"
    }
    // item 3133
    flowIcon(render, item7)
    drawIcon(render, item7)
    // item 3134
    item8 = {
        type : "header",
        x : 800,
        y : 800,
        text : "DetVarEnGangEtMenneske"
    }
    // item 3135
    flowIcon(render, item8)
    drawIcon(render, item8)
    // item 3136
    item8 = {
        type : "end",
        x : 800,
        y : 900,
        text : "End"
    }
    // item 3137
    flowIcon(render, item8)
    drawIcon(render, item8)
    // item 3116
    item2 = {
        x : 200,
        y : 700,
        w : 400,
        h : 200
    }
    // item 3118
    text2 = "«Acro mode» (Rate mode/Manual mode) — в этих режимах электронные помощники," +
    " отвечающие за стабилизацию дрона, будут отключены. Скоростные показатели" + 
    " достигнут максимальных значений.\nПилотирование в этих режимах смогут" +
    " реализовать лишь продвинутые пилоты. Помните – новичкам полет" +
    " в данных режимах должен быть ограничен, так как это не безопасно" +
    " как для пилота, так и для окружающих в месте запуска!"
    // item 3117
    tmpRenderSource(
        render,
        item2,
        text2,
        false
    )
}

function remove(array, item) {
    var index
    // item 3312
    index = array.indexOf(item)
    // item 3313
    if (index == -1) {
        
    } else {
        // item 3316
        array.splice(index, 1)
    }
}

function removeEdge(visuals, edgeId) {
    var edge, head, tail
    // item 3826
    edge = visuals.edges.get(edgeId)
    // item 4312
    head = edge.head
    tail = edge.tail
    // item 3821
    if (edge.vertical) {
        // item 3825
        head.down = null
        tail.up = null
    } else {
        // item 3824
        head.right = null
        tail.left = null
    }
    // item 4313
    remove(head.sources, edge)
    remove(head.targets, edge)
    remove(tail.sources, edge)
    remove(tail.targets, edge)
    // item 3827
    edge.head = null
    edge.tail = null
    edge.source = null
    edge.target = null
    edge.finalTarget = null
    // item 3820
    visuals.edges.remove(edgeId)
}

function removeFromList(item) {
    var next, prev
    // item 1254
    prev = item.prev
    next = item.next
    // item 1255
    prev.next = next
    // item 1256
    if (next) {
        // item 1259
        next.prev = prev
    }
    // item 1260
    item.prev = null
    item.next = null
}

function removeNode(visuals, nodeId) {
    var node
    // item 7289
    node = visuals.nodes.get(nodeId)
    // item 7279
    if ((((node.up) || (node.left)) || (node.right)) || (node.down)) {
        // item 7288
        throw new Error("Node is connected: "+
         nodeId)
    } else {
        // item 7290
        node.finalTarget = null
        // item 7294
        remove(
            node.skewer.nodes,
            node
        )
        // item 7295
        remove(
            node.level.nodes,
            node
        )
        // item 7260
        visuals.nodes.remove(nodeId)
    }
}

function removeTempEdges(visuals) {
    var edgeDown, edgeUp, finalTarget, lower, newLevel, oldLevel, tmpJun, upper
    // item 84770001
    var _ind8477 = 0;
    var _col8477 = visuals.tempEdges;
    var _len8477 = _col8477.length;
    while (true) {
        // item 84770002
        if (_ind8477 < _len8477) {
            
        } else {
            break;
        }
        // item 84770004
        var tmpEdge = _col8477[_ind8477];
        // item 8480
        tmpJun = tmpEdge.head
        // item 8479
        removeEdge(
            visuals,
            tmpEdge.id
        )
        // item 8481
        edgeUp = tmpJun.up
        upper = edgeUp.head
        edgeDown = tmpJun.down
        lower = edgeDown.tail
        finalTarget = edgeUp.finalTarget
        // item 8482
        removeEdge(
            visuals,
            edgeUp.id
        )
        // item 8483
        removeEdge(
            visuals,
            edgeDown.id
        )
        // item 8484
        removeNode(
            visuals,
            tmpJun.id
        )
        // item 8485
        makeDownEdge(
            visuals,
            upper,
            lower,
            finalTarget
        )
        // item 84770003
        _ind8477++;
    }
    // item 8476
    visuals.tempEdges = []
    // item 8486
    if ((visuals.branches.length == 1) || (!(visuals.end))) {
        
    } else {
        // item 8489
        oldLevel = visuals.end.level
        // item 8490
        remove(
            oldLevel.nodes,
            visuals.end
        )
        // item 8491
        newLevel = createLevel(
            visuals
        )
        // item 8492
        newLevel.coord = oldLevel.coord
        newLevel.nodes.push(visuals.end)
        visuals.end.level = newLevel
        // item 8493
        removeEdge(
            visuals,
            visuals.end.left.id
        )
        // item 8494
        moveEndUp(visuals)
    }
}

function replace(input) {
    var search
    // item 12562
    search = module.search
    // item 12564
    if (search.output.canReplace) {
        // item 12567
        doReplace(input.replace)
        // item 12560
        search.output.current = getNextOccurence()
        // item 12563
        updateSearchOutput()
    }
    // item 12561
    return getSearchState()
}

function replaceAll(text, oldText, newText) {
    var parts
    // item 5208
    parts = text.split(oldText)
    // item 5209
    return parts.join(newText)
}

function replaceAllInItem(item, newNeedle, edits) {
    var count, oldText
    // item 12664
    oldText = item.text
    count = 0
    // item 126650001
    var _ind12665 = 0;
    var _col12665 = item.occurences;
    var _len12665 = _col12665.length;
    while (true) {
        // item 126650002
        if (_ind12665 < _len12665) {
            
        } else {
            break;
        }
        // item 126650004
        var occ = _col12665[_ind12665];
        // item 12677
        if (occ.active) {
            // item 12676
            item.text = replaceOccurenceText(
                occ,
                newNeedle
            )
            // item 12685
            occ.active = false
            // item 12681
            shiftLowerOccurences(
                occ,
                newNeedle
            )
            // item 12688
            count++
        }
        // item 126650003
        _ind12665++;
    }
    // item 12682
    if (item.text == oldText) {
        
    } else {
        // item 13043
        addReplaceCommand(
            edits,
            item.id,
            item.type,
            item.text
        )
    }
    // item 12689
    return count
}

function replaceIds(startId, items, targetId) {
    var oldToNew
    // item 9420
    oldToNew = generateNewIds(
        items
    )
    // item 9432
    oldToNew["finish"] = targetId
    // item 9624
    replaceTargets(
        items,
        oldToNew
    )
    // item 9435
    return oldToNew[startId]
}

function replaceOccurence(occ, newNeedle) {
    var item, newText
    // item 12593
    item = occ.item
    // item 12591
    newText = replaceOccurenceText(
        occ,
        newNeedle
    )
    // item 12609
    item.text = newText
    item.textLow = newText.toLowerCase()
    // item 12594
    occ.active = false
    // item 12686
    shiftLowerOccurences(
        occ,
        newNeedle
    )
    // item 12592
    return newText
}

function replaceOccurenceText(occ, newNeedle) {
    var after, before, item, newText, text
    // item 12675
    item = occ.item
    text = item.text
    // item 12672
    before = text.substring(0, occ.begin)
    after = text.substring(occ.end)
    // item 12673
    newText = before + newNeedle + after
    // item 12674
    return newText
}

function replaceTarget(item, oldToNew) {
    // item 9384
    if (item.one) {
        // item 9387
        item.one = oldToNew[item.one]
    }
    // item 9388
    if (item.two) {
        // item 9391
        item.two = oldToNew[item.two]
    }
}

function replaceTargets(items, oldToNew) {
    var relink
    // item 9622
    relink = function(item) {
        replaceTarget(item, oldToNew)
    }
    // item 9623
    items.forEach(relink)
}

function replaceText() {
    
}

function requestSourceFlow(render, node) {
    // item 10839
    if (isHuman()) {
        // item 10842
        return flowText(
            render,
            node.text,
            Config.DEF_ICON_WIDTH
        )
    } else {
        // item 10843
        return flowSourceCode(
            render,
            node,
            true
        )
    }
}

function requestTextFlow(render, node) {
    // item 10856
    return flowText(
        render,
        node.text,
        Config.DEF_ICON_WIDTH
    )
}

function resetSelection() {
    // item 11848
    module.selection = new Selection()
}

function roMethod(name, method) {
    var wrapped
    // item 10751
    wrapped = function() {
    	var args = arrayFrom(arguments)
    	addTrace(name, args)
    	return method.apply(undefined, args)
    }
    // item 10752
    module[name] = wrapped
}

function sameLoop(srcLinks, targetId) {
    var src, target, visuals
    // item 6231
    visuals = module.visuals
    // item 6229
    target = getNodeByItem(
        visuals,
        targetId
    )
    // item 62270001
    var _ind6227 = 0;
    var _col6227 = srcLinks;
    var _len6227 = _col6227.length;
    while (true) {
        // item 62270002
        if (_ind6227 < _len6227) {
            
        } else {
            // item 6232
            return true
        }
        // item 62270004
        var link = _col6227[_ind6227];
        // item 6230
        src = getNodeByItem(
            visuals,
            link.source
        )
        // item 6233
        if ((isSubset(src.loops, target.loops)) || (canComeBackTo(src, target.loops))) {
            
        } else {
            // item 6225
            return false
        }
        // item 62270003
        _ind6227++;
    }
}

function saveHandlePos(id) {
    
}

function saveOpChar(text) {
    var code
    // item 1188
    code = firstChar(text)
    module.opChars[code] = true
}

function scanBranchItems(node, visited) {
    // item 8912
    if ((node.itemId in visited) || (node.type == "address")) {
        
    } else {
        // item 8915
        visited[node.itemId] = node
        // item 89160001
        var _ind8916 = 0;
        var _col8916 = node.next;
        var _len8916 = _col8916.length;
        while (true) {
            // item 89160002
            if (_ind8916 < _len8916) {
                
            } else {
                break;
            }
            // item 89160004
            var next = _col8916[_ind8916];
            // item 8918
            scanBranchItems(next, visited)
            // item 89160003
            _ind8916++;
        }
    }
}

function scanItem(item, text) {
    var begin, current, end, hayStack, input, start
    // item 12473
    input = module.search.input
    // item 12486
    item.occurences = []
    // item 12474
    if (input.sensitive) {
        // item 12477
        hayStack = item.text
    } else {
        // item 12478
        hayStack = item.textLow
    }
    // item 12471
    current = 0
    while (true) {
        // item 12472
        start = hayStack.indexOf(
            text,
            current
        )
        // item 12479
        if (start == -1) {
            break;
        }
        // item 12483
        begin = start
        end = start + text.length
        // item 12485
        addOccurence(
            item,
            begin,
            end
        )
        // item 12553
        current = start + text.length
    }
}

function scanItemWhole(item, tokens) {
    var begin, current, end, hayStack, input, lastToken, lastTokenId, start
    // item 12452
    input = module.search.input
    // item 12465
    item.occurences = []
    // item 12453
    if (input.sensitive) {
        // item 12456
        hayStack = item.tokens
    } else {
        // item 12457
        hayStack = item.tokensLow
    }
    // item 12450
    current = 0
    while (true) {
        // item 12451
        start = findTokens(
            hayStack,
            tokens,
            current
        )
        // item 12458
        if (start == -1) {
            break;
        }
        // item 12462
        begin = hayStack[start].pos
        // item 12461
        lastTokenId = start + tokens.length - 1
        lastToken = hayStack[lastTokenId]
        end = lastToken.pos + lastToken.text.length
        // item 12464
        addOccurence(
            item,
            begin,
            end
        )
        // item 12554
        current = lastTokenId + 1
    }
}

function scanManhattan(visited, node) {
    // item 8515
    if (node.id in visited) {
        
    } else {
        // item 8514
        visited[node.id] = true
        // item 8518
        if (node.left) {
            // item 8521
            scanManhattan(
                visited,
                getLeft(node)
            )
        }
        // item 8522
        if (node.up) {
            // item 8525
            scanManhattan(
                visited,
                getUp(node)
            )
        }
        // item 8526
        if (node.right) {
            // item 8529
            scanManhattan(
                visited,
                getRight(node)
            )
        }
        // item 8530
        if (node.down) {
            // item 8533
            scanManhattan(
                visited,
                getDown(node)
            )
        }
    }
}

function searchNext() {
    var search
    // item 12144
    search = module.search
    // item 12146
    if (search.output.canNext) {
        // item 12100
        search.output.current = getNextOccurence()
        // item 12145
        updateSearchOutput()
    }
    // item 12101
    return getSearchState()
}

function searchPrev() {
    var search
    // item 12151
    search = module.search
    // item 12153
    if (search.output.canPrev) {
        // item 12149
        search.output.current = getPrevOccurence()
        // item 12152
        updateSearchOutput()
    }
    // item 12150
    return getSearchState()
}

function selectAll() {
    
}

function selectCluster(headNode, node) {
    var context, included, info, selection, start
    var _sw100570000_ = 0;
    // item 9906
    selection = module.selection
    // item 9885
    if (isSelected(node.id)) {
        // item 9894
        return headNode
    } else {
        // item 100570000
        _sw100570000_ = node.type;
        // item 100570001
        if (_sw100570000_ === "select") {
            // item 10068
            start = node
            // item 10083
            context = {
                paths : 0,
                nodes : {},
                arrows : 0,
                loops : {}
            }
            // item 10085
            info = getNodeInfo(
                context,
                start
            )
            // item 10084
            selectClusterStepNext(
                context,
                info
            )
            // item 10086
            included = []
            // item 100870001
            var _ind10087 = 0;
            var _col10087 = context.nodes;
            var _keys10087 = Object.keys(_col10087); 
            var _len10087 = _keys10087.length;
            while (true) {
                // item 100870002
                if (_ind10087 < _len10087) {
                    
                } else {
                    break;
                }
                // item 100870004
                var id = _keys10087[_ind10087]; var info = _col10087[id];
                // item 10089
                if (info.include) {
                    // item 10092
                    included.push(info.node)
                }
                // item 100870003
                _ind10087++;
            }
            // item 10082
            return included.reduce(
                addOne,
                headNode
            )
        } else {
            // item 100570002
            if (_sw100570000_ === "case") {
                // item 10073
                start = node.select
                // item 10083
                context = {
                    paths : 0,
                    nodes : {},
                    arrows : 0,
                    loops : {}
                }
                // item 10085
                info = getNodeInfo(
                    context,
                    start
                )
                // item 10084
                selectClusterStepNext(
                    context,
                    info
                )
                // item 10086
                included = []
                // item 100870001
                var _ind10087 = 0;
                var _col10087 = context.nodes;
                var _keys10087 = Object.keys(_col10087); 
                var _len10087 = _keys10087.length;
                while (true) {
                    // item 100870002
                    if (_ind10087 < _len10087) {
                        
                    } else {
                        break;
                    }
                    // item 100870004
                    var id = _keys10087[_ind10087]; var info = _col10087[id];
                    // item 10089
                    if (info.include) {
                        // item 10092
                        included.push(info.node)
                    }
                    // item 100870003
                    _ind10087++;
                }
                // item 10082
                return included.reduce(
                    addOne,
                    headNode
                )
            } else {
                // item 100570003
                if (_sw100570000_ === "loopbegin") {
                    // item 10069
                    start = node
                    // item 10083
                    context = {
                        paths : 0,
                        nodes : {},
                        arrows : 0,
                        loops : {}
                    }
                    // item 10085
                    info = getNodeInfo(
                        context,
                        start
                    )
                    // item 10084
                    selectClusterStepNext(
                        context,
                        info
                    )
                    // item 10086
                    included = []
                    // item 100870001
                    var _ind10087 = 0;
                    var _col10087 = context.nodes;
                    var _keys10087 = Object.keys(_col10087); 
                    var _len10087 = _keys10087.length;
                    while (true) {
                        // item 100870002
                        if (_ind10087 < _len10087) {
                            
                        } else {
                            break;
                        }
                        // item 100870004
                        var id = _keys10087[_ind10087]; var info = _col10087[id];
                        // item 10089
                        if (info.include) {
                            // item 10092
                            included.push(info.node)
                        }
                        // item 100870003
                        _ind10087++;
                    }
                    // item 10082
                    return included.reduce(
                        addOne,
                        headNode
                    )
                } else {
                    // item 100570004
                    if (_sw100570000_ === "loopend") {
                        // item 10074
                        start = node.loopStart
                        // item 10083
                        context = {
                            paths : 0,
                            nodes : {},
                            arrows : 0,
                            loops : {}
                        }
                        // item 10085
                        info = getNodeInfo(
                            context,
                            start
                        )
                        // item 10084
                        selectClusterStepNext(
                            context,
                            info
                        )
                        // item 10086
                        included = []
                        // item 100870001
                        var _ind10087 = 0;
                        var _col10087 = context.nodes;
                        var _keys10087 = Object.keys(_col10087); 
                        var _len10087 = _keys10087.length;
                        while (true) {
                            // item 100870002
                            if (_ind10087 < _len10087) {
                                
                            } else {
                                break;
                            }
                            // item 100870004
                            var id = _keys10087[_ind10087]; var info = _col10087[id];
                            // item 10089
                            if (info.include) {
                                // item 10092
                                included.push(info.node)
                            }
                            // item 100870003
                            _ind10087++;
                        }
                        // item 10082
                        return included.reduce(
                            addOne,
                            headNode
                        )
                    } else {
                        // item 100570005
                        if (_sw100570000_ === "arrow-loop") {
                            // item 10115
                            start = node
                            // item 10083
                            context = {
                                paths : 0,
                                nodes : {},
                                arrows : 0,
                                loops : {}
                            }
                            // item 10085
                            info = getNodeInfo(
                                context,
                                start
                            )
                            // item 10084
                            selectClusterStepNext(
                                context,
                                info
                            )
                            // item 10086
                            included = []
                            // item 100870001
                            var _ind10087 = 0;
                            var _col10087 = context.nodes;
                            var _keys10087 = Object.keys(_col10087); 
                            var _len10087 = _keys10087.length;
                            while (true) {
                                // item 100870002
                                if (_ind10087 < _len10087) {
                                    
                                } else {
                                    break;
                                }
                                // item 100870004
                                var id = _keys10087[_ind10087]; var info = _col10087[id];
                                // item 10089
                                if (info.include) {
                                    // item 10092
                                    included.push(info.node)
                                }
                                // item 100870003
                                _ind10087++;
                            }
                            // item 10082
                            return included.reduce(
                                addOne,
                                headNode
                            )
                        } else {
                            // item 100570006
                            if (_sw100570000_ === "question") {
                                // item 10072
                                start = node
                                // item 10083
                                context = {
                                    paths : 0,
                                    nodes : {},
                                    arrows : 0,
                                    loops : {}
                                }
                                // item 10085
                                info = getNodeInfo(
                                    context,
                                    start
                                )
                                // item 10084
                                selectClusterStepNext(
                                    context,
                                    info
                                )
                                // item 10086
                                included = []
                                // item 100870001
                                var _ind10087 = 0;
                                var _col10087 = context.nodes;
                                var _keys10087 = Object.keys(_col10087); 
                                var _len10087 = _keys10087.length;
                                while (true) {
                                    // item 100870002
                                    if (_ind10087 < _len10087) {
                                        
                                    } else {
                                        break;
                                    }
                                    // item 100870004
                                    var id = _keys10087[_ind10087]; var info = _col10087[id];
                                    // item 10089
                                    if (info.include) {
                                        // item 10092
                                        included.push(info.node)
                                    }
                                    // item 100870003
                                    _ind10087++;
                                }
                                // item 10082
                                return included.reduce(
                                    addOne,
                                    headNode
                                )
                            } else {
                                // item 9961
                                return addOne(
                                    headNode,
                                    node
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}

function selectClusterStep(context, src, node) {
    var aprev, joins, nodeInfo, prev
    // item 10015
    if ((node.type == "end") || (node.type == "address")) {
        
    } else {
        // item 10019
        nodeInfo = getNodeInfo(
            context,
            node
        )
        // item 10120
        if (isBackLink(src, node)) {
            // item 10145
            aprev = nodeInfo.node.aprev.length
            // item 10146
            nodeInfo.aremaining--
            // item 10147
            if (nodeInfo.aremaining == 0) {
                // item 10149
                context.paths -= aprev
                // item 10150
                selectClusterStepBack(
                    context,
                    nodeInfo
                )
            }
        } else {
            // item 10094
            prev = nodeInfo.node.prev.length
            // item 10093
            if (prev == 1) {
                // item 10047
                selectClusterStepNext(
                    context,
                    nodeInfo
                )
            } else {
                // item 10028
                nodeInfo.remaining--
                // item 10029
                if (nodeInfo.remaining == 0) {
                    // item 10032
                    joins = prev - 1
                    context.paths -= joins
                    // item 10033
                    if (clusterComplete(context)) {
                        
                    } else {
                        // item 10047
                        selectClusterStepNext(
                            context,
                            nodeInfo
                        )
                    }
                }
            }
        }
    }
}

function selectClusterStepBack(context, nodeInfo) {
    var node
    // item 10142
    if (nodeInfo.include) {
        // item 10143
        context.arrows--
    } else {
        // item 10158
        context.arrows++
        // item 10138
        nodeInfo.include = true
        node = nodeInfo.node
        // item 10139
        if (clusterComplete(context)) {
            
        } else {
            // item 10137
            selectClusterStep(
                context,
                node,
                node.next[0]
            )
        }
    }
}

function selectClusterStepNext(context, nodeInfo) {
    var info, node
    // item 10124
    if (nodeInfo.include) {
        // item 10125
        context.arrows--
    } else {
        // item 10151
        if (isArrowLoop(nodeInfo.node)) {
            // item 10154
            context.arrows++
        }
        // item 10050
        nodeInfo.include = true
        node = nodeInfo.node
        // item 10041
        if (node.next.length == 2) {
            // item 10044
            context.paths++
            // item 10045
            selectClusterStep(
                context,
                node,
                node.next[1]
            )
        } else {
            // item 10159
            if (node.type == "loopbegin") {
                // item 10163
                context.loops[node.id] = true
                // item 10164
                context.arrows++
            } else {
                // item 10161
                if (node.type == "loopend") {
                    // item 10165
                    if (node.loopStart.id in context.loops) {
                        // item 10167
                        context.arrows--
                    } else {
                        // item 10169
                        info = getNodeInfo(
                            context,
                            node.loopStart
                        )
                        // item 10168
                        selectClusterStepNext(
                            context,
                            info
                        )
                    }
                }
            }
        }
        // item 10117
        if ((clusterComplete(context)) && (!(node.type == "select"))) {
            
        } else {
            // item 10046
            selectClusterStep(
                context,
                node,
                node.next[0]
            )
        }
    }
}

function selectInsert(socket) {
    var case1Id, case2Id, case3Id, edits, selectId
    // item 6402
    edits = []
    // item 6406
    case3Id = createItem(
        edits,
        {type:"case", one:socket.target}
    )
    // item 6408
    case2Id = createItem(
        edits,
        {type:"case", one:socket.target, two:case3Id}
    )
    // item 6409
    case1Id = createItem(
        edits,
        {type:"case", one:socket.target, two:case2Id}
    )
    // item 6517
    selectId = createItem(
        edits,
        {type:"select", one:case1Id}
    )
    // item 6404
    redirectUpperItems(
        edits,
        socket.links,
        selectId
    )
    // item 6403
    return edits
}

function selectNode(node) {
    // item 11912
    deselectAll()
    // item 11911
    selectPrim(node.id)
    // item 11913
    redrawCanvas()
}

function selectOneItem(itemId) {
    var node
    // item 10309
    node = getNodeByItem(
        module.visuals,
        itemId
    )
    // item 10310
    if (node) {
        // item 10314
        deselectAll()
        // item 10313
        selectPrim(node.id)
        // item 10315
        redrawCanvas()
    }
}

function selectPath(path, head) {
    var newHead, selection
    // item 9838
    selection = module.selection
    // item 9837
    newHead = path.reduce(
        selectCluster,
        head
    )
    // item 9840
    selection.head = newHead.id
}

function selectPrim(id) {
    var selection, visuals
    // item 9810
    visuals = module.visuals
    selection = module.selection
    // item 9807
    if (id in visuals.nodes.rows) {
        // item 9811
        selection.prims[id] = "node"
        // item 9819
        selection.head = id
    } else {
        // item 9813
        if (id in visuals.edges.rows) {
            // item 9812
            selection.prims[id] = "edge"
        } else {
            // item 9815
            throw new Error("Can't select " + id)
        }
    }
}

function sendChars(self) {
    var token
    // item 1750
    token = makeTokenFromChars(
        self,
        "operator"
    )
    // item 1678
    self.next.sendToken(
        token
    )
}

function sendSToken(self, pos, chars) {
    var text, token
    // item 12302
    text = Utils.arrayToString(
        chars
    )
    // item 12304
    token = {
        text : text,
        pos : pos
    }
    // item 12303
    self.next.onToken(
        token
    )
}

function sendToken(self, type, chars) {
    var text, token
    // item 10656
    text = Utils.arrayToString(
        chars
    )
    // item 10658
    token = {
        type : type,
        text : text
    }
    // item 10657
    self.next.onToken(
        token
    )
    // item 10660
    self.chars = []
    // item 10659
    setTt(self, "idle")
    // item 11756
    if ((type == "whitespace") || (type == "eol")) {
        
    } else {
        // item 11760
        self.prev = token
    }
}

function sendTokens(tokens, flower) {
    // item 116550001
    var _ind11655 = 0;
    var _col11655 = tokens;
    var _len11655 = _col11655.length;
    while (true) {
        // item 116550002
        if (_ind11655 < _len11655) {
            
        } else {
            break;
        }
        // item 116550004
        var token = _col11655[_ind11655];
        // item 11657
        if (token.type == "eol") {
            // item 11660
            flower.eol()
        } else {
            // item 11661
            flower.onToken(token)
        }
        // item 116550003
        _ind11655++;
    }
}

function sendWhitespace(self, ch) {
    var token
    // item 2000
    token = new Token(
        "whitespace"
    )
    // item 2001
    token.text = Utils.arrayToString(
        [ch]
    )
    // item 1999
    self.next.sendToken(
        token
    )
}

function setBackground(data) {
    
}

function setCallback(name, fun) {
    // item 395
    module.callbacks[name] = fun
}

function setContent(id, content) {
    
}

function setFontFromIcon(render, item) {
    // item 2740
    if (item.type == "header") {
        // item 2744
        render.setDefaultFont(
            HeaderFont
        )
    } else {
        // item 2745
        render.setDefaultFont(
            MainFont
        )
    }
}

function setFormat(ids, format) {
    
}

function setFreeItemSize(id, x, y, width, height) {
    
}

function setItemWidth(id, width) {
    
}

function setKeywordColor(token) {
    // item 13052
    token.color = Theme.get("keyword")
}

function setNodeText(nodeId, text) {
    var edits, node
    // item 10753
    if (module.readonly) {
        
    } else {
        // item 10827
        addTrace(
            "setNodeText",
            [nodeId, text]
        )
        // item 5210
        text = text || ""
        text = text.trim()
        // item 5197
        edits = []
        // item 5198
        node = getNode(nodeId)
        // item 5199
        if (node.type == "header") {
            // item 5202
            text = replaceAll(
                text,
                "\n",
                " "
            )
            // item 5220
            updateDiagram(
                edits,
                {name: text}
            )
        } else {
            // item 12858
            text = autoFormat(
                node.type,
                text
            )
            // item 5211
            updateItem(
                edits,
                node.itemId,
                {text: text}
            )
        }
        // item 5212
        editAndSave(edits)
    }
}

function setNodeText2(nodeId, text) {
    var edits
    // item 13154
    if (module.readonly) {
        
    } else {
        // item 13157
        addTrace(
            "setNodeText2",
            [nodeId, text]
        )
        // item 13150
        text = text || ""
        text = text.trim()
        // item 13144
        edits = []
        // item 13151
        updateItem(
            edits,
            nodeId,
            {text2: text}
        )
        // item 13152
        editAndSave(edits)
    }
}

function setNotNull(src, dst, name) {
    // item 2923
    if (name in src) {
        // item 2926
        dst[name] = src[name]
    }
}

function setProperties(props) {
    var change, edits
    // item 12960
    change = {
        params : props.params || "",
        keywords : props.keywords || {}
    }
    // item 12957
    edits = []
    // item 12958
    updateDiagram(
        edits,
        change
    )
    // item 13044
    deselectAll()
    // item 12959
    editAndSave(edits)
}

function setReadonly(readonly) {
    // item 566
    module.readonly = readonly
}

function setSameHeight(visuals) {
    var addresses, branches
    // item 8769
    forType(
        visuals,
        "select",
        setSameHeightForSelect
    )
    // item 8772
    branches = getCreateList(
        visuals.byType,
        "branch"
    )
    // item 8770
    setSameHeightForNodes(
        branches
    )
    // item 8774
    addresses = getCreateList(
        visuals.byType,
        "address"
    )
    // item 8773
    setSameHeightForNodes(
        addresses
    )
}

function setSameHeightForNodes(nodes) {
    var height, setHeight
    // item 8757
    height = nodes.reduce(
        maxHeight,
        0
    )
    // item 8758
    setHeight = function(node) {
        node.h = height
    }
    // item 8759
    nodes.forEach(
        setHeight
    )
}

function setSameHeightForSelect(select) {
    // item 8768
    setSameHeightForNodes(
        select.cases
    )
}

function setSameWidth(skewer) {
    var nodes, width
    // item 3901
    width = 0
    // item 39020001
    var _ind3902 = 0;
    var _col3902 = skewer.nodes;
    var _len3902 = _col3902.length;
    while (true) {
        // item 39020002
        if (_ind3902 < _len3902) {
            
        } else {
            break;
        }
        // item 39020004
        var node = _col3902[_ind3902];
        // item 3904
        width = Math.max(
            width,
            node.w
        )
        // item 39020003
        _ind3902++;
    }
    // item 3927
    skewer.boundary = width
    // item 3920
    nodes = skewer.nodes.filter(
        shouldAlignWidth
    )
    // item 38940001
    var _ind3894 = 0;
    var _col3894 = nodes;
    var _len3894 = _col3894.length;
    while (true) {
        // item 38940002
        if (_ind3894 < _len3894) {
            
        } else {
            break;
        }
        // item 38940004
        var node = _col3894[_ind3894];
        // item 3896
        node.w = width
        // item 38940003
        _ind3894++;
    }
}

function setTop(lexer, top) {
    // item 10328
    lexer.top = top
    lexer.escaping = false
    lexer.part = 1
    // item 10335
    setTt(lexer, "idle")
}

function setTt(lexer, tt) {
    // item 10334
    lexer.tt = tt
    lexer.part = 1
}

function setUserSettings(settings) {
    // item 716
    module.userSettings = Utils.copyObject(settings)
}

function shiftLowerOccurences(occ, newNeedle) {
    var delta, occs, oldLength
    // item 12680
    oldLength = occ.end - occ.begin
    delta = newNeedle.length - oldLength
    // item 12604
    occs = occ.item.occurences
    // item 126020001
    var _ind12602 = 0;
    var _col12602 = occs;
    var _len12602 = _col12602.length;
    while (true) {
        // item 126020002
        if (_ind12602 < _len12602) {
            
        } else {
            break;
        }
        // item 126020004
        var occ2 = _col12602[_ind12602];
        // item 12606
        if (occ2.active) {
            // item 12612
            if (occ2.ordinal > occ.ordinal) {
                // item 12610
                occ2.begin += delta
                occ2.end += delta
            }
            // item 12611
            updateOccurence(occ2)
        }
        // item 126020003
        _ind12602++;
    }
}

function shouldAlignWidth(node) {
    // item 3915
    if (node.type in module.widthNodes) {
        // item 3919
        return false
    } else {
        // item 3918
        return true
    }
}

function shouldAutoformat(type) {
    // item 11858
    if (((((((type == "branch") || (type == "address")) || (type == "params")) || (type == "header")) || (type == "end")) || (type == "input")) || (type == "pause")) {
        // item 11868
        return false
    } else {
        // item 11867
        return true
    }
}

function showAllBranchSockets(op) {
    var showInsert
    // item 10744
    if (isSilhouette()) {
        // item 10743
        showInsert = function(node) {
            showBranchSockets(node, op)
        }
        // item 10742
        forType(
            module.visuals,
            "branch",
            showInsert
        )
    }
}

function showBlockInsertSockets(op, type) {
    var createEdgeSocket, edges, sockets
    // item 6685
    edges = findForInsertion()
    // item 6686
    createEdgeSocket = function(edge) {
        return createSocketFromEdge(edge, op, type)
    }
    // item 6687
    sockets = edges.map(
        createEdgeSocket
    )
    // item 6688
    sockets.forEach(
        copyEdgeLinks
    )
}

function showBranchSockets(node, op) {
    var lowest, socket, socket2, visuals
    // item 8940
    visuals = module.visuals
    // item 8937
    lowest = goDown(node)
    // item 8934
    if (lowest.type == "end") {
        
    } else {
        // item 8938
        socket = new Socket(
            node.x - node.w,
            node.y,
            op,
            "branch"
        )
        // item 8939
        visuals.sockets.insert(
            socket
        )
        // item 8941
        socket.node = node
        socket.left = true
        // item 8942
        socket2 = new Socket(
            node.x + node.w,
            node.y,
            op,
            "branch"
        )
        // item 8943
        visuals.sockets.insert(
            socket2
        )
        // item 8944
        socket2.node = node
    }
}

function showCaseSockets(node, op) {
    // item 6702
    showRightCaseSocket(
        node,
        op
    )
    // item 6735
    if (node = firstCase(node.select)) {
        // item 6744
        showFirstCaseSocket(
            node,
            op
        )
    }
}

function showFirstCaseSocket(node, op) {
    var socket, visuals
    // item 6712
    visuals = module.visuals
    // item 6710
    socket = new Socket(
        node.x - node.w,
        node.y,
        op,
        "first-case"
    )
    // item 6711
    visuals.sockets.insert(
        socket
    )
    // item 6753
    socket.node = node
}

function showInputBox(title, oldText, callback, x, y, validate) {
    // item 5230
    var fun = module.callbacks.showInputBox
    // item 5226
    if (fun) {
        // item 5229
        fun(title, oldText, callback, x, y, validate)
    }
}

function showInsertionSockets(type) {
    var action, showInsert
    // item 5974
    clearSockets()
    // item 10829
    if (module.readonly) {
        
    } else {
        // item 4388
        action = getActionForInsert(
            type
        )
        // item 4389
        if (action) {
            // item 4610
            deselectAll()
            // item 66710001
            if (type === "case") {
                // item 9502
                showInsert = function(node) {
                    showCaseSockets(node, "insert")
                }
                // item 6691
                forType(
                    module.visuals,
                    "case",
                    showInsert
                )
            } else {
                // item 66710002
                if (type === "branch") {
                    // item 8932
                    showAllBranchSockets(
                        "insert"
                    )
                } else {
                    // item 66710003
                    if (type === "action") {
                        // item 13077
                        addParamsSocket()
                    }
                    // item 6689
                    showBlockInsertSockets(
                        "insert",
                        type
                    )
                }
            }
            // item 4361
            redrawCanvas()
        }
    }
}

function showLianaSockets(prim) {
    var source
    // item 5975
    clearSockets()
    // item 10830
    if (module.readonly) {
        
    } else {
        // item 5746
        source = findLianaSource(prim)
        // item 5743
        if (source) {
            // item 7499
            if (source.outer) {
                // item 59080001
                var _ind5908 = 0;
                var _col5908 = source.outer.outer;
                var _keys5908 = Object.keys(_col5908); 
                var _len5908 = _keys5908.length;
                while (true) {
                    // item 59080002
                    if (_ind5908 < _len5908) {
                        
                    } else {
                        break;
                    }
                    // item 59080004
                    var targetId = _keys5908[_ind5908]; var record = _col5908[targetId];
                    // item 5910
                    if (isLower(record, source)) {
                        // item 5913
                        createLianaSocket(record, source)
                    }
                    // item 59080003
                    _ind5908++;
                }
                // item 7596
                if (source.arrow) {
                    
                } else {
                    // item 77040001
                    var _ind7704 = 0;
                    var _col7704 = source.outer.outerArrPads;
                    var _keys7704 = Object.keys(_col7704); 
                    var _len7704 = _keys7704.length;
                    while (true) {
                        // item 77040002
                        if (_ind7704 < _len7704) {
                            
                        } else {
                            break;
                        }
                        // item 77040004
                        var id = _keys7704[_ind7704]; var downEdge = _col7704[id];
                        // item 6934
                        createArrowSocket(downEdge, source)
                        // item 77040003
                        _ind7704++;
                    }
                }
                // item 59140001
                var _ind5914 = 0;
                var _col5914 = source.outer.inner;
                var _keys5914 = Object.keys(_col5914); 
                var _len5914 = _keys5914.length;
                while (true) {
                    // item 59140002
                    if (_ind5914 < _len5914) {
                        
                    } else {
                        break;
                    }
                    // item 59140004
                    var targetId = _keys5914[_ind5914]; var record = _col5914[targetId];
                    // item 7602
                    if (canOuterToInner(record, source)) {
                        // item 5922
                        createLianaSocket(record, source)
                    }
                    // item 59140003
                    _ind5914++;
                }
                // item 7599
                if (((source.arrow) || (source.role == "up")) || (!(source.inner))) {
                    
                } else {
                    // item 59200001
                    var _ind5920 = 0;
                    var _col5920 = source.inner.outer;
                    var _keys5920 = Object.keys(_col5920); 
                    var _len5920 = _keys5920.length;
                    while (true) {
                        // item 59200002
                        if (_ind5920 < _len5920) {
                            
                        } else {
                            break;
                        }
                        // item 59200004
                        var targetId = _keys5920[_ind5920]; var record = _col5920[targetId];
                        // item 7720
                        if ((source.role == "right-loop") || (!((source.vertical) || (isLower(record, source))))) {
                            
                        } else {
                            // item 5923
                            createLianaSocket(record, source)
                        }
                        // item 59200003
                        _ind5920++;
                    }
                    // item 6025
                    if (isDegQuestion(source)) {
                        // item 60220001
                        var _ind6022 = 0;
                        var _col6022 = source.inner.inner;
                        var _keys6022 = Object.keys(_col6022); 
                        var _len6022 = _keys6022.length;
                        while (true) {
                            // item 60220002
                            if (_ind6022 < _len6022) {
                                
                            } else {
                                break;
                            }
                            // item 60220004
                            var targetId = _keys6022[_ind6022]; var record = _col6022[targetId];
                            // item 6024
                            createLianaSocket(record, source)
                            // item 60220003
                            _ind6022++;
                        }
                    }
                }
            } else {
                // item 59200001
                var _ind5920 = 0;
                var _col5920 = source.inner.outer;
                var _keys5920 = Object.keys(_col5920); 
                var _len5920 = _keys5920.length;
                while (true) {
                    // item 59200002
                    if (_ind5920 < _len5920) {
                        
                    } else {
                        break;
                    }
                    // item 59200004
                    var targetId = _keys5920[_ind5920]; var record = _col5920[targetId];
                    // item 7720
                    if ((source.role == "right-loop") || (!((source.vertical) || (isLower(record, source))))) {
                        
                    } else {
                        // item 5923
                        createLianaSocket(record, source)
                    }
                    // item 59200003
                    _ind5920++;
                }
                // item 6025
                if (isDegQuestion(source)) {
                    // item 60220001
                    var _ind6022 = 0;
                    var _col6022 = source.inner.inner;
                    var _keys6022 = Object.keys(_col6022); 
                    var _len6022 = _keys6022.length;
                    while (true) {
                        // item 60220002
                        if (_ind6022 < _len6022) {
                            
                        } else {
                            break;
                        }
                        // item 60220004
                        var targetId = _keys6022[_ind6022]; var record = _col6022[targetId];
                        // item 6024
                        createLianaSocket(record, source)
                        // item 60220003
                        _ind6022++;
                    }
                }
            }
        }
    }
}

function showPasteSockets(type) {
    var showPaste
    // item 9296
    clearSockets()
    // item 9444
    if ((type) && (!(module.readonly))) {
        // item 9295
        deselectAll()
        // item 92990001
        if (type === "case") {
            // item 9504
            showPaste = function(node) {
                showCaseSockets(node, "paste")
            }
            // item 9503
            forType(
                module.visuals,
                "case",
                showPaste
            )
            // item 9290
            redrawCanvas()
        } else {
            // item 92990002
            if (type === "branch") {
                // item 9709
                showAllBranchSockets(
                    "paste"
                )
                // item 9290
                redrawCanvas()
            } else {
                // item 92990003
                if (type === "block") {
                    // item 9312
                    showBlockInsertSockets(
                        "paste",
                        type
                    )
                    // item 9290
                    redrawCanvas()
                }
            }
        }
    }
}

function showRightCaseSocket(node, op) {
    var socket, visuals
    // item 6720
    visuals = module.visuals
    // item 6718
    socket = new Socket(
        node.x + node.w,
        node.y,
        op,
        "case"
    )
    // item 6719
    visuals.sockets.insert(
        socket
    )
    // item 6754
    socket.node = node
}

function simpleInsert(socket, type) {
    var edits, item, newId
    // item 4548
    edits = []
    // item 4547
    item = {
        type : type,
        text : "",
        one : socket.target
    }
    // item 4546
    newId = createItem(
        edits,
        item
    )
    // item 4587
    redirectUpperItems(
        edits,
        socket.links,
        newId
    )
    // item 4549
    return edits
}

function skewerHead(skewer) {
    // item 3991
    return skewer.nodes[0]
}

function skewerTail(skewer) {
    var last, nodes
    // item 3998
    nodes = skewer.nodes
    last = nodes.length - 1
    // item 3997
    return nodes[last]
}

function snapSize(textHeight) {
    var height, heightRaw, padding
    // item 2534
    padding = Config.ICON_PADDING
    // item 2521
    heightRaw = (textHeight / 2 + padding)
    height = Math.ceil(heightRaw / Config.SIZE_SNAP) *
      Config.SIZE_SNAP
    // item 2522
    return height
}

function splitRight(visuals, rightEdge) {
    var finalTarget, jun, leftNode, leftPart, rightNode, role
    // item 7340
    leftNode = rightEdge.head
    rightNode = rightEdge.tail
    finalTarget = rightEdge.finalTarget
    role = rightEdge.role
    // item 7335
    removeEdge(
        visuals,
        rightEdge.id
    )
    // item 7336
    jun = createJunction(
        visuals,
        finalTarget
    )
    // item 7341
    leftPart = makeRightEdge(
        visuals,
        leftNode,
        jun,
        finalTarget
    )
    // item 7342
    leftPart.role = role
    // item 7343
    makeRightLoopEdge(
        visuals,
        jun,
        rightNode,
        finalTarget
    )
    // item 7337
    return jun
}

function splitToken(self, token) {
    var i, text, text2, token1, token2, width
    // item 2212
    i = token.text.length - 1
    while (true) {
        // item 2252
        text = token.text.substring(
            0,
            i
        )
        // item 2251
        width = self.render.measureTextWidth(
            text
        )
        // item 2223
        if ((i > 1) && (width > self.maxLength)) {
            
        } else {
            break;
        }
        // item 2222
        i--
    }
    // item 2244
    text2 = token.text.substring(
        i,
        token.text.length
    )
    // item 2245
    token1 = new Token(token.type)
    token1.text = text
    token1.color = token.color
    // item 2246
    token2 = new Token(token.type)
    token2.text = text2
    token2.color = token.color
    // item 2253
    placeTokenCore(
        self,
        token1,
        width
    )
    // item 2256
    return token2
}

function splitVertical(visuals, node) {
    var finalTarget, jun, upEdge, upNode
    // item 3666
    upEdge = node.up
    upNode = upEdge.head
    finalTarget = upEdge.finalTarget
    // item 3667
    removeEdge(
        visuals,
        upEdge.id
    )
    // item 3668
    jun = createJunction(
        visuals,
        finalTarget
    )
    // item 4310
    makeDownEdge(
        visuals,
        upNode,
        jun,
        finalTarget
    )
    // item 4311
    makeDownEdge(
        visuals,
        jun,
        node,
        finalTarget
    )
    // item 3671
    return jun
}

function splitVerticalUp(visuals, upEdge) {
    var downNode, finalTarget, jun, upNode
    // item 7304
    upNode = upEdge.head
    downNode = upEdge.tail
    finalTarget = upEdge.finalTarget
    // item 7305
    removeEdge(
        visuals,
        upEdge.id
    )
    // item 7306
    jun = createJunction(
        visuals,
        finalTarget
    )
    // item 7309
    makeUpEdge(
        visuals,
        jun,
        downNode,
        finalTarget
    )
    // item 7308
    makeUpEdge(
        visuals,
        upNode,
        jun,
        finalTarget
    )
    // item 7307
    return jun
}

function standardCandy(item, render, color) {
    var candies, layer
    // item 4694
    layer = "icon_candies"
    // item 4695
    candies = buildDrnCandies(item)
    // item 46960001
    var _ind4696 = 0;
    var _col4696 = candies;
    var _len4696 = _col4696.length;
    while (true) {
        // item 46960002
        if (_ind4696 < _len4696) {
            
        } else {
            break;
        }
        // item 46960004
        var candy = _col4696[_ind4696];
        // item 4699
        render.createJCandy(
            candy.x,
            candy.y,
            CandyColor,
            layer
        )
        // item 46960003
        _ind4696++;
    }
}

function startEdit() {
    var node, nodes
    // item 11891
    nodes = getNodesFromSelection()
    // item 11892
    if (nodes.length == 1) {
        // item 11895
        node = nodes[0]
        // item 11896
        if (canEditNodeText(node)) {
            // item 11897
            startEditText(node.id)
        }
    }
}

function startEditText(nodeId) {
    var node, old, setTextProc, title, validate, x, y
    // item 5166
    node = getNode(nodeId)
    // item 12911
    if (node.type == "params") {
        // item 12914
        changeDiagramProperties()
    } else {
        // item 11721
        old = node.text
        // item 5170
        x = node.x + node.w
        y = node.y - node.h
        // item 5164
        setTextProc = function(text) {
            setNodeText(nodeId, text)
        }
        // item 5247
        if (node.type == "header") {
            // item 5251
            title = tr("MES_RENAME_DIAGRAM")
            // item 5264
            validate = validateModuleName
        } else {
            // item 5250
            title = tr("MES_CHANGE_ITEM_TEXT") +
             ": " + node.itemId
            // item 5263
            validate = validateItemText
        }
        // item 5163
        showInputBox(
            title,
            old,
            setTextProc,
            x,
            y,
            validate
        )
    }
}

function startEditTextAt(id, x, y) {
    var middle, node
    // item 13158
    node = getNode(id)
    // item 13159
    middle = node.y - node.h +
     node.a * 2
    // item 13176
    if ((node.type == "input") && (!(y > middle))) {
        // item 13163
        startEditUpperText(id)
    } else {
        // item 5188
        startEditText(id)
    }
}

function startEditUpperText(nodeId) {
    var node, old, setTextProc, title, validate, x, y
    // item 13129
    node = getNode(nodeId)
    // item 13138
    old = node.text2 || ""
    // item 13130
    x = node.x + node.w
    y = node.y - node.h
    // item 13128
    setTextProc = function(text) {
        setNodeText2(nodeId, text)
    }
    // item 13134
    title = tr("MES_CHANGE_ITEM_UPPER") +
     ": " + node.itemId
    // item 13136
    validate = validateItemText
    // item 13127
    showInputBox(
        title,
        old,
        setTextProc,
        x,
        y,
        validate
    )
}

function startIndented(output, depth) {
    var i
    // item 11550
    printToken(
        output,
        createEol()
    )
    // item 11554
    output.current = 0
    // item 115510001
    i = 0;
    while (true) {
        // item 115510002
        if (i < depth * TabSize) {
            
        } else {
            break;
        }
        // item 11553
        printToken(
            output,
            createSpace()
        )
        // item 115510003
        i++;
    }
}

function startStatement(block) {
    var old
    // item 11342
    old = block.statement
    // item 11345
    if (old.items.length == 0) {
        
    } else {
        // item 11343
        block.statements.push(old)
    }
    // item 11344
    block.statement = createStatement()
    block.prev = "operator"
}

function startToken(self, type, c) {
    // item 1553
    self.token = new Token(
        type
    )
    // item 1554
    self.chars = [c]
}

function startVisualDrag(itemId) {
    
}

function subtract(from, what) {
    var result
    // item 9057
    result = {}
    // item 90510001
    var _ind9051 = 0;
    var _col9051 = from;
    var _keys9051 = Object.keys(_col9051); 
    var _len9051 = _keys9051.length;
    while (true) {
        // item 90510002
        if (_ind9051 < _len9051) {
            
        } else {
            break;
        }
        // item 90510004
        var key = _keys9051[_ind9051]; var value = _col9051[key];
        // item 9054
        if (key in what) {
            
        } else {
            // item 9053
            result[key] = value
        }
        // item 90510003
        _ind9051++;
    }
    // item 9058
    return result
}

function swapYesNo(node) {
    var change, edits
    // item 7920
    edits = []
    // item 7918
    change = {
        flag1 : node.flag1 ? 0 : 1
    }
    // item 7919
    updateItem(
        edits,
        node.itemId,
        change
    )
    // item 7921
    return edits
}

function tailChars(text, n) {
    var first
    // item 12520
    if (text.length > n) {
        // item 12525
        first = text.length - n
        // item 12524
        return text.substring(first)
    } else {
        // item 12523
        return text
    }
}

function takeOldValues(fields, old) {
    var undo
    // item 5145
    undo = {}
    // item 51210001
    var _ind5121 = 0;
    var _col5121 = fields;
    var _keys5121 = Object.keys(_col5121); 
    var _len5121 = _keys5121.length;
    while (true) {
        // item 51210002
        if (_ind5121 < _len5121) {
            
        } else {
            break;
        }
        // item 51210004
        var name = _keys5121[_ind5121]; var _ = _col5121[name];
        // item 5124
        var oldValue = old[name]
        // item 5125
        if ((oldValue === null) || (oldValue === undefined)) {
            // item 5129
            oldValue = ""
        }
        // item 5123
        undo[name] = oldValue
        // item 51210003
        _ind5121++;
    }
    // item 5146
    return undo
}

function tmpRenderSource(render, item, text, isSource) {
    var format, left, prims, texId, top
    // item 2401
    format = {}
    // item 2399
    format.fillColor = "#000000"
    format.lineColor = "#808080"
    format.lineThickness = 1
    format.lineStyle = "solid"
    format.shadow = null
    format.secondaryColor = "green"
    // item 2405
    render.setDefaultFont(
        "14px Cousine"
    )
    // item 2402
    texId = makeCustomTexture(
        render,
        item.x,
        item.y,
        item.w,
        item.h
    )
    // item 2400
    render.drawShape(
        texId,
        "rectangle",
        item.x,
        item.y,
        [item.w, item.h],
        format
    )
    // item 2416
    if (isSource) {
        // item 2404
        prims = flowSourceCode(render, text)
    } else {
        // item 2419
        prims = flowText(render, text, 200)
    }
    // item 2410
    console.log(prims.width, prims.height)
    // item 2409
    left = item.x - item.w
    top = item.y - item.h
    // item 24060001
    var _ind2406 = 0;
    var _col2406 = prims.tokens;
    var _len2406 = _col2406.length;
    while (true) {
        // item 24060002
        if (_ind2406 < _len2406) {
            
        } else {
            break;
        }
        // item 24060004
        var prim = _col2406[_ind2406];
        // item 2408
        render.drawText(
            texId,
            prim.text,
            prim.x + left,
            prim.y + top,
            prim.color
        )
        // item 24060003
        _ind2406++;
    }
}

function toBText() {
    var branch, keyText, lines, lines0, params, storage
    // item 13066
    storage = module.storage
    // item 10898
    lines = []
    // item 109320001
    var _ind10932 = 0;
    var _col10932 = storage.items;
    var _keys10932 = Object.keys(_col10932); 
    var _len10932 = _keys10932.length;
    while (true) {
        // item 109320002
        if (_ind10932 < _len10932) {
            
        } else {
            break;
        }
        // item 109320004
        var id = _keys10932[_ind10932]; var item = _col10932[id];
        // item 10949
        if ((item.type == "branch") && ((item.branchId === 0) || (item.branchId === 1))) {
            // item 10946
            branch = item
        } else {
            // item 10934
            itemToBText(
                lines,
                item
            )
        }
        // item 109320003
        _ind10932++;
    }
    // item 10947
    lines0 = []
    // item 10899
    addBText(
        lines0,
        "drakon",
        "header",
        storage.name,
        Config.DIAGRAM_VERSION
    )
    // item 13064
    keyText = createKeywordsText(storage)
    params = keyText + "\n\n" + storage.params
    params = params.trim()
    // item 13067
    if (params) {
        // item 13070
        addBText(
            lines0,
            "params",
            "params",
            params
        )
    }
    // item 10948
    itemToBText(
        lines0,
        branch
    )
    // item 10900
    return lines0.concat(lines).join("\n")
}

function toPrimitive() {
    var branches, ditch, edits, endId, first, firstId, i, rest, visuals
    // item 8179
    edits = []
    // item 8862
    visuals = module.visuals
    branches = visuals.branches
    first = {}
    rest = {}
    // item 9714
    firstId = branches[0].node.itemId
    // item 8861
    scanBranchItems(
        branches[0].node,
        first
    )
    // item 88630001
    i = 1;
    while (true) {
        // item 88630002
        if (i < branches.length) {
            
        } else {
            break;
        }
        // item 8865
        scanBranchItems(
            branches[i].node,
            rest
        )
        // item 88630003
        i++;
    }
    // item 8868
    if (visuals.end) {
        // item 8877
        endId = visuals.end.itemId
        // item 8867
        delete rest[endId]
    } else {
        // item 8878
        endId = createItem(
            edits,
            {type: "end"}
        )
    }
    // item 9713
    rest[firstId] = true
    // item 8905
    redirectBranch(
        first,
        rest,
        endId,
        edits
    )
    // item 9715
    delete rest[firstId]
    // item 8872
    ditch = function(itemId) {
        deleteItem(edits, itemId)
    }
    // item 8873
    Object.keys(rest).forEach(
        ditch
    )
    // item 8906
    updateItem(
        edits,
        branches[0].node.itemId,
        {text:"", branchId:0}
    )
    // item 8180
    return edits
}

function toSilhouette() {
    var b1, b2, b3, branch2, branch3, edits, end, fb, visuals
    // item 8233
    visuals = module.visuals
    end = visuals.end
    // item 8165
    edits = []
    // item 8231
    b1 = branchLabel() + "1"
    b2 = branchLabel() + "2"
    b3 = branchLabel() + "3"
    // item 8232
    fb = firstBranchNode(visuals)
    // item 8251
    branch3 = createItem(
        edits,
        {type:"branch", text:b3, one:end.itemId, branchId:3}
    )
    // item 8252
    branch2 = createItem(
        edits,
        {type:"branch", text:b2, one:branch3, branchId:2}
    )
    // item 8234
    updateItem(
        edits,
        fb.itemId,
        {text: b1, branchId:1}
    )
    // item 8250
    redirectUpperItems(
        edits,
        end.up.links,
        branch2
    )
    // item 8253
    return edits
}

function toTokens(machines, text) {
    var c, category, i, length, machine
    // item 1269
    length = text.length
    // item 12670001
    i = 0;
    while (true) {
        // item 12670002
        if (i < length) {
            
        } else {
            break;
        }
        // item 1268
        c = text.charCodeAt(i)
        // item 1446
        if (c == 13) {
            
        } else {
            // item 1272
            category = classifyChar(c)
            // item 1273
            machine = machines.top()
            // item 1274
            callMethod(
                machine,
                category,
                [c]
            )
        }
        // item 12670003
        i++;
    }
    // item 1331
    machine = machines.top()
    machine.finish()
}

function toTokens2(machines, text) {
    var c, category, i, length, machine
    // item 10674
    length = text.length
    // item 106720001
    i = 0;
    while (true) {
        // item 106720002
        if (i < length) {
            
        } else {
            break;
        }
        // item 10673
        c = text.charCodeAt(i)
        // item 10680
        if (c == 13) {
            
        } else {
            // item 10696
            if (c == 10) {
                // item 10683
                machine.onChar("eol")
            } else {
                // item 10676
                category = classifyChar(c)
                // item 10677
                machine = machines.top()
                // item 10685
                machine.onChar(
                    "char",
                    category,
                    c,
                    i
                )
            }
        }
        // item 106720003
        i++;
    }
    // item 10679
    machine = machines.top()
    // item 10684
    machine.onChar("finish")
}

function toggleSilhouette() {
    var edits
    // item 8155
    if (isSilhouette()) {
        // item 8160
        edits = toPrimitive()
    } else {
        // item 8159
        edits = toSilhouette()
    }
    // item 8158
    brutalChange(edits)
}

function toggleTreeType() {
    
}

function traceLevel(visuals, node) {
    var level
    // item 3963
    level = createLevel(
        visuals
    )
    while (true) {
        // item 3964
        linkNodeToLevel(
            level,
            node
        )
        // item 3965
        if (node.right) {
            
        } else {
            break;
        }
        // item 3967
        node = getRight(node)
    }
}

function traceLoop(visited, node, loopEnd) {
    // item 6207
    if (node.id in visited) {
        
    } else {
        // item 6213
        visited[node.id] = true
        // item 6210
        if (node.loopEnd == loopEnd) {
            
        } else {
            // item 6248
            node.loops[loopEnd.id] = true
            // item 62490001
            var _ind6249 = 0;
            var _col6249 = node.prev;
            var _len6249 = _col6249.length;
            while (true) {
                // item 62490002
                if (_ind6249 < _len6249) {
                    
                } else {
                    break;
                }
                // item 62490004
                var prev = _col6249[_ind6249];
                // item 6251
                traceLoop(
                    visited,
                    prev,
                    loopEnd
                )
                // item 62490003
                _ind6249++;
            }
        }
    }
}

function traceLoops() {
    var trace, visuals
    // item 6195
    visuals = module.visuals
    // item 7997
    trace = function(node) {
        traceLoop({}, node, node)
    }
    // item 7999
    forType(
        visuals,
        "loopend",
        trace
    )
    // item 8001
    forType(
        visuals,
        "select",
        putLoopsOnCases
    )
}

function traceSkewer(visuals, node) {
    var beneath, skewer
    // item 3850
    skewer = createSkewer(
        visuals
    )
    // item 7822
    if (node.type == "header") {
        // item 7825
        skewer.main = true
    } else {
        // item 8654
        beneath = getDown(node)
        // item 8655
        if (beneath.type == "branch") {
            // item 7825
            skewer.main = true
        }
    }
    while (true) {
        // item 3851
        linkNodeToSkewer(
            skewer,
            node
        )
        // item 3852
        if (node.down) {
            
        } else {
            break;
        }
        // item 3854
        node = getDown(node)
    }
}

function translateLabel(prop, textId) {
    // item 10876
    if (module.userSettings[prop]) {
        // item 10875
        return module.userSettings[prop]
    } else {
        // item 10879
        return translate(textId)
    }
}

function traverseItem(items, prev, itemId, visited) {
    var item, node
    // item 4994
    if ((itemId) && (!(itemId in visited))) {
        // item 4993
        visited[itemId] = false
        // item 7807
        node = getNodeByItem(
            module.visuals,
            itemId
        )
        // item 8777
        if ((node.type == "branch") || (isBackLink(prev, node))) {
            
        } else {
            // item 4997
            item = items[itemId]
            // item 4998
            traverseItem(
                items,
                node,
                item.one,
                visited
            )
            // item 4999
            traverseItem(
                items,
                node,
                item.two,
                visited
            )
        }
    }
}

function traverseItemToDelete(context, prev, itemId) {
    var item, node, visited
    // item 7781
    visited = context.visited
    // item 5025
    if ((itemId) && (!(itemId in visited))) {
        // item 5033
        node = getNodeByItem(
            module.visuals,
            itemId
        )
        // item 8775
        if (node.type == "branch") {
            
        } else {
            // item 7738
            if (isBackLink(prev, node)) {
                // item 7775
                if (hasUntouchedArrows(visited, node)) {
                    
                } else {
                    // item 7777
                    visited[itemId] = true
                    // item 7779
                    context.deleteList.push(itemId)
                    // item 7780
                    unlinkArrow(
                        node,
                        visited,
                        context.edits
                    )
                }
            } else {
                // item 5039
                if (hasUntouchedUpstream(visited, node)) {
                    
                } else {
                    // item 5024
                    visited[itemId] = true
                    // item 5031
                    context.deleteList.push(itemId)
                    // item 5028
                    item = context.items[itemId]
                    // item 5029
                    traverseItemToDelete(
                        context,
                        node,
                        item.one
                    )
                    // item 5030
                    traverseItemToDelete(
                        context,
                        node,
                        item.two
                    )
                }
            }
        }
    }
}

function turn180up(visuals, node1, node2) {
    var bottom, left, top
    // item 7318
    top = getRight(node2)
    // item 7316
    bottom = createJunction(
        visuals,
        node2
    )
    // item 7317
    makeUpEdge(
        visuals,
        top,
        bottom,
        node2
    )
    // item 7319
    left = createJunction(
        visuals,
        node2
    )
    // item 7320
    makeDownEdge(
        visuals,
        node1,
        left,
        node2
    )
    // item 7321
    makeRightLoopEdge(
        visuals,
        left,
        bottom,
        node2
    )
    // item 7322
    createTempEdge(
        visuals,
        node1,
        left
    )
}

function turnDown(visuals, node1, node2) {
    var finalTarget, jun
    // item 6493
    finalTarget = node2
    // item 3581
    jun = createLeftDown(
        visuals,
        finalTarget
    )
    // item 4301
    makeRightEdge(
        visuals,
        node1,
        jun,
        finalTarget
    )
    // item 4300
    return jun
}

function twoTokens(token, secondStart) {
    var text1, text2, token1, token2
    // item 2232
    text1 = token.text.substring(
        0,
        secondStart
    )
    // item 2233
    text2 = token.text.substring(
        secondStart,
        token.text.length
    )
    // item 2234
    token1 = new Token(token.type)
    token1.text = text1
    token1.color = token.color
    // item 2235
    token2 = new Token(token.type)
    token2.text = text2
    token2.color = token.color
    // item 2236
    return {
        first : token1,
        second : token2
    }
}

function unlinkArrow(arrowNode, visited, edits) {
    var node
    // item 7795
    node = arrowNode
    while (true) {
        // item 7797
        node = node.next[0]
        // item 7798
        if (visited[node.itemId]) {
            
        } else {
            break;
        }
    }
    // item 7800
    redirectUpperItems(
        edits,
        arrowNode.up.links,
        node.itemId
    )
}

function unselectEdges() {
    var ids, node, selection
    // item 9769
    selection = module.selection
    ids = Object.keys(selection.prims)
    // item 97700001
    var _ind9770 = 0;
    var _col9770 = ids;
    var _len9770 = _col9770.length;
    while (true) {
        // item 97700002
        if (_ind9770 < _len9770) {
            
        } else {
            break;
        }
        // item 97700004
        var id = _col9770[_ind9770];
        // item 9772
        if (selection.prims[id] == "edge") {
            // item 9775
            delete selection.prims[id]
        } else {
            // item 10170
            node = getNode(id)
            // item 10171
            if (canSelectNode(node)) {
                
            } else {
                // item 9775
                delete selection.prims[id]
            }
        }
        // item 97700003
        _ind9770++;
    }
    // item 10172
    if (Object.keys(selection.prims).length == 0) {
        // item 10175
        selection.head = null
    }
}

function updateDiagram(edits, fields) {
    var edit
    // item 5218
    edit = new Edit(
        "update",
        "diagrams",
        null,
        fields
    )
    // item 5219
    edits.push(
        edit
    )
}

function updateItem(edits, id, fields) {
    var edit
    // item 4558
    edit = new Edit(
        "update",
        "items",
        id,
        fields
    )
    // item 4562
    edits.push(
        edit
    )
}

function updateOccurence(occurence) {
    var N, after, before, match, text
    // item 12503
    N = 30
    text = occurence.item.text
    // item 12502
    before = text.substring(
        0,
        occurence.begin
    )
    // item 12504
    match = text.substring(
        occurence.begin,
        occurence.end
    )
    // item 12505
    after = text.substring(
        occurence.end
    )
    // item 12506
    occurence.before = oneLine(tailChars(before, N))
    // item 12507
    occurence.match = oneLine(match)
    // item 12508
    occurence.after = oneLine(after.substring(0, N))
}

function updateSearchOutput() {
    var current, occ, search
    // item 12033
    search = module.search
    // item 12040
    search.output.total = search.occurences.filter(
    	isActive).length
    // item 12030
    if (search.output.total == 0) {
        // item 12034
        search.output.current = -1
        search.output.canNext = false
        search.output.canPrev = false
        search.output.canReplace = false
        search.output.canReplaceAll = false
        search.output.before = ""
        search.output.match = ""
        search.output.after = ""
        search.output.id = undefined
    } else {
        // item 12036
        current = search.output.current
        // item 12624
        search.output.canNext = true
        search.output.canPrev = true
        search.output.canReplaceAll = true
        // item 12055
        if (getPrevOccurence() == -1) {
            // item 12051
            search.output.canPrev = false
        }
        // item 12063
        if (getNextOccurence() == -1) {
            // item 12066
            search.output.canNext = false
        }
        // item 12052
        if (current == -1) {
            // item 12625
            search.output.canReplace = false
            // item 12050
            search.output.before = ""
            search.output.match = ""
            search.output.after = ""
        } else {
            // item 12062
            search.output.canReplace = true
            // item 12069
            occ = search.occurences[current]
            // item 12068
            search.output.before = occ.before
            search.output.match = occ.match
            search.output.after = occ.after
            search.output.id = occ.id
        }
        // item 12037
        if (self.readonly) {
            // item 12035
            search.output.canReplace = false
            search.output.canReplaceAll = false
        }
    }
}

function validateItemText(text) {
    var error
    // item 5295
    error = checkInputText(text)
    // item 5296
    if (error) {
        // item 5294
        return translate(error)
    } else {
        // item 5290
        return null
    }
}

function validateModuleName(name) {
    var error
    // item 5282
    error = checkInputText(name)
    // item 5283
    if (error) {
        // item 5262
        return translate(error)
    } else {
        // item 5259
        error = Utils.validateModuleName(
            name,
            module.language
        )
        // item 5260
        if (error) {
            // item 5262
            return translate(error)
        } else {
            // item 5258
            return null
        }
    }
}

function verticalCandy(edge, render) {
    var bottom, h, head, headX, headY, tail, tailY, top, x, y
    // item 4771
    head = edge.head
    tail = edge.tail
    // item 4769
    headX = getX(head)
    headY = getY(head)
    tailY = getY(tail)
    x = headX
    y = headY
    h = tailY - headY
    // item 4720
    top = y + head.h
    bottom = tailY - tail.h
    // item 4721
    render.createVCandy(
        x,
        y,
        h,
        false,
        top,
        bottom,
        "line_candies"
    )
}

function visualDrag(dx, dy, visibleBox) {
    
}

function withinSameLoop(src, target) {
    var node, targetNode
    // item 8149
    targetNode = target.finalTarget
    // item 81420001
    var _ind8142 = 0;
    var _col8142 = src.links;
    var _len8142 = _col8142.length;
    while (true) {
        // item 81420002
        if (_ind8142 < _len8142) {
            
        } else {
            // item 8147
            return true
        }
        // item 81420004
        var link = _col8142[_ind8142];
        // item 8148
        node = getNodeByItem(
            module.visuals,
            link.source
        )
        // item 8144
        if (withinSameLoopCore(node, targetNode, 0)) {
            
        } else {
            // item 8107
            return false
        }
        // item 81420003
        _ind8142++;
    }
}

function withinSameLoopCore(node, target, depth) {
    var _sw81210000_ = 0;
    // item 81210000
    _sw81210000_ = node.type;
    // item 81210001
    if (_sw81210000_ === "loopbegin") {
        // item 8128
        depth--
    } else {
        // item 81210002
        if (_sw81210000_ === "loopend") {
            // item 8129
            depth++
        }
    }
    // item 8131
    if (depth < 0) {
        // item 8134
        return false
    } else {
        // item 8135
        if (node == target) {
            // item 8137
            return true
        } else {
            // item 81380001
            var _ind8138 = 0;
            var _col8138 = node.prev;
            var _len8138 = _col8138.length;
            while (true) {
                // item 81380002
                if (_ind8138 < _len8138) {
                    
                } else {
                    // item 8137
                    return true
                }
                // item 81380004
                var prev = _col8138[_ind8138];
                // item 8140
                if (withinSameLoopCore(prev, target, depth)) {
                    
                } else {
                    // item 8134
                    return false
                }
                // item 81380003
                _ind8138++;
            }
        }
    }
}

function yes() {
    // item 10880
    return translateLabel("yes", "DIA_YES")
}

function yesWidth(render) {
    // item 2696
    return render.measureTextWidth(yes())
}

function TokenBuilder() {
  var _self = this;
  _self.type_name = "TokenBuilder";
  _self.state = "Empty";
  _self.addChar = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Empty") {
      return TokenBuilder_Empty_addChar(_self, msg);
    }
    else if (_state_ == "Building") {
      return TokenBuilder_Building_addChar(_self, msg);
    }
    return null;
  };
  _self.endToken = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Building") {
      return TokenBuilder_Building_endToken(_self, msg);
    }
    return null;
  };
  _self.eol = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Empty") {
      return TokenBuilder_Empty_eol(_self, msg);
    }
    else if (_state_ == "Building") {
      return TokenBuilder_Building_eol(_self, msg);
    }
    return null;
  };
  _self.finish = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Building") {
      return TokenBuilder_Building_finish(_self, msg);
    }
    return null;
  };
  _self.identifier = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Empty") {
      return TokenBuilder_Empty_identifier(_self, msg);
    }
    else if (_state_ == "Building") {
      return TokenBuilder_Building_identifier(_self, msg);
    }
    return null;
  };
  _self.number = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Empty") {
      return TokenBuilder_Empty_number(_self, msg);
    }
    else if (_state_ == "Building") {
      return TokenBuilder_Building_number(_self, msg);
    }
    return null;
  };
  _self.sendToken = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Empty") {
      return TokenBuilder_Empty_sendToken(_self, msg);
    }
    else if (_state_ == "Building") {
      return TokenBuilder_Building_sendToken(_self, msg);
    }
    return null;
  };
}

function OperatorBuilder() {
  var _self = this;
  _self.type_name = "OperatorBuilder";
  _self.state = "Idle";
  _self.operator = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Idle") {
      return OperatorBuilder_Idle_operator(_self, msg);
    }
    else if (_state_ == "One") {
      return OperatorBuilder_One_operator(_self, msg);
    }
    else if (_state_ == "Two") {
      return OperatorBuilder_Two_operator(_self, msg);
    }
    return null;
  };
}

function DoubleQuoter() {
  var _self = this;
  _self.type_name = "DoubleQuoter";
  _self.state = "Created";
  _self.alpha = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Created") {
      return DoubleQuoter_Created_default(_self, msg);
    }
    else if (_state_ == "Normal") {
      return DoubleQuoter_Normal_alpha(_self, msg);
    }
    else if (_state_ == "Escaping") {
      return DoubleQuoter_Escaping_default(_self, msg);
    }
    return null;
  };
  _self.digit = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Created") {
      return DoubleQuoter_Created_default(_self, msg);
    }
    else if (_state_ == "Normal") {
      return DoubleQuoter_Normal_digit(_self, msg);
    }
    else if (_state_ == "Escaping") {
      return DoubleQuoter_Escaping_default(_self, msg);
    }
    return null;
  };
  _self.operator = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Created") {
      return DoubleQuoter_Created_operator(_self, msg);
    }
    else if (_state_ == "Normal") {
      return DoubleQuoter_Normal_operator(_self, msg);
    }
    else if (_state_ == "Escaping") {
      return DoubleQuoter_Escaping_operator(_self, msg);
    }
    return null;
  };
  _self.whitespace = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Created") {
      return DoubleQuoter_Created_default(_self, msg);
    }
    else if (_state_ == "Normal") {
      return DoubleQuoter_Normal_whitespace(_self, msg);
    }
    else if (_state_ == "Escaping") {
      return DoubleQuoter_Escaping_default(_self, msg);
    }
    return null;
  };
}

function SingleQuoter() {
  var _self = this;
  _self.type_name = "SingleQuoter";
  _self.state = "Created";
  _self.alpha = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Created") {
      return SingleQuoter_Created_default(_self, msg);
    }
    else if (_state_ == "Normal") {
      return SingleQuoter_Normal_alpha(_self, msg);
    }
    else if (_state_ == "Escaping") {
      return SingleQuoter_Escaping_default(_self, msg);
    }
    return null;
  };
  _self.digit = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Created") {
      return SingleQuoter_Created_default(_self, msg);
    }
    else if (_state_ == "Normal") {
      return SingleQuoter_Normal_digit(_self, msg);
    }
    else if (_state_ == "Escaping") {
      return SingleQuoter_Escaping_default(_self, msg);
    }
    return null;
  };
  _self.operator = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Created") {
      return SingleQuoter_Created_operator(_self, msg);
    }
    else if (_state_ == "Normal") {
      return SingleQuoter_Normal_operator(_self, msg);
    }
    else if (_state_ == "Escaping") {
      return SingleQuoter_Escaping_operator(_self, msg);
    }
    return null;
  };
  _self.whitespace = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Created") {
      return SingleQuoter_Created_default(_self, msg);
    }
    else if (_state_ == "Normal") {
      return SingleQuoter_Normal_whitespace(_self, msg);
    }
    else if (_state_ == "Escaping") {
      return SingleQuoter_Escaping_default(_self, msg);
    }
    return null;
  };
}

function SourceFlower() {
  var _self = this;
  _self.type_name = "SourceFlower";
  _self.state = "Created";
  _self.eol = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Created") {
      return SourceFlower_Created_default(_self, msg);
    }
    else if (_state_ == "Normal") {
      return SourceFlower_Normal_eol(_self, msg);
    }
    return null;
  };
  _self.init = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Created") {
      return SourceFlower_Created_init(_self, msg);
    }
    return null;
  };
  _self.onToken = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Created") {
      return SourceFlower_Created_default(_self, msg);
    }
    else if (_state_ == "Normal") {
      return SourceFlower_Normal_onToken(_self, msg);
    }
    return null;
  };
}

function TextLexer() {
  var _self = this;
  _self.type_name = "TextLexer";
  _self.state = "Idle";
  _self.alpha = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Idle") {
      return TextLexer_Idle_alpha(_self, msg);
    }
    else if (_state_ == "Identifier") {
      return TextLexer_Identifier_default(_self, msg);
    }
    return null;
  };
  _self.digit = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Idle") {
      return TextLexer_Idle_digit(_self, msg);
    }
    else if (_state_ == "Identifier") {
      return TextLexer_Identifier_default(_self, msg);
    }
    return null;
  };
  _self.operator = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Idle") {
      return TextLexer_Idle_operator(_self, msg);
    }
    else if (_state_ == "Identifier") {
      return TextLexer_Identifier_default(_self, msg);
    }
    return null;
  };
  _self.whitespace = function(msg) {
    var _state_ = _self.state;
    if (_state_ == "Idle") {
      return TextLexer_Idle_whitespace(_self, msg);
    }
    else if (_state_ == "Identifier") {
      return TextLexer_Identifier_whitespace(_self, msg);
    }
    return null;
  };
}

function OuterCrawler() {
  var _self = this;
  _self.type_name = "OuterCrawler";
  _self.state = "down";
  _self.onEdge = function(edge) {
    var _state_ = _self.state;
    if (_state_ == "down") {
      return OuterCrawler_down_onEdge(_self, edge);
    }
    else if (_state_ == "rightLoop") {
      return OuterCrawler_rightLoop_onEdge(_self, edge);
    }
    else if (_state_ == "downLoop") {
      return OuterCrawler_downLoop_onEdge(_self, edge);
    }
    else if (_state_ == "leftLoop") {
      return OuterCrawler_leftLoop_onEdge(_self, edge);
    }
    else if (_state_ == "right") {
      return OuterCrawler_right_onEdge(_self, edge);
    }
    else if (_state_ == "left") {
      return OuterCrawler_left_onEdge(_self, edge);
    }
    return null;
  };
}

function InnerCrawler() {
  var _self = this;
  _self.type_name = "InnerCrawler";
  _self.state = "down";
  _self.onEdge = function(edge) {
    var _state_ = _self.state;
    if (_state_ == "down") {
      return InnerCrawler_down_onEdge(_self, edge);
    }
    else if (_state_ == "left") {
      return InnerCrawler_left_onEdge(_self, edge);
    }
    else if (_state_ == "right") {
      return InnerCrawler_right_onEdge(_self, edge);
    }
    return null;
  };
}

function OperBuilder() {
  var _self = this;
  _self.type_name = "OperBuilder";
  _self.state = "Idle";
  _self.eol = function(token) {
    var _state_ = _self.state;
    if (_state_ == "Idle") {
      return OperBuilder_Idle_eol(_self, token);
    }
    else if (_state_ == "One") {
      return OperBuilder_One_eol(_self, token);
    }
    else if (_state_ == "Two") {
      return OperBuilder_Two_eol(_self, token);
    }
    return null;
  };
  _self.onToken = function(token) {
    var _state_ = _self.state;
    if (_state_ == "Idle") {
      return OperBuilder_Idle_onToken(_self, token);
    }
    else if (_state_ == "One") {
      return OperBuilder_One_onToken(_self, token);
    }
    else if (_state_ == "Two") {
      return OperBuilder_Two_onToken(_self, token);
    }
    return null;
  };
}


function FakePersistence() {
	var module = this;
	
	module.add = function(item) {}
	module.remove = function(id) {}
	module.update = function(item) {}
	module.updateDiagram = function(name) {}
	module.persist = function() {}
}



// Public methods

this.buildTextBoxes = buildTextBoxes
this.setReadonly = setReadonly
this.findVisualItem = findVisualItem;
this.startVisualDrag = startVisualDrag;
this.visualDrag = visualDrag;
this.endVisualDrag = endVisualDrag;

this.autoSizeIcons = autoSizeIcons;

this.hit = hit;
this.setCallback = setCallback;

this.measureDiagram = measureDiagram;
this.getIconCount = getIconCount;


this.clearUndo = clearUndo;
this.drawToOtherRender = drawToOtherRender;
this.drawToOtherRender = drawToOtherRender;
this.mouseClick = mouseClick;
this.buildBlockMenu = buildBlockMenu;
this.deselect = deselect;
this.blockSelect = blockSelect;
this.beginBlockSelect = beginBlockSelect;
this.isSelected = isSelected;


this.redraw = redraw;

this.setItemWidth = setItemWidth;
this.buildMenuAt = buildMenuAt;
this.insertFreeItem = insertFreeItem
this.setFreeItemSize = setFreeItemSize
this.moveHandle = moveHandle
this.saveHandlePos = saveHandlePos
this.setBackground = setBackground
this.setFormat = setFormat
this.getFormat = getFormat
this.getItemRect = getItemRect
this.getFonts = getFonts
this.getFont = getFont
this.clearFormat = clearFormat
this.getSelection = getSelection
this.selectAll = selectAll
this.findDraggable = findDraggable
this.setContent = setContent
this.setUserSettings = setUserSettings



this.getItem = getItem
this.selectOneItem = selectOneItem
this.toggleTreeType = toggleTreeType
this.getFontsForItems = getFontsForItems

this.loadDiagram = loadDiagram
this.createDiagram = createDiagram

editMethod("addParameters", addParameters)
editMethod("deleteSelection", deleteSelection)
editMethod("performRedo", performRedo)
editMethod("performUndo", performUndo)
editMethod("toggleSilhouette", toggleSilhouette)
editMethod("cut", cut)
editMethod("paste", paste)
editMethod("showInsertionSockets", showInsertionSockets)
editMethod("clickSocket", clickSocket)
editMethod("findSocket", findSocket)
editMethod("replace", replace)
editMethod("findReplaceAll", findReplaceAll)
editMethod("setProperties", setProperties)



roMethod("copy", copy)
roMethod("hideSockets", hideSockets)
roMethod("fireSocket", fireSocket)
roMethod("darkenSocket", darkenSocket)
roMethod("diagramToJson", diagramToJson)
roMethod("getDiagramAsItems", getDiagramAsItems)
roMethod("canEditText", canEditText)
roMethod("startEditText", startEditText)
roMethod("startEditTextAt", startEditTextAt)
roMethod("toBText", toBText)
roMethod("startEdit", startEdit)
roMethod("arrowUp", arrowUp)
roMethod("arrowDown", arrowDown)
roMethod("arrowLeft", arrowLeft)
roMethod("arrowRight", arrowRight)
roMethod("getSearchState", getSearchState)

roMethod("getSearchState", getSearchState)
roMethod("searchNext", searchNext)
roMethod("searchPrev", searchPrev)
roMethod("changeSearch", changeSearch)

init()

}
